//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.78;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.78] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x4a80d9=_0x3fe6;function _0x941e(){const _0x39277a=['startVisualCutin','fRmvK','needsSelectionBattleCore','rHjKX','canAttack','playOnceParallelInterpreter','setLetter','Game_Map_setupBattleback','isBusy','rIyZn','_angleDuration','StatusWindowSelectableBackHide','isBattleSys','tNVqw','ActSeq_Mechanics_AddState','addShowHpGaugeCommand','CriticalColor','requestAnimation','iconIndex','calcWindowHeight','_borderPortraitDuration','canInput','collapse','process_VisuMZ_BattleCore_Failsafes','ShowPopup','battleProjectiles','xPPIP','regenerateAllBattleCore','isAnyoneChangingOpacity','State-%1-%2','setBackgroundType','okButtonText','XdLgd','_battlerContainer','raZLN','setupIconTextPopup','CByJf','_enemyNameContainer','charged','clamp','swMtY','commandNameWindowDrawBackground','EVAL','_opacityEasing','cancelTargetSelectionVisibility','targetsForOpponents','_jumpDuration','npjBh','AddHpGaugeOption','Game_Actor_equips','NSqBm','isNextSceneBattleTransitionable','DTB','2kUGgTv','Scene_Battle_helpWindowRect','KOQTT','TPjXX','checkTpbInputOpen','isClicked','VFRMx','_createDamageContainer','adjustPosition_ScaleUp','qATED','IconSet','extraHeight','CqdKp','BZrNT','clearForcedGameTroopSettingsBattleCore','BattleManager_startTurn','performFlinch','svActorVertCells','rntVr','IzlqW','removeAnimation','special','_lastRegenFrameCount','commandStyle','createString','top','coreEngineRepositionEnemies','tmFAW','isSkillItemWindowsMiddle','performAttackSlot','removeBuff','itemLifeStealRate','extraPositionY','moveBattlerHomeDistance','battleSpriteSkew','endAction','VisuMZ_0_CoreEngine','lvFnG','TtQuQ','flashDuration','\x5cI[%1]%2','_currentAngle','Class-%1-%2','makeTargetsBattleCoreJS','ReflectAnimation','ShowActorGauge','portraitIndex','Sprite_Damage_createChildSprite','VisuMZ_3_BattleVoices','ActSeq_Horror_NoiseRemove','actorId','hidden','opGzp','Scene_Battle_onEnemyOk','Window_BattleActor_hide','YcSoI','drawItemImageXPStyle','ActSeq_Target_RandTarget','offsetY','_scene','updateBitmap','performTpbActiveCheckSwitch','TPUty','isBorderPortraitSpriteVisible','_targetGrowX','addState','NameOffsetX','isBattlerGrounded','DisplayAction','updateBattlebackBitmap2','pGpAf','parallaxScrollX','Name','JS\x20%1START\x20BATTLE','prototype','timeScale','wrfjD','_createEffectsContainer','setWaitMode','OCyJw','VarianceFormulaJS','xhONn','ActSeq_Impact_MotionBlurTarget','removeChild','OBgDX','gEspK','xYMJD','textColor','VwrRl','clearTargetBattlerKey','CpKgx','updateCollapse','selectLast','isBTB','PElgF','PreDamageAsTargetJS','CommandWidth','itemEffectAddNormalState','_executedValue','AddOption','isFloating','playEnemyAttack','createAttachmentSprites','JSON','YZgwK','irEkS','_colorType','createCommandVisibleJS','DefaultHardCap','alphabetic','ActSeq_Movement_MoveToPoint','LaPPj','setTroopPage','DamageStyleList','mainSpriteScaleX','alterCost','front\x20center','addChildAt','Game_BattlerBase_meetsUsableItemConditions','setupNegativeImpactFilter','VisuMZ_2_BattleSystemCTB','setBattler','mCoZv','dataId','DisablePartyCmd','%1Event','checkBattleEnd','Scene_Battle_update','ESCAPE','version','makeDamageValue','pageup','isAlwaysVisible','BattleCore','Window_BattleLog_performDamage','TpbActiveChangeEnabled','qyJHV','Game_Interpreter_terminate','Height','activate','onDisabledPartyCommandSelection','_skewEasing','NameAlwaysVisible','setupDesaturateImpactFilter','svActorHorzCells','ParseWeaponNotetags','ParseArmorNotetags','ActSeq_Impact_Desaturate','all\x20enemies','ceil','PostStartBattleJS','YcSKK','FocusX','PmjuI','QtJuZ','uqptg','linkSprite','_skillWindow','battleSpin','ActSeq_Skew_Reset','ActSeq_Mechanics_CtbOrder','startWeaponAnimation','ShowHide','ActSeq_Mechanics_CtbSpeed','CreateCommonEventKeys','ActSeq_Mechanics_OtbOrder','_windowLayer','traitObjects','ScaleUp','getLastPluginCommandInterpreter','JGxMK','_dragonbonesSpriteContainer','HITTYPE_PHYSICAL','message2','iuoGB','bitmap','inputting','Scene_Battle_startActorCommandSelection','gradientFillRect','_growY','tJgon','Game_BattlerBase_eraseState','constructor','isTickBased','aVVzl','DefaultSoftScaler','uqaUN','_animation','isDisarmLifeSteal','onDatabaseLoaded','yWdnP','_motionType','lastFilename','setHue','initElementStatusCore','setupMotionBlurImpactFilter','currentExt','alive\x20friends\x20not\x20user','ApplyImmortal','bCKKl','AutoMeleeSolo','registerDefeatedEnemy','Scene_Party','YicsB','partyCommandWindowRectXPStyle','Filename','close','isGuard','dimColor2','flOcb','battleCommands','startActorCommandSelection','SkewY','closeBattleActorWindow','Hypjt','forceAction','HitRate','visibilityState','buffRemove','targetActionSet','XuzUM','_enemyMultiTargetWindow','waitForJump','isActionSelectionValid','Item-%1-%2','Defeat','Window_BattleLog_popBaseLine','map','Game_Actor_setup','escape','fHaZl','myMqC','IrcZi','weapons','startInjectAnimation','statusText','_baseLineStack','checkShowHideSwitchNotetags','autoBattleStart','battleDisplayText','_shadowScaleX','Wave','Scene_Battle_createEnemyWindow','DkNRc','buXev','kMcCC','BattleStartEvent','setHandler','start','DefaultSoftCap','meetsUsableItemConditions','isInputting','SceneManager_isSceneChanging','_floatHeight','rHTsw','moveBattlerHomeToPoint','ShowMissEvasion','isShownOnBattlePortrait','kzvGE','ActSeq_Movement_MoveToJsPoint','PostEndTurnJS','ktqPL','WaitForJump','font','VpQhL','Armor-%1-%2','nyQfr','createStateIconSprite','alive\x20friends\x20not\x20target','stopInjectAnimation','targetDistortionSpritePosition','_emptyBitmap','restore','setFullActionsPTB','uiInputPosition','ShowRemovedState','createAllWindows','MpGaugeOffsetX','vCZPT','Game_Party_addActor','finishActionSet','ATK','isAnyoneJumping','refreshRequest','ePhMZ','AllEnemiesText','MQJjz','meMFj','pXOyO','DistanceX','setBattleCameraOffset','usePremadeActionSequence','<CUSTOM\x20ACTION\x20SEQUENCE>','Scene_Battle_start','growBattler','addEscapeCommand','dead','isHiddenSkill','revertTpbCachedActor','yJlrC','aZzqS','PDVky','ActSeq_Movement_HomeMoveToPoint','rOQds','updateKeyboardKeys','_homeDuration','484624AdBSoA','findIndex','showPortraits','cczWN','_backAttachmentSprite','deadMembers','getBattlePortraitOffsetY','CriticalHitMultiplier','repeats','Sprite_Enemy_setBattler','isCancelLifeSteal','Yohaz','createCancelButton','ArwMr','isAutoBattle','AdjustRect','addBattleCoreAutoBattleStyleCommand','LuMHk','Sprite_Battler_initMembers','damageFlat','Sprite_Battler_startMove','wait','onBattleStartBattleCore','ActSeq_Element_ForceElements','reduce','JRTiI','Game_Action_isForOpponent','horzCells','ShakeFlinch','voFdp','efQBf','BattleManager_processVictory','all\x20targets','ConfigManager_makeData','iuXpl','getAttackMotion','Parse_Notetags_Action','Window_ActorCommand_setup','BattleDefeatJS','Game_Action_makeTargets','retreat','NewPopupBottom','processForcedAction','rEmBM','Window_BattleLog_performMiss','updateBossCollapse','FlinchDistanceX','iconWidth','FHbwt','string','addSingleSkillCommands','Window_BattleLog_performActionEnd','_actorWindow','CheckVisibleSkillNotetags','clearBattleRefreshRequest','Xdrxh','pointY','anchorX','VisuMZ_3_ActiveChainSkills','pha','_target','applyCritical','_tpbNeedsPartyCommand','PopupOffsetX','weaponTypes','Scene_ItemBase_applyItem','attackSkillId','SwitchMissEvade','drawItemImagePortraitStyle','windowskin','MtZbt','onJumpEnd','NXlfP','helpWindowRect','StatusWindowAttachmentBack','Text','removeOnceParallelInterpreter','battlelog','popBaseLine','OEdGM','AutoBattleCancel','GuardFormulaJS','onijc','statusWindowRectDefaultStyle','helpAreaHeight','PostDamageAsUserJS','type','die','hardDamageCap','PreApplyAsTargetJS','portraitFlipVert','Sgrot','lcURP','Game_BattlerBase_die','disarmMpLifeSteal','cameraOffsetDuration','_targetSkewX','diNfN','Window_BattleLog_performEvasion','createAnimationContainer','_weather','status','removeStatesAuto','makeActionOrders','ActSeq_BattleLog_WaitForBattleLog','callNextMethod','itemLineRect','includes','isBypassDamageCap','recoverAll','initMembersBattleCore','applyItem','displayMiss','PhFeb','CommonEventID','FiAiu','addChild','battleEffect','updateCallMenu','fGmLJ','PopupDuration','kIDfw','scale','LzZMU','isAlwaysHidden','regionId','OverallFormulaJS','smoothness','_phase','UqwuS','clearBattleCoreData','join','effect','_createCursorArea','kDQVl','startDamagePopup','cCRLc','onGrowEnd','CuQGl','visualHpGauge','BattleManager_setup','testApply','battleUIOffsetX','process_VisuMZ_BattleCore_CreateRegExp','numRepeats','left','agSvh','Jmhwv','battleCoreTpbMainPhase','Sprite_AnimationMV_updatePosition','isTpbMainPhase','turnOrderChangeOTB','_battleCoreNoElement','AnimationID','getDefeatedEnemies','cwljZ','PrioritySortActors','alive\x20enemies\x20not\x20target','cancelButtonText','isItem','Scene_Battle_startPartyCommandSelection','VisuMZ_3_FrontviewBattleUI','ActSeq_Target_NextTarget','zoPcA','ACTOR_OFFSET_X','isBattlerFlipped','portrait','onSkewEnd','updateInterpreter','split','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','moveToStartPosition','kmzTw','EscapeFailureJS','alterPriority','gainCurrentActionsFTB','createBattleFieldContainer','CreateActionSequenceTargets','makeActionListAutoAttack','RKJNh','DamageStyles','PreApplyAsUserJS','alterType','applyEasing','PreRegenerateJS','prev\x20target','battleAnimation','ParseClassNotetags','SlVWk','isBattleCoreTargetScope','enemyNames','_subject','isMVAnimation','_actorMultiTargetWindow','equips','onRegeneratePlayStateAnimation','pZZAf','float','_floatDuration','equipSlots','EeRwv','process_VisuMZ_BattleCore_PluginParams','command283','createBattleFieldBattleCore','ActSeq_Movement_WaitForScale','arPenFlat','Sprite_Actor_updateBitmap','setupBattleCoreData','Sprite_Actor_setBattler','updateEventMain','encounterList','RVZev','isEffecting','softDamageCapRate','_growEasing','svAnchorY','requestPointAnimation','performEvasion','moveBattlerDistance','save','updateVisibility','refreshCursor','alive\x20battlers\x20not\x20user','setAttack','changePaintOpacity','WaitForAngle','PVzGU','AutoBattleOK','displayCritical','ActionEnd','allowRandomSpeed','battleCamera','animation','startMove','hLNiB','pPQpz','PtGrI','ShowRemovedBuff','addSkillCommands','HpGaugeOffsetY','TadiK','%1EndActionJS','itemEffectRecoverHp','preemptive','isAnyoneInjectAnimating','isForAnyone','process_VisuMZ_BattleCore_DamageStyles','ActSeq_Camera_WaitForCamera','isActor','ActSeq_Mechanics_StbRemoveExcessActions','_stateSprite','getDualWieldTimes','_active','getItemDamageAmountLabelOriginal','BattleManager_processAbort','concat','PostApplyAsUserJS','jsScaleUp','kPmQu','MAT','hasSkill','chant','_item','Window_PartyCommand_initialize','isForFriend','battleInjectPrep','autoSelectLastSelected','mnxga','PostDamageAsTargetJS','isBorderStylePortraitShown','isLearnedSkill','GEgAD','performSubstitute','Gdsax','position','vLHFK','StartTurnMsg','QypUw','isAffectedByBreakShield','qJGfo','onBattleStartOnceParallels','displayFailure','_targetHomeX','_battlePortrait','Parse_Notetags_TraitObjects','portraitFlipHorz','updateStateSpriteBattleCore','startSpin','_targetHomeY','Jenft','gjwOC','process_VisuMZ_BattleCore_PreBattleCommonEvent','performMoveToPoint','addLoadListener','targetBattlerContainerOpacity','counterAttack','Game_BattlerBase_canAttack','RGCWI','35UvNHwC','FocusY','setLastPluginCommandInterpreter','auto','FlashDuration','setupWeaponAnimation','placeStateIcon','UswDK','isValid','CastCertain','meetsSelectFrontviewActorConditions','Victory','itemHit','StartName','autoSelectPriority','ActSeq_Mechanics_OnceParallel','_homeY','shouldPopupDamage','Game_Action_clear','selectAllActors','ActSeq_BattleLog_PushBaseLine','isAnyoneSpinning','onStaticEnemyBitmapLoad','mainSpriteScaleY','ABfSv','CommandAddOptions','getBattlePortraitOffsetX','UxtcV','GQpWq','Opacity','VisualCutinEffect','maxCols','deselect','FAuUh','Mechanics','EmergeText','NXJCR','FaceAway','createActorCommandWindowBattleCore','addItemCommand','_skewY','ActSeq_Motion_ClearFreezeFrame','updateHelp','drawTextEx','XgXMx','xEnjR','isCertainHit','Game_Action_isForFriend','targetsForFriends','_baseY','refresh','waitForMovement','BattleManager_processDefeat','ActSeq_Motion_PerformAction','_flashColor','createActorCommandWindow','startFloat','placeGauge','bxpgv','uahCA','QEIUx','requestMotionRefresh','DigitGrouping','subject','Exploiter','_escapeRatio','ActSeq_Inject_AnimationEnd','Game_Action_testApply','performAction','updatePointAnimations','CeDvX','ActSeq_ChangeSkew','floatBattler','pAjwu','lJFJM','Game_Action_setGuard','ActSeq_Zoom_Reset','damageContainer','actorCommandCancelTPB','requestMotion','isAnimationPlaying','MultiTarget','_effectDuration','setGuard','isSceneBattle','LxVpK','updateShadowBattleCore','isAnyoneInjectAniPrepping','displayBuffs','lUwXq','ChargeRate','SAvxK','_enemySprites','Game_Battler_performMiss','QqEaA','GAUkh','_surprise','opacityStart','_cancelButton','yYzxo','CoreEngine','parallaxHueEnemyModifier','PostDamageJS','AllowRandomSpeed','setItem','motionType','CErDB','updateShadowScale','CurrentTurn','svBattlerName','nCwdc','WMjca','AsUser','SMrWD','PejJG','ActSeq_Mechanics_WaitForEffect','return\x200','numTargets','RwUIZ','updateOpacity','jtzkj','EAIkV','performShakeFlinch','OffsetY','replace','Window_BattleLog_displayMiss','battleStatusSprite','isDuringNonLoopingMotion','ActSeq_Camera_Offset','stypeId','addedBuffs','isForAliveFriendBattleCore','isOptionsCommandAdded','autoBattleWindowRect','_endingBattle','_immortal','isFrameVisible','ACrWh','_text','updateStart','isStateResist','hcizs','forceSelect','JS\x20%1START\x20ACTION','addedStateObjects','isATB','freezeFrame','TsVdW','PreDamage%1JS','Scene_Battle_updateStatusWindowPosition','isRightInputMode','gnqia','pagedown','updateStaticSvBattlerFrames','QNrlw','KyJqV','createActors','ZnVHW','Enable','ActSeq_Mechanics_BoostPointsStoreData','xTIUQ','allowCollapse','noSimilarSTypes','785781afGjNH','BaseTroopIDs','remove','xmmbH','PartyCmd','_activeWeaponSlot','Window_BattleLog_displayMpDamage','ActSeq_Set_TargetActionSet','createKeyJS','Scene_Battle_initialize','setCommonEvent','svActor','_commonEventIDs','Mute','Game_Battler_onTurnEnd','ActSeq_Impact_Negative','actorCommandEscape','custom','IconStypeNorm','AttackAnimation','damageStyle','owVnG','addDamageSprite','_animationCount','StatusWindowSkinFilename','%1-%2','_appeared','tnfgZ','ShowAddedDebuff','debuffAdd','makeData','ActSeq_Mechanics_PtbFullHalfAction','missle','wzMDF','eqCVH','Scene_Map_initializeAfter','_linkedSprite','drawSingleSkillCost','MnmCK','updatePosition','ActSeq_Mechanics_ActionEffect','VisuMZ_4_CombatLog','updateFlip','isSkewing','createAnimationSprite','displayActionResults','AWkZg','displayAction','CalcActionSpeedJS','randomTargets','_battlerHue','isBattleMember','Sprite_Enemy_updateBossCollapse','Scene_Map_launchBattle','jXfDy','createDistortionSprite','commandNameWindowDrawText','isChanting','fight','_methods','_battleCoreAddedElements','EscapeSuccess','BattleManager_makeActionOrders','battlerKey','_action','shouldHideBattleEndPopups','value2','createSeparateDamagePopups','JS\x20%1END\x20ACTION','fittingHeight','onMoveEnd','All\x20Allies','contents','StyleName','shadow','ActSeq_Movement_FaceDirection','uRLZo','ActSeq_Inject_AnimationStart','repeatTargets','BattleCmdList','createAutoBattleWindow','isAnyoneMoving','_forcedBattlers','mainSpriteWidth','JGQCP','ZNudF','ActSeq_Animation_AttackAnimation2','autoBattleAtStart','battleStatusWindowAnimationContainer','setEnemyWindowMode','spinBattler','_targetSkewY','Window_BattleLog_displayTpDamage','SceneManager_push','Actions','_inputting','ElementStatusCore','setCursorRect','isSpriteVisible','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','uiMenuStyle','mNmsN','tpbCommandFight','_svBattlerSprite','BattleManager_updatePhase','12548680uTMfSK','OffsetX','Game_Action_executeDamage','efXTT','_battleCoreBattleResumeAfter','PopupShiftX','_homeWholeDuration','ParseItemNotetags','yzksp','clear','frameCount','_executeHpDamage','damageRate','buffAdd','addWeaponSwapCommand','turn','isMagicSkill','BmkBo','Rgxfo','CmdStyle','cMtrg','WaitForOpacity','displayTpDamage','isJumping','Window_BattleLog_popupDamage','isNextScene','rowSpacing','Game_System_initialize','iarQX','isPTB','width','displayHpDamage','bossCollapse','cKtQc','chantStyle','BattleManager_cancelActorInput','_logWindow','battleFloat','_preBattleCommonEvent','applyBattleCoreJS','HelpOptions','_forcedHomeY','ExHTe','battleback1Name','Window_Options_addGeneralOptions','anchor','pdxpP','BRawS','_multipliers','getMenuImage','rwLij','Angle','message4','WtypeId','liwVq','itemEffectRecoverMp','NBKUW','Game_Action_isForDeadFriend','nameY','WIDTH','ActSeq_Impact_TimeScale','gaugeX','_indent','removedStateObjects','criticalHitFlat','ShakeFlinchPower','Game_Action_itemHit','checkSubstitute','hDUdg','addChildToUiContainer','useItem','battleCameraData','MotionFrameWait','value1','updateJump','PreEndTurnJS','mainSprite','stateMotionIndex','WeaponTypeID','opacity','popupDamage','startActorSelection','Targets','toLowerCase','addImmortal','callOkHandler','qKmcj','%1EndBattleJS','setActionState','Game_Battler_makeSpeed','IpeNj','performActionMotions','ShowPortraitsBorderStyle','Formula','performReflection','_updateClientArea','MotionAni','CastPhysical','isCancelled','Scene_Battle_commandFight','_targetOffsetY','lukEffectRate','applyAngleChange','createEnemyWindow','_offsetX','text','PEphB','_floatWholeDuration','current\x20target','hpRate','isQueueOptionsMenu','lkvlb','getEnemyIdWithName','jDsLO','Scene_Battle_createActorCommandWindow','canSingleOrMultipleSelect','regenerateAll','targetObjects','paqzs','updateStatusWindowPosition','repositionCancelButtonBorderStyle','QYKbf','VisuMZ_3_VisualCutinEffect','actions','ActSeq_Mechanics_DeathBreak','ActSeq_Movement_MoveToTarget','Slot','fBoDS','tUUNr','XwjJV','ActSeq_Camera_Clamp','update','setBattleCameraPoint','blockWidth','_padding','_growX','ParseActorNotetags','ActSeq_Movement_Opacity','border','HKFOR','ActionEffect','Mirror','mainSpriteHeight','Sprite_Weapon_loadBitmap','param','updateBorderStyle','Game_Action_apply','canMove','MVYiB','okTargetSelectionVisibility','pBrYt','Sprite_Battler_damageOffsetX','drawItemImage','setImmortal','esWlT','putActiveBattlerOnTop','hCMsx','onBattleStart','_enemyID','Game_Action_itemEffectAddAttackState','ShowAddedBuff','addedDebuffs','BindCommonEventKeysForObj','getBattlerKeyTargets','%1StartActionJS','_targetFloatHeight','JS\x20BATTLE\x20DEFEAT','ConvertCount','VbsBw','_homeEasing','isFlipped','alive\x20enemies\x20not\x20user','_svBattlerData','Destination','ZksiN','QiFXx','windowPadding','ActSeq_Mechanics_AddBuffDebuff','setValue','dwaJu','Window_BattleStatus_drawItemImage','attack','_createClientArea','evade','_enemyIDs','_motionSpeed','addAnimationSpriteToContainer','isGuardLifeSteal','OamGZ','globalAlpha','_back1Sprite','helpAreaBottom','getSpecificBattlerKeyTarget','ImvFx','command236','updateCustomActionSequence','_shake','IDBwf','Scene_Battle_selectNextCommand','hebYM','enemy','Sprite_Actor_updateFrame','QmeHb','AOJgb','_tpbSceneChangeCacheActor','WaitForNewLine','setText','scope','name','displayReflection','Window_BattleLog_performCollapse','backColor','_lastHpDamage','rIUgO','makeBattleCommand','ActSeq_Mechanics_SwapWeapon','ActSeq_Impact_TimeStop','gainTp','forceWeaponAnimation','ScaleDown','_iconIndex','_motion','COMBAT\x20LOG','Game_Action_setAttack','attackStatesRate','HujCg','VisuMZ_1_ElementStatusCore','StateIconOffsetY','Window_BattleLog_performAction','OOyJm','svBattlerAnchorY','_interpreter','ZJssB','Window_BattleLog_performMagicEvasion','disperseDamage','redraw','isAnyoneFloating','ShowReflect','LifeStealRegExp','allBattleMembers','Oxmyr','aTXCG','reserveCommonEvent','optDisplayTp','Game_Battler_forceAction','show','adwER','BreakShields','_battlerKeyCache','REBRL','disarmHpLifeSteal','filterArea','weaponImageId','Window_BattleStatus_initialize','isCustomBattleScope','Scene_Battle_onEnemyCancel','XiwuX','removeCurrentAction','_selectionEffectCount','processAnimationRequests','textBaseline','updateWeather','gBQXP','arRedFlat','clearActiveWeaponSet','CVesk','setBattlerFlip','battleCommandIcon','cancelLifeSteal','clearDamagePopup','WUyGt','customDamageFormula','zjzHp','Game_Action_isForAliveFriend','evalDamageFormulaBattleCore','deathStateId','Spriteset_Battle_createLowerLayer','ActSeq_Camera_FocusPoint','PRE-','inBattle','updateAngleCalculations','ARRAYSTRUCT','lifeSteaItem','oPGkV','changeBattlerOpacity','setupBattleback','drawText','dXlLz','Game_Map_encounterList','_animationContainer','ShowCosts','iconText','drawTextTopAligned','ALL\x20SKILLS','pMumN','isAutoBattleCommandEnabled','swing','checkTpbInputClose','BattleManager_startAction','Zodew','getTraitSetKeys','PreApply%1JS','Point','Game_Action_applyGlobal','CalcEscapeRatioJS','AnchorY','Skills','Ebsbs','nextActiveWeaponSlot','CommandAddAutoBattle','XJzCW','playCancel','rfQFq','ActSeq_Movement_Spin','unshift','selectNextActor','helpWindowRectBorderStyle','XcjqA','updatePhase','_back2Sprite','_waitMode','Sprite_Battler_damageOffsetY','commandOptions','FVXop','BattleManager_isTpbMainPhase','Nqokz','performJump','Sprite_Enemy_updateCollapse','setHome','bgType','OGplU','getAttackMotionSlot','setBattlerBattleCore','setMoveEasingType','process_VisuMZ_BattleCore_Action_Notetags','createHpGaugeSprite','BackColor','BattleManager_inputtingAction','createBorderStylePortraitSprite','cameraClamp','opponentsUnit','-%1\x20MP','HalfActions','maxItems','ActSeq_Projectile_Picture','ActorOffsetX','sideview_ui','TpGaugeOffsetX','nJPnj','BattleSystemBTB','Window_BattleLog_displayActionResults','textAlign','victory','StatusWindowAttachmentFrontOffsetY','_frontAttachmentSprite','right','drawItemStatusXPStyle','VoiceLineType','OKTTm','MihYO','getNextSubjectFromPool','COMBATLOG','_opacityWholeDuration','pow','uYTUX','\x20to\x20%1\x20midbattle.','JxOVs','PreDamageJS','updateUiContainerPosition','createTargetsJS','CriticalDmgRate','Game_Action_isForAll','windowAreaHeight','ActSeq_Movement_HomeMoveBy','slices','movement','fhNMl','iterateBattler','GGXRt','BattleManager_onEncounter','AniDuration','cutinExit','Sprite_Actor_initMembers','Game_Battler_regenerateAll','MpGaugeOffsetY','isAlive','call','ParseEnemyNotetags','ActSeq_Mechanics_BreakShieldChange','filter','dragonbonesData','_battler','skillTypes','Window_BattleLog_performSubstitute','DaDEc','FpGJT','setBattleAngle','ShakeFlinchDuration','drawItemStatusListStyle','guardSkillId','_armorPenetration','_enemies','actor','adjustPosition_1for1','_damageContainer','removeImmortal','VisuMZ_2_DragonbonesUnion','_targets','Scene_Battle_createCancelButton','VTzjo','messageSpeed','removeActor','mpDamageFmt','_handlers','_battleCoreForcedElements','makeActions','_drawTextBody','effects','setBattleZoom','ActionAnimation','addTextToCombatLog','isCommandEnabled','playOnceParallelTroopPage','GXuQq','some','isSTB','_damagePopupArray','isGuardWaiting','performSTBExploiter','addMeleeReturnActionSet','SkillItemStandardCols','Scene_Map_updateCallMenu','HdbJl','SvWeaponSolo-%1-%2','Elements','HjICU','battleZoom','addCustomCommands','_lastActor','stepBack','Game_Action_executeMpDamage','_lastPluginCommandInterpreter','silentHomeMove','findSymbolExt','ActSeq_Mechanics_BtbGain','WaitComplete','BattleAI','setActiveWeaponSet','executeHpDamage','getNextSubject','applyDamageCaps','ytFlw','PostDamage%1JS','textSizeEx','setupBlueRedInvertImpactFilter','addOnceParallelInterpreter','spriteId','processExtendTroopMembers','adjustPosition_ScaleDown','Scene_Battle_updateBattleProcess','fhgBz','BattleLog','updateSkew','clearBattlerMotionTrailData','wnfaM','requestDragonbonesAnimation','ATTACK','displayEvasion','Skill-%1-%2','WindowWidth','SjEWl','loadSvActor','command301_PreBattleEvent','lhvuy','applySoftDamageCap','startSkew','cancelHpLifeSteal','performCounter','isForDeadFriend','duration','Actor','canAlterActionCostPTB','addAutoBattleCommand','TextColor','isEnemy','gainBravePoints','addText','FvzLn','actionBattleCoreJS','FxQqi','PortraitScaleBorderStyle','applyTargetFilters','Window_BattleLog_performCounter','autoBattleUseSkills','_visualHpGauge_JustDied','isBattleRefreshRequested','nWbWE','yGJpr','parent','MOTIONS','index','jIlIE','statusTextAutoBattleStyle','WaitForExit','sortEnemies','mpDamage','WaitForAnimation','ActionItemMsg','result','ITEM','kGxNr','FEhiK','createShadowSprite','isSpinning','battleSkew','_totalValue','MAXMP','AsTarget','drawItemStyleIconText','Window_BattleLog_pushBaseLine','adjustWeaponSpriteOffset','startJump','statusWindowRect','battleLayoutStyle','jsScaleToFit','MrtIf','setupShockwaveImpactFilter','Yltuh','focus','waitForNewLine','alignBattleCoreDamageSprite','actor%1-portrait','_lines','center','SxDVj','drawItemStyleIcon','XPSpriteYLocation','action','GAWlO','lluIt','SkewX','EscapeSuccessJS','updateFloat','createEnemyNameContainer','sliceMin','iWPIe','rVIlf','fillRect','Window_ItemList_maxCols','commandSymbol','createInnerPortrait','Game_BattlerBase_refresh','VisuMZ_2_BattleSystemSTB','cWRtw','lineHeight','sortDamageSprites','Sprite_Enemy_initVisibility','performDamage','onEncounterBattleCore','setCustomDamageFormula','isSubjectValidForAnyoneSelect','placeActorName','_actionBattlers','VariableDmg','extendTroopMembers','EnemyOffsetY','ywIrv','YkEBy','CZdGh','createChildSprite','clearElementChanges','Sprite_Battleback_adjustPosition','jump','extraPositionX','BG_TYPE','RegExp','Window_Options_statusText','loadBattleback2','Interrupt','ActionEndUpdate','_forActor','clearHorrorEffects','wholeActionSet','MBRSw','setBattlePortrait','performWeaponAnimation','FlinchDistanceY','makeActionList','checkSceneBattleTransitionable','performRecovery','VisuMZ_1_SkillsStatesCore','HelpItem','HelpEscape','trueRandomTarget','VJGLN','_hpGaugeSprite','mIGcN','isNonSubmenuCancel','floor','command301','angleDuration','lineRect','addNewState','isDead','Game_Map_battleback1Name','OkxcX','bFpEJ','XTwZj','push','_jumpWholeDuration','formula','_statusType','_flinched','drawBackgroundRect','Game_Battler_clearMotion','_requestRefresh','gainStoredBoostPoints','reverse','igSRC','AutoBattle','currentAction','tHwhR','_isBattlerFlipped','options','fgUky','makeTargetSelectionMoreVisible','partyCommandWindowRect','createUIContainer','pdeXG','_targetOpacity','_deathStateApplied','zRZlK','Frame','getBattlerKeyTargetReplacement','WaitForFloat','BattleVictoryJS','itemHeight','CheckSkillCommandShowSwitches','mciRI','isForAnyoneFocusOpponents','BdoeL','cWnbu','HITTYPE_MAGICAL','makeAutoBattleActions','missed','applyResultSwitches','StatusWindowAttachmentFront','FaceDirection','updateWaitMode','Sprite_Actor_moveToStartPosition','ActSeq_Animation_ChangeBattlePortrait','XPActorDefaultHeight','casting','processTouch','aFdKu','%1Apply%2JS','clearResult','removeDamageSprite','_itemWindow','playBattleVoice','command357','deactivate','command339','_actor','PostEndActionJS','startBattle','initialize','isSkill','onBattleEnd','basicGaugesY','onAllActionsEnd','wroJx','_weaponSprite','changeTurnOrderByCTB','mainFontSize','zTTnQ','gainMp','currentValue','isImmortal','_skewWholeDuration','Immortal','isForOpponent','_pattern','createEffectActionSet','blt','SkillItemMiddleLayout','clearActiveWeaponSlot','noise','AggroControlSystem','MAFai','attackMotions','StepDistanceX','aliveMembers','onEscapeSuccess','AttachStateOffsetX','hYWAy','TargetLocation','GQBjJ','Override','updateEffectsContainer','getCommonEventIdWithName','CmdIconAutoBattle','lgOMu','CounterPlayback','invokeAction','KWPxc','BattleLogRectJS','PostApply%1JS','damageOffsetY','waitForEffect','splice','mhDIK','drawItemBackground','Enemy-%1-%2','partyCommandWindowRectDefaultStyle','rPshp','BattleEndEvent','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','toUseBoostPoints','ForceExploited','_branch','missile','makeTargetsBattleCore','CalcEscapeRaiseJS','randomInt','dCyvi','TpbGaugeOffsetY','addGuardCommand','canGuardBattleCore','Jauwm','upAXr','animationShouldMirror','drawLineText','battleMembers','isActiveTpb','commandAutoBattle','getFullActionsPTB','LRGpW','Parse_Notetags_Targets','ShowFacesListStyle','ActSeq_Mechanics_PtbAlterCost','UQLtg','SkillsStatesCore','Game_Battler_performActionStart','troop','lifeStealRate','ActSeq_Movement_BattleStep','Game_Action_needsSelection','HomePosJS','makeSpeed','ZMMAv','EnemyOffsetX','wkuHH','QvhiS','BattleManager_selectNextCommand','_skewDuration','ActSeq_BattleLog_PopBaseLine','kLBIe','faceWidth','isMoving','partyCommandWindowRectBorderStyle','performLifeSteal','waitForOpacity','measureTextWidth','Radius','performActionStart','_mainSprite','isAnimationShownOnBattlePortrait','sHKfB','BattleManager_onEscapeFailure','ShowCritical','gjNzi','resizeWindowXPStyle','ChangeOrderBy','Window_BattleLog_performRecovery','destroy','ALL_ENEMIES','fnordAddedStates','IbbYi','Window_BattleLog_displayCurrentState','_actorCommandWindow','EasingType','ShowAddedState','YPosy','isCharging','addChildToBack','setupTextPopup','collapseType','currentSymbol','MjAsG','isOpponent','updateOnceParallelInterpreters','VcVnt','Game_Action_itemTargetCandidates','Sprite_Actor_update','CommandVisible','Scene_Battle_skillWindowRect','whXhh','AVvHV','autoMeleeSingleTargetActionSet','Sprite_Enemy_setHue','CmdIconOptions','NUM','hewwK','vxHih','startPartyCommandSelection','isForFriendBattleCore','_cacheTextWidth','esjUM','Actor-%1-%2','filters','aYONj','Game_Battler_performDamage','createAttachedSprites','Scene_Battle_terminate','ActionCenteredName','displayItemMessage','_updateFilterArea','notFocusValid','endAnimation','finalizeScale','createPartyCommandWindowBattleCore','UQbIl','drain','create','freezeTime','setupHpGaugeSprite','_targetBattlerKey','isMeleeSingleTargetAction','ActSeq_Mechanics_AtbGauge','CxVYb','_updateCursorFilterArea','HpGauge','FlinchDuration','uFsAm','_callSceneOptions','offsetX','CastMagical','WVKip','ActSeq_Movement_Float','alive\x20actors\x20not\x20target','setBattleSkew','_frame','softDamageCap','Gbnhl','removeHorrorEffect','ShowFailure','performMagicEvasion','ActSeq_Movement_Jump','unchanged','IxUML','dead\x20actors','updateShadow','match','QPbGy','PostApplyAsTargetJS','Amp','_buttonKey','DSSsb','zxpuj','ActSeq_Set_FinishAction','setActiveWeaponSlot','AHkXr','criticalDmgRate','ActSeq_Movement_MoveBy','itemWindowRect','applyImmortal','tzZWU','Game_Action_itemEffectAddNormalState','Game_Temp_requestAnimation','Game_Battler_performEvasion','process_VisuMZ_BattleCore_CommonEventKeys','ActSeq_Animation_WaitForAnimation','VisuMZ_3_ActSeqCamera','isForOne','currentClass','STRUCT','hasStaticSvBattler','startAttackWeaponAnimation','isMagical','VisuMZ_2_BattleSystemPTB','_stateIconSprite','setup','addGeneralOptions','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','VqGXv','83580ThLBlo','Scene_Battle_windowAreaHeight','exit','ActSeq_Impact_ShockwaveEachTargets','checkShowHideBattleNotetags','ActSeq_Skew_WaitForSkew','getSkillTypes','onSelectAction','terminate','_onceParallelInterpreters','abs','addSkillTypeCommand','lifeStealTrait','PyRPo','ILIrj','ActSeq_BattleVoice_PlaySpecialLine','isItemCommandEnabled','IHoVf','value','MotionType','updateBattlerContainer','process_VisuMZ_BattleCore_Notetags','processBattleCoreJS','NameFontSize','jsbPI','DEF','Debuffs','commandName','inputtingAction','callOptions','_enemyWindowMode','cancel','substitute','battlerSmoothImage','setHorrorEffectSettings','ShYLI','processTurn','PopupOffsetY','wrWSu','innerHeight','QWgXD','ScaleX','clearFreezeMotionForWeapons','Window_BattleLog_displayCritical','rPcmP','_list','Xblxe','ChantStyle','flipVisualCutinHorz','kJTQg','setupZoomBlurImpactFilter','ActSeq_Mechanics_Multipliers','gainHp','sXrXG','BTB','ocgQu','physical','bvLgk','compareEnemySprite','uTbTU','isAppeared','hue','_customDamageFormula','cQVKw','Spriteset_Battle_createBattleField','VisuMZ_2_HorrorEffects','Settings','_weaponImageId','PARTY','OffsetAdjust','_shakeFlinchPower','FnSij','isDeathStateAffected','shouldDisperseDamage','hide','startHomeMove','croLW','isPhysical','createDamageContainer','ragxE','_helpWindow','IoGpd','TvjOs','findTargetSprite','process_VisuMZ_BattleCore_BaseTroops','updateLink','SwitchCritical','Window_SkillList_maxCols','oHJqm','rUpWb','HelpFight','hasSvBattler','TimeScale','hPClj','PostEndBattleJS','onActorCancel','prepare','VisuMZ_2_BattleSystemATB','CheckVisibleBattleNotetags','ActSeqImpact','TpGaugeOffsetY','skewBattler','stepFlinch','createJS','isTurnBased','WuiTY','_borderPortraitSprite','getAttackWeaponAnimationId','oFlpm','startAction','GnrSq','portraitFilename','getInputButtonString','performMiss','startTpbTurn','indexOf','_autoBattleWindow','ActSeq_BattleLog_WaitForNewLine','NyOqO','battleEnd','isPlaytest','updateTargetPosition','20CzOYRo','gJCgZ','onEnemyCancel','Game_Action_executeHpDamage','caCFZ','isPartyCommandWindowDisabled','_floatEasing','Window_BattleLog_performReflection','wdAkc','Index','_additionalSprites','pmKfS','_tpbState','onActorOk','AnchorX','item','transform','IUybD','Exploited','uwFsa','updateBattlebackBitmap1','initVisibility','HgrKW','aHVRT','ParseSkillNotetags','addSingleSkillCommand','CreateCutinSettings','hpAffected','getChildIndex','text\x20target','ActorOffsetY','tone','jMaFr','isBattleFlipped','vertCells','BravePoints','svShadow','uzWVO','updateHpGaugePosition','Game_Interpreter_command283','note','applyGlobalCommonEventNotetags','updateShakeFlinch','dead\x20enemies','_battleCoreBattleStartEvent','startOpacity','showHelpWindow','createMultiTargetWindow','_regionBattleback2','worldTransform','509930EodyLc','surprise','Nlrhh','fDynX','_lastAction','weatherType','PreEndBattleJS','_cursorArea','MAXHP','icon','MCHpG','fpuWT','requestRefresh','dying','undecided','ploqI','SmQdB','becomeSTBExploited','ARRAYJSON','isSideView','canBattlerMove','PRVWy','VXhlj','wtypeId','Damage','makeHpDamageText','rec','loadWindowskin','setupChild','getHalfActionsPTB','displayCurrentState','MaxLines','WaitForMovement','Mrhfr','PreStartTurnJS','updateStateIconSprite','setupDamagePopup','nxmUj','KTftD','friendsUnit','FrontViewSelect','updateSpin','length','Sprite_StateIcon_updateFrame','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','ActSeq_Animation_AttackAnimation','FZxQh','arRedRate','processVictory','processAbort','VisuMZ_2_WeaponSwapSystem','_damages','getWtypeIdWithName','loadPicture','setupActionSet','refreshActorPortrait','HrtoJ','tpOEw','isTriggered','battleInjectAni','vYyNh','Weapon-%1-%2','PostStartTurnJS','cXkoS','weatherPower','isFastForward','getColor','createActionSequenceProjectile','FqDLp','processRefresh','Window_BattleLog_performActionStart','_forcedHomeX','apply','HSnWR','ActSeq_Element_AddElements','onTurnEnd','Sprite_Battler_isMoving','updatePadding','isAttack','xKmEa','Strength','_effectType','isOptionsCommandEnabled','pages','_targetGrowY','setBattleImpactTimeScale','Setting','JumpToLabel','VisuMZ_3_ActSeqImpact','doesPageHaveOnceParallelStart','41163177jSndDJ','oslFw','isSkipPartyCommandWindow','vejuJ','_buttonText','isCommonEventReserved','CmdTextAutoBattle','XPzRz','ActSeq_Mechanics_Collapse','onEscapeFailure','startMotion','drawActorFace','qPCmv','ukHnk','createMiss','battleVoices','EnableSoftCap','createHelpWindowBattleCore','SmoothImage','Sprite_Actor_createStateSprite','BattleManager_endBattle','displayChangedBuffs','ActSeq_Mechanics_CustomDmgFormula','_index','_speed','SkillItemBorderCols','Scene_Battle_startActorSelection','YmNLx','performCollapse','itemTargetCandidates','clearWeaponAnimation','_commonEventKey','cutinEnter','iEgwo','WaitForProjectile','attackAnimationId1','PrioritySortActive','getSkillIdWithName','isAnyProjectilePresent','displayStartMessages','destroyDamageSprite','setSvBattlerSprite','changeCtbCastTime','LUK','createContents','Spriteset_Battle_updateActors','Scene_Options','selectNextCommand','BoostPoints','BattlebackScale','battleback2Name','STB','skillId','LQXhb','parse','initBattleCore','getHardDamageCap','CmdIconFight','getBattlerFromKey','members','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','vCUQm','svBattlerShadowVisible','cxuoC','YfaKm','PreApplyJS','ActSeq_Element_NullElements','ZZqIZ','Window_BattleActor_show','pattern','mhp','vxcDt','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','UXotN','Window_BattleEnemy_hide','startInput','battleJump','vIYcI','pointX','updateStyleOpacity','_cursorSprite','_actions','commandStyleCheck','bmeLr','criticalHitRate','PopupPosition','EfPXf','_battleField','isForRandomBattleCore','_flashDuration','ConfigManager_applyData','_motionCount','move','ActSeq_Movement_WaitForOpacity','StXrA','DamageDisplay','max','GbWcZ','ZXvZT','zdzXs','Window_BattleActor_processTouch','skills','FAVgs','displayAffectedStatus','getBattlePortraitFilename','guardHpLifeSteal','_battleLayoutStyle','LwNVq','createStateSprite','isFTB','guard','DestinationJS','ConvertActionSequenceTarget','validTargets','VSuYr','psfpF','ActSeq_Horror_GlitchCreate','fnordRemovedStates','expRate','addCombatLogCommand','actionEffect','frameDelay','extraPositionScaledY','magicReflection','tthhU','loTrl','JbpHG','showNormalAnimation','turnCount','Style','MeleeDistance','sNVgB','BattleManager_checkSubstitute','aKZgx','isBreakStunned','parallaxScrollXinvertEnemy','VisuMZ_2_BattleSystemOTB','checkExtendTroopCompatibility','skill','refreshMotion','Game_Action_setItem','evalDamageFormula','cancelActorInput','glitch','_offsetY','log','ActSeq_Mechanics_HpMpTp','gRNKI','active','_skillIDs','Game_Action_makeDamageValueDisperse','StyleOFF','BattleLayout','ForceRandom','eMGii','loadSystem','power','_wtypeIDs','DualWield','commandRemember','isAtbCastingState','skillItemWindowRectMiddle','NameAttachStateIcon','States','ScaleY','BattleManager_endAction','makeTargetSprites','_jumpMaxHeight','Shadow','removeAnimationFromContainer','format','isBattleTest','maxTp','SFoXV','updateEffectContainers','setSTBExploited','_updateCursorArea','npKyG','createBattleUIOffsetY','addAutoBattleCommands','dimColor1','ERsRL','isOnCurrentMap','twOWI','Targets1','default','nLzRc','displayRemovedStates','kAJKi','anchorY','NdGUf','kmylj','Game_Enemy_transform','contains','clone','itemEffectAddAttackState','performActionEndMembers','NameAlwaysSelectOnly','VariableID','onBattleEndBattleCore','nGEqF','isActing','createCommandNameWindow','autoBattle','Game_Action_setSkill','makeUniqueNames','addDebuff','mnGDV','AS\x20USER','VisuMZ_2_AggroControlSystem','contentsOpacity','toUpperCase','isTpb','JEDgc','startGrow','_skewX','stateRate','DistanceY','changeInputWindow','EscapeFail','_enemy','HpGaugeOffsetX','BBxOy','VisuMZ_4_BreakShields','isAutoBattleCommandAdded','DistanceAdjust','Window_ActorCommand_initialize','alive\x20friends','+%1\x20MP','StepDuration','frontview_ui','alterChange','ActSeq_Impact_ShockwavePoint','PreEndActionJS','process_VisuMZ_BattleCore_jsFunctions','TfiOH','Scene_Battle_stop','VtBKx','STYPES','ddUrL','_shakeFlinchDuration','kxKby','resetTextColor','Window_BattleLog_refresh','yrAkx','vEEjR','attackAnimationIdSlot','Game_Action_numRepeats','inHomePosition','actorCommandSingleSkill','Ffjxh','_forceAction','_drawTextOutline','AbfrS','Scene_Battle_onActorOk','AVlAa','flashColor','sRiaq','_regionBattleback1','ActSeq_Movement_HomeMoveToJsPoint','ActSeq_Movement_WaitForJump','QZWWk','isDebuffAffected','YVwIl','min','Sprite_Battler_setBattler','oDWVu','BattleManager_startBattle','ActSeq_Mechanics_BreakShieldReset','Sprite_Actor_updateShadow','motionIdle','_borderPortraitTargetX','CriticalHitRateJS','changeAtbChargeTime','damage','visible','statusWindowRectXPStyle','selectSymbol','canAddSkillCommand','HITTYPE_CERTAIN','eraseState','attachSpritesToDistortionSprite','GOKpS','VisuMZ_3_SideviewBattleUI','targetSpritePosition','Sprite_Battler_setHome','updateRefresh','VOTES','setHelpWindowItem','boxWidth','ENEMY_OFFSET_X','StartTurnShow','Game_Party_removeActor','makeCommandList','_distortionSprite','onHomeMoveEnd','critical','ALL_ACTORS','traitSet','_makeCursorAlpha','PreStartActionJS','loop','Scene_Battle_createHelpWindow','setBlendColor','createDamageSprite','_tempActor','Scene_Battle_logWindowRect','nUWRi','MANUAL','ActionSkillMsg1','ActSeq_Motion_RefreshMotion','setBattleCameraTargets','needsSelection','Bcscl','Scene_Battle_selectPreviousCommand','iconHeight','EVZRN','PostRegenerateJS','battlerSprites','makeTargets','svxKl','onOpacityEnd','startTurn','Reveal','ARRAYEVAL','portraitHue','getDamageStyle','loadEnemy','alive\x20battlers\x20not\x20target','Ikzof','skillItemWindowRectBorderStyle','command3011','ActSeq_Weapon_NextActiveWeapon','applyArmorModifiers','isNegativeLifeSteal','battleAngle','displayMpDamage','Rate','hitIndex','drawItem','drawItemImageListStyle','Scene_Battle_onActorCancel','makeSuccess','CriticalDuration','rQYDc','fontSize','getNextDamagePopup','charging','WaitForSpin','forceMotion','bind','_shadowScaleY','czIIp','vHKsy','DTrPm','ext','description','ActSeq_Movement_Skew','ActSeq_Mechanics_TextPopup','trim','Xqhdb','WaitCount2','fZdFH','criticalDmgFlat','ARRAYNUM','_forcing','thrust','ihmmK','isForAnyoneFocusFriends','ParseAllNotetags','nSLka','_lastEnemy','endBattle','createEnemies','applyData','_shadowSprite','updateHomeMove','jsOneForOne','isDTB','canEscape','ActorCmd','nvFeb','ActSeq_Cutin_EndVisualCutinEffectType','ActSeq_Impact_BlueRedInvert','_flipScaleX','BNhkt','kesAk','Game_Interpreter_PluginCommand','_angleRevertOnFinish','Variable','damageOffsetX','sleep','faceRect','prepareBorderActor','isBuffAffected','CopyCombatLog','ShowButton','select','_targetAngle','setupMotion','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','DamageType%1','parallaxScrollYinvertEnemy','yllNc','_tempEquipCheck','mnFUQ','head','RaBht','qzhFO','Game_BattlerBase_addNewState','qFSYK','uLRag','actionSplicePoint','ActSeq_Set_WholeActionSet','isVisualHpGaugeDisplayed','jOtlv','clearAllVisualCutins','VFiNh','AllowCollapse','innerWidth','GetActionSequenceSpecialTargetWithFlags','Game_Interpreter_command301','lxtlB','performActionEnd','ShowMpDmg','Game_Troop_setup','Sprite_Battler_updatePosition','battleGrow','slice','_battlerName','Game_BattlerBase_initMembers','switchToWeaponType','height','kNtWf','_angleWholeDuration','updateCancel','ActionSequence','adjustFlippedBattlefield','_freezeMotionData','addAttackCommand','Game_Battler_startTpbTurn','ActSeq_Angle_WaitForAngle','PopupShiftY','bottom','%1EndTurnJS','zbPqr','getStypeIdWithName','padding','waitCount','Scale','updateShadowPosition','processEscape','initMembers','QUuxq','isPartyTpbInputtable','ActSeq_DB_DragonbonesTimeScale','callUpdateHelp','#%1','ActSeq_Camera_FocusTarget','command119','kNaTX','_opacityDuration','Game_Map_battleback2Name','_autoBattle','bitmapHeight','onEncounter','battlerShadowScaleX','_namesCount','commandNameWindowCenter','hVxRX','NSucJ','PostStartActionJS','isSelected','Scene_Battle_itemWindowRect','setupBattleCore','changeAtbCastTime','ActionSkillMsg2','applyFreezeMotionFrames','JmJty','repositionEnemiesByResolution','occasion','ActSeq_DB_DragonbonesMotionAni','Scene_Map_initialize','ARRAYFUNC','Post','CmdIconEscape','isFightCommandEnabled','frameVisible','priority','sort','Enemy','pushBaseLine','DPNMl','Game_Action_isForRandom','_growDuration','gqNoI','WaitCount1','addCommand','ActSeq_Motion_MotionType','boxHeight','_jumpHeight','MEDiA','CheckMapBattleEventValid','code','snapForBackground','onFloatEnd','executeDamage','skew','tdOER','nYRCs','pauseInjectAnimation','ActiveTpbOptionsMessage','_allTargets','azpNO','MXXfd','ActSeq_Movement_WaitForSpin','updateMain','ActSeq_Animation_PlayAtCoordinate','NameOffsetY','SvMotionIdleMass-%1-%2','slptK','Sprite_Battler_updateMain','setActorHome','setupOversaturateImpactFilter','KqjtE','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','playReflection','isUndecided','battleOpacity','alive\x20battlers','getItemDamageAmountTextBattleCore','_forcedBattleLayout','commandEscape','ACTOR_OFFSET_Y','ButtonAssist','updateShadowVisibility','IconStypeMagic','VariableHeal','jumpBattler','SvBattlerMass-%1-%2','OhroA','displayChangedStates','ActSeq_Movement_WaitForSkew','clearOnceParallelInterpreters','LWPXQ','Game_Battler_onBattleEnd','xwhjc','stbGainInstant','ResetFocus','StyleON','PostApplyJS','updateStateSprite','alive\x20opponents','updateBorderSprite','Scene_Battle_createPartyCommandWindow','MPlWu','twTIV','_defeatedEnemies','QbALm','walk','AllActorsText','CriticalHitFlat','_actionInputIndex','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','processPostBattleCommonEvents','round','cameraDuration','isCTB','skillWindowRect','Game_BattlerBase_canGuard','displayCounter','_spriteset','isForRandom','changeWeather','TDZdi','Sprite_Enemy_updateStateSprite','SkipPartyCmd','delay','moveToStartPositionBattleCore','xxHba','placeTimeGauge','_growWholeDuration','isTpbCharged','_baseTexture','PreStartBattleJS','isForAliveFriend','yLqbD','CTB','EOplO','RequiresDefeat','startEnemySelection','nyWTO','_angleEasing','VisuMZ_1_MainMenuCore','ymJSD','Sprite_Enemy_update','showAnimation','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','SHOW_BUTTON','portraitType','setVisibleUI','ShowPortraits','toString','origin','BARE\x20HANDS','_statusWindow','ZdsEj','processBorderActor','_endBattle','canUse','zoomDuration','Okmtl','drawSkillCost','JS\x20%1APPLY\x20%2','isChangingOpacity','adjustPosition','Scene_Battle_partyCommandWindowRect','guardLifeSteal','isETB','battler','AUZOQ','removeBuffsAuto','ActSeq_Camera_Reset','_commonEventQueue','isAtbChargingState','dead\x20battlers','_tempBattler','ScaleToFit','battleCoreResumeLaunchBattle','IbtGD','_displayBattleCoreTransitionErrorMsg','GRID\x20MOVE','message1','MotionSpeed','arPenRate','ANTI_TINT_UI','qPeEX','addActor','addBattleCoreAutoBattleStartupCommand','gUsIE','CFWUs','loadBattleback1','VisuMZ_2_BattleSystemETB','_animationSprites','VoiceLine','isHidden','StepDistanceY','applyHardDamageCap','TpbGaugeOffsetX','preparePartyRefresh','Duration','CmdTextAlign','QGfRK','jiegN','lastBattleSkill','HP_Flat','_enemyWindow','ActSeq_Weapon_SetActiveWeapon','ShowCurrentState','TextFmt','hpDamage','parseForcedGameTroopSettingsBattleCore','createWeather','anVhU','setupBattlebackBattleCore','ActionCount','CombatLogIcon','changeBattlebacks','createLowerLayer','loadBitmap','GrtUh','KxNqy','executeMpDamage','_cache','open','finishActorInput','Game_BattlerBase_isStateResist','resetResultSwitches','_stypeIDs','pYDTW','qoeac','ParseStateNotetags','isForAll','commandFight','battleCommandName','svBattlerAnchorX','logWindowRect','Letter','Pre','pLuKT','adjustPosition_ScaleToFit','_effectsContainer','_currentActor','checkAutoCustomActionSequenceNotetagEffect','gainCurrentActionsETB','QoL','hfitc','#ffffff','displayBattleCoreTransitionErrorMsg','+%1','isConfused','onAngleEnd','tLBZL','compareBattlerSprites','_baseX','forceEscapeSprite','ActSeq_Mechanics_ActiveChainInputDisable','mjpjo','prepareCustomActionSequence','isForOpponentBattleCore','mnhmn','hsRLM','VisuMZ_3_BattleAI','Window_BattleEnemy_show','_dimmerSprite','Sprite_Gauge_smoothness','waitForAnimation','_injectAnimationSprite','9hWmsqZ','initBattlePortrait','LGOLo','processOk','Scene_Boot_onDatabaseLoaded','zIjZn','canAttackBattleCore','BattleManager_onEscapeSuccess','GMfZz','list','createTroopNote','DefaultDamageStyle','pop','ehCBb','removeState','BattleManager_startInput','JS\x20%1END\x20BATTLE','processEnemyModeTouchBattleCore','AttachStateOffsetY','IbPiH','12ZwtcyQ','vPpSW','WaitCount','lsIje','JS\x20ESCAPE\x20SUCCESS','_partyCommandWindow','kaPJh','setHalfActionsPTB','battleMove','isCustomActionSequence','_waitCount','setEventCallback','requestFauxAnimation','hpDamageFmt','orWSP','%1Damage%2JS','invokeMagicReflection','Sprite_Animation_targetSpritePosition','compatibilityVisible','AlphaFilter','mUxoW','YuXMN','selectPreviousCommand','Turns','autoSelect','ActSeq_Inject_AnimationPauseResume','setBattlerFacePoint','ZtIjr','BattleSystemSTB','bqwrp','moveBattlerToPoint','ARBbV','autoMeleeMultiTargetActionSet','rYeOi','WaitForSkew','CmdIconItem','updateAttachedSprites','getBattlePortrait','updateAttachmentSprites','ActSeq_Horror_Clear','isEscapeCommandEnabled','createDigits','svBattlerData','isPreviousSceneBattleTransitionable','SBKlu','FollowTurn','HelpSkillType','isFriendly','checkCacheKey','updateGrow','resetFontSettings','HelpAutoBattle','ItGuj','eMDAl','battleSys','Scene_Battle_createAllWindows','addExtendedTroopMembers','_homeX','Targets2','createMainSprite','nWwBD','Game_Action_evalDamageFormula','Spriteset_Battle_update','openBattleActorWindow','processDefeat','ActSeq_Cutin_AddVisualCutinEffect','aHlrY','parameters','vmCqk','battlerShadowScaleY','TGFUq','wCVcu','updateActors','canGuard','ActSeq_Inject_WaitForInjectAni','1146881qwOMNZ','jbLpB','ShuffleArray','QoVpi','setupFont','ActSeq_BattleLog_AddText','updateFrame','JdIeD','_lineHeight','random','isDrain','setTargetBattlerKey','stop','swapEnemyIDs','time','OWeTg','ActSeq_BattleVoice_PlayCommonLine','registerCommand','stepForward','ayIWD','xgncq','Game_Action_isForOne','_fauxAnimationSprites','Linear','hvDWy','miGCW','gHdpB','OXAIn','updateScale','jsScaleDown','PerformAction','addFightCommand','refreshBattlerMotions','useDigitGrouping','ShowEnemyGauge','Window_BattleLog_displayEvasion','itemTextAlign','resetBreakShield','textWidth','VWozG','HitFlat','setSubject','spell','setSkill','ActSeq_Horror_GlitchRemove','CriticalHitRate','performCastAnimation','rpXiM','updateCommandNameWindow','clearFreezeMotion','createBattleField','isForNotUser','ActSeq_Animation_ActionAnimation','MDF','TextAlign','sHLFs','ActSeq_Movement_Scale','JEduB','BTestBypass','process_VisuMZ_BattleCore_TraitObject_Notetags','alive\x20actors','performMoveToTargets','dMYvV','all\x20actors','EFFECT_COMMON_EVENT','Shadow2','makeDeepCopy','All\x20Enemies','PointJS','dXcNC','displayReflectionPlayBack','ActSeq_Mechanics_Immortal','uVhLi','Scene_Options_maxCommands','GroupDigits','WaitForZoom','StateIconOffsetX','tqULu','isDying','itemRect','Sprite_Enemy_createStateIconSprite','changeCtbChargeTime','Intensity','_duration','Sprite_Battler_update','nvImc','abnormal','applyVariance','StatusWindowSkinHide','Width','BattleManager_checkBattleEnd','_actorSprites','ActSeq_Impact_MotionTrailRemove','CFxYT','maxBattleMembers','Window_BattleLog_displayFailure','addOptionsCommand','_reflectionTarget','setFrame','find','Sprite_Actor_setActorHome','setHelpWindow','attackTimesAdd','updatePositionBattleCore','smooth','ActSeq_Cutin_EndVisualCutinEffectAll','isAnyoneGrowing','WaitForCamera','drawEnemyName','ActSeq_Mechanics_EtbAction','multiTargetWindowRect','AutoNotetag','_eventId','bitmapWidth','Game_Enemy_setup','VisuMZ_3_ActSeqProjectiles','emerge','_commandNameWindow','SyncBuffExpire','parallaxScrollY','svAnchorX','hitRate','isForOneBattleCore','Qzhbr','pBLYo','ExtraSettings','children','ARRAYSTR','evaded','cpLLO','jxxXY','startShakeFlinch','NameLegacy','UNTITLED','isGrowing','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','drawIcon','Window_BattleLog_clear','shift','actorCommandAutoBattle','BPbiI','performAttack','_ptbActionCost','_uiContainer','battleCorePreBattleCommonEvent','Game_Battler_clearDamagePopup','Window_BattleEnemy_initialize','NXwPo','Window_BattleLog_update','SxzdL','LastSelected','ActSeq_Element_Clear','nPZni','mZAaE','VoJiX','updateForceAction','XPActorCommandLines','enemyId','Buffs','battlerName','selectNextCommandTpb','forActor','-%1','isTeamBased','ENEMY_OFFSET_Y','singleSkill','animationId','TP_Flat','StatusWindowAttachmentBackOffsetX','createMultiTargetWindows','GetActionSequenceSpecialTarget','ShowWeapon','isDisplayEmergedEnemies','Game_Troop_expTotal','JhUtr','statusWindowRectBorderStyle','updateBattleProcess','processActorCommandCancelTPB','BindCommonEventKeysForGroup','DAhEC','processRandomizedData','mAvaU','_targetIndex','jHKnc','_attackAnimationId','base','clearMotion','refreshStatusWindow','Game_Action_setSubject','BattleSystemCTB','ActSeq_Mechanics_BoostPointsChange','battleUIOffsetY','BNSdO','isDamagePopupRequested','applyGuard','DXEFX','speed','ConvertParams','onEnemyOk','HP_Rate','PdDBC','gaugeLineHeight','autoBattleStyle','GDvpk','removedBuffs','_makeFontNameText'];_0x941e=function(){return _0x39277a;};return _0x941e();}(function(_0x260ecb,_0x118258){const _0xc25289=_0x3fe6,_0xaafd9=_0x260ecb();while(!![]){try{const _0x25edc=parseInt(_0xc25289(0xa59))/0x1*(-parseInt(_0xc25289(0xb5c))/0x2)+-parseInt(_0xc25289(0x247))/0x3+-parseInt(_0xc25289(0x6a0))/0x4*(parseInt(_0xc25289(0x6d2))/0x5)+-parseInt(_0xc25289(0x626))/0x6+-parseInt(_0xc25289(0x1a4))/0x7*(-parseInt(_0xc25289(0xc8e))/0x8)+parseInt(_0xc25289(0x9fa))/0x9*(-parseInt(_0xc25289(0x2b0))/0xa)+-parseInt(_0xc25289(0x72c))/0xb*(-parseInt(_0xc25289(0xa0e))/0xc);if(_0x25edc===_0x118258)break;else _0xaafd9['push'](_0xaafd9['shift']());}catch(_0x3a4c94){_0xaafd9['push'](_0xaafd9['shift']());}}}(_0x941e,0xd1575));var label=_0x4a80d9(0xbe1),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4a80d9(0x435)](function(_0x1b36ae){const _0x3dcf05=_0x4a80d9;return _0x1b36ae[_0x3dcf05(0xcf3)]&&_0x1b36ae[_0x3dcf05(0x890)][_0x3dcf05(0xcf9)]('['+label+']');})[0x0];VisuMZ[label][_0x4a80d9(0x668)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x4a80d9(0xb1e)]=function(_0xbba9f8,_0x131dbc){const _0x22f46d=_0x4a80d9;for(const _0x4145c7 in _0x131dbc){if(_0x4145c7['match'](/(.*):(.*)/i)){const _0x46696a=String(RegExp['$1']),_0x72942c=String(RegExp['$2'])['toUpperCase']()[_0x22f46d(0x893)]();let _0x43789d,_0x367c04,_0x1cfd90;switch(_0x72942c){case _0x22f46d(0x5d2):_0x43789d=_0x131dbc[_0x4145c7]!==''?Number(_0x131dbc[_0x4145c7]):0x0;break;case _0x22f46d(0x898):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04[_0x22f46d(0xc3f)](_0x29b55f=>Number(_0x29b55f));break;case _0x22f46d(0xb51):_0x43789d=_0x131dbc[_0x4145c7]!==''?eval(_0x131dbc[_0x4145c7]):null;break;case _0x22f46d(0x870):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04[_0x22f46d(0xc3f)](_0x3cf985=>eval(_0x3cf985));break;case _0x22f46d(0xbc3):_0x43789d=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):'';break;case _0x22f46d(0x6e4):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04[_0x22f46d(0xc3f)](_0x149f43=>JSON[_0x22f46d(0x762)](_0x149f43));break;case'FUNC':_0x43789d=_0x131dbc[_0x4145c7]!==''?new Function(JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7])):new Function(_0x22f46d(0x218));break;case _0x22f46d(0x90f):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04[_0x22f46d(0xc3f)](_0x1d0845=>new Function(JSON[_0x22f46d(0x762)](_0x1d0845)));break;case'STR':_0x43789d=_0x131dbc[_0x4145c7]!==''?String(_0x131dbc[_0x4145c7]):'';break;case _0x22f46d(0xad8):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04[_0x22f46d(0xc3f)](_0x3850a1=>String(_0x3850a1));break;case _0x22f46d(0x61c):_0x1cfd90=_0x131dbc[_0x4145c7]!==''?JSON[_0x22f46d(0x762)](_0x131dbc[_0x4145c7]):{},_0xbba9f8[_0x46696a]={},VisuMZ[_0x22f46d(0xb1e)](_0xbba9f8[_0x46696a],_0x1cfd90);continue;case _0x22f46d(0x3c9):_0x367c04=_0x131dbc[_0x4145c7]!==''?JSON['parse'](_0x131dbc[_0x4145c7]):[],_0x43789d=_0x367c04['map'](_0x49018b=>VisuMZ[_0x22f46d(0xb1e)]({},JSON[_0x22f46d(0x762)](_0x49018b)));break;default:continue;}_0xbba9f8[_0x46696a]=_0x43789d;}}return _0xbba9f8;},(_0x38dfdc=>{const _0x5eb896=_0x4a80d9,_0x45b61a=_0x38dfdc[_0x5eb896(0x380)];for(const _0x3c6592 of dependencies){if(!Imported[_0x3c6592]){alert(_0x5eb896(0x124)[_0x5eb896(0x7d6)](_0x45b61a,_0x3c6592)),SceneManager[_0x5eb896(0x628)]();break;}}const _0x5e1ae2=_0x38dfdc[_0x5eb896(0x890)];if(_0x5e1ae2['match'](/\[Version[ ](.*?)\]/i)){const _0xa94552=Number(RegExp['$1']);_0xa94552!==VisuMZ[label][_0x5eb896(0xbdd)]&&(_0x5eb896(0x15c)!==_0x5eb896(0x15c)?_0x1ad899[_0x5eb896(0xbaa)](_0x5eb896(0x134)):(alert(_0x5eb896(0xae0)[_0x5eb896(0x7d6)](_0x45b61a,_0xa94552)),SceneManager['exit']()));}if(_0x5e1ae2['match'](/\[Tier[ ](\d+)\]/i)){const _0x4b1438=Number(RegExp['$1']);_0x4b1438<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x5eb896(0x7d6)](_0x45b61a,_0x4b1438,tier)),SceneManager[_0x5eb896(0x628)]()):_0x5eb896(0x2de)==='pdxpP'?tier=Math[_0x5eb896(0x78c)](_0x4b1438,tier):(this[_0x5eb896(0xcf2)][_0x5eb896(0xce4)]=_0x53d4ba[_0x5eb896(0x6d7)](),this[_0x5eb896(0xcf2)][_0x5eb896(0x7c8)]=_0x5098f6['weatherPower']());}VisuMZ['ConvertParams'](VisuMZ[label][_0x5eb896(0x668)],_0x38dfdc[_0x5eb896(0xa51)]);})(pluginData),VisuMZ[_0x4a80d9(0x12b)]=function(_0x766816){const _0x87589f=_0x4a80d9;let _0x167db8=[];for(const _0x1804ef of _0x766816){_0x167db8=_0x167db8['concat'](VisuMZ[_0x87589f(0x79c)](_0x1804ef));}return _0x167db8[_0x87589f(0x435)](_0x428568=>_0x428568);},VisuMZ[_0x4a80d9(0x79c)]=function(_0x5155e1){const _0x22a79a=_0x4a80d9,_0x31b441=BattleManager['allBattleMembers']()[_0x22a79a(0x435)](_0x6d80ec=>_0x6d80ec&&_0x6d80ec[_0x22a79a(0x662)]()),_0x5b88f8=BattleManager[_0x22a79a(0x139)],_0x3f719b=BattleManager['_target'],_0x8ebc76=BattleManager['_allTargets']?BattleManager[_0x22a79a(0x92c)][_0x22a79a(0x8d8)](0x0):_0x31b441;_0x5155e1=_0x5155e1[_0x22a79a(0x303)]()[_0x22a79a(0x893)]();if(_0x5155e1==='user')return[_0x5b88f8];else{if(_0x5155e1===_0x22a79a(0x31c))return[_0x3f719b];else{if(_0x5155e1===_0x22a79a(0x133)){if(_0x3f719b){const _0x405649=_0x8ebc76[_0x22a79a(0x699)](_0x3f719b);return _0x405649>=0x0?[_0x8ebc76[_0x405649-0x1]||_0x3f719b]:[_0x3f719b];}}else{if(_0x5155e1===_0x22a79a(0x6bd)){if(_0x3f719b){if(_0x22a79a(0xbcb)!==_0x22a79a(0x3be)){const _0x3f06ad=_0x8ebc76['indexOf'](_0x3f719b);return _0x3f06ad>=0x0?[_0x8ebc76[_0x3f06ad+0x1]||_0x3f719b]:[_0x3f719b];}else this[_0x22a79a(0x5ae)]['bitmap']['smooth']!==this[_0x22a79a(0x437)]['battlerSmoothImage']()&&(this[_0x22a79a(0x5ae)][_0x22a79a(0xc0b)]['smooth']=this[_0x22a79a(0x437)][_0x22a79a(0x647)]());}}else{if(_0x5155e1===_0x22a79a(0xcae))return _0x8ebc76;else{if(_0x5155e1===_0x22a79a(0x4c0)){if('tyHrQ'==='jEgss'){this['select'](_0x3f6936);if(_0x355519[_0x22a79a(0xb61)]()){const _0x32bb09=_0x1f2996['members']()[_0x4f89ed],_0x3ff4cf=_0x4fa006['_enemies'][_0x22a79a(0x699)](_0x32bb09);_0x3ff4cf>=0x0&&(_0x1b99a6['select'](_0x3ff4cf),_0x23f700['processOk']());}}else return[_0x5b88f8][_0x22a79a(0x179)](_0x8ebc76);}else{if(_0x5155e1==='not\x20focus')return _0x31b441['filter'](_0x3ee5ed=>_0x3ee5ed!==_0x5b88f8&&!_0x8ebc76[_0x22a79a(0xcf9)](_0x3ee5ed)&&_0x3ee5ed[_0x22a79a(0x5e2)]());else{if(_0x5155e1===_0x22a79a(0xb71))return _0x22a79a(0x531)!==_0x22a79a(0x531)?_0x1177c5[_0x22a79a(0x767)]()[this[_0x22a79a(0x34e)]]:[VisuMZ[_0x22a79a(0xb03)]()];else{if(_0x5155e1[_0x22a79a(0x605)](/SPECIAL (.*)>/i)){const _0x598af7=String(RegExp['$1'])[_0x22a79a(0x123)](',')[_0x22a79a(0xc3f)](_0x4b947c=>_0x4b947c[_0x22a79a(0x893)]());return[VisuMZ[_0x22a79a(0x8d0)](_0x598af7)];}}}}}}}}}if(_0x5b88f8){if(_0x22a79a(0xaf2)===_0x22a79a(0x50e))_0x846f62[_0x22a79a(0xbe1)]['JS'][_0xde6011]['call'](this,this['subject'](),this[_0x22a79a(0x1e3)](),_0x1c579b,_0x5680a2);else{if(_0x5155e1===_0x22a79a(0x80f))return _0x5b88f8[_0x22a79a(0x6f9)]()[_0x22a79a(0x564)]();else{if(_0x5155e1===_0x22a79a(0xc21))return _0x5b88f8[_0x22a79a(0x6f9)]()['aliveMembers']()[_0x22a79a(0x435)](_0x1d207d=>_0x1d207d!==_0x5b88f8);else{if(_0x5155e1===_0x22a79a(0xc68))return _0x5b88f8[_0x22a79a(0x6f9)]()[_0x22a79a(0x564)]()[_0x22a79a(0x435)](_0x417371=>_0x417371!==_0x3f719b);else{if(_0x5155e1==='dead\x20friends')return _0x5b88f8['friendsUnit']()[_0x22a79a(0xc93)]();else{if(_0x5155e1[_0x22a79a(0x605)](/FRIEND INDEX (\d+)/i)){const _0x3cfb23=Number(RegExp['$1']);return[_0x5b88f8['friendsUnit']()['members']()[_0x3cfb23]];}}}}}if(_0x5155e1===_0x22a79a(0x954)){if('RTmWT'!=='RTmWT')this[_0x22a79a(0x510)](_0x22a79a(0x7a1)),this[_0x22a79a(0x510)](_0x22a79a(0xcdc)),this[_0x22a79a(0x510)](_0x22a79a(0x917)),this['push']('addText',_0x2f42fe[_0x22a79a(0x2e4)][_0x22a79a(0x7d6)](_0x30365f[_0x22a79a(0x380)]())),this[_0x22a79a(0x510)](_0x22a79a(0xca3));else return _0x5b88f8[_0x22a79a(0x404)]()[_0x22a79a(0x564)]();}else{if(_0x5155e1==='alive\x20opponents\x20not\x20target')return _0x5b88f8[_0x22a79a(0x404)]()[_0x22a79a(0x564)]()['filter'](_0x1e516d=>_0x1e516d!==_0x3f719b);else{if(_0x5155e1==='dead\x20opponents')return _0x5b88f8[_0x22a79a(0x404)]()['deadMembers']();else{if(_0x5155e1[_0x22a79a(0x605)](/OPPONENT INDEX (\d+)/i)){if(_0x22a79a(0x81b)!==_0x22a79a(0x6e8)){const _0x5bf6a0=Number(RegExp['$1']);return[_0x5b88f8[_0x22a79a(0x404)]()[_0x22a79a(0x767)]()[_0x5bf6a0]];}else{if(!this['isAutoBattleCommandAdded']())return;const _0x73447c=this[_0x22a79a(0xb73)](),_0x42c4be=_0x185b99[_0x22a79a(0xbe1)][_0x22a79a(0x668)][_0x22a79a(0x24b)][_0x22a79a(0x56d)],_0x3079d6=_0x73447c===_0x22a79a(0x319)?_0x464326[_0x22a79a(0x7f7)]:_0x22a79a(0xb84)[_0x22a79a(0x7d6)](_0x42c4be,_0x590072[_0x22a79a(0x7f7)]),_0x32bea6=this[_0x22a79a(0x3d7)]();this['addCommand'](_0x3079d6,_0x22a79a(0x7f7),_0x32bea6);}}}}}}}if(_0x5155e1===_0x22a79a(0xa95)){if('pEECZ'==='pEECZ')return $gameParty['aliveMembers']();else this[_0x22a79a(0x55a)]=(this[_0x22a79a(0x55a)]+0x1)%0x4;}else{if(_0x5155e1==='alive\x20actors\x20not\x20user')return $gameParty[_0x22a79a(0x564)]()['filter'](_0x1fb43c=>_0x1fb43c!==_0x5b88f8);else{if(_0x5155e1===_0x22a79a(0x5f8)){if(_0x22a79a(0x115)!==_0x22a79a(0x115)){if(this[_0x22a79a(0xc12)]!==_0x565659)return![];if(!_0x3dded1[_0x22a79a(0x1f8)]())return![];return _0x5ef0a4[_0x22a79a(0xbe1)][_0x22a79a(0x668)]['BattleLayout'][_0x22a79a(0x30c)];}else return $gameParty['aliveMembers']()[_0x22a79a(0x435)](_0x470ee5=>_0x470ee5!==_0x3f719b);}else{if(_0x5155e1===_0x22a79a(0x603)){if(_0x22a79a(0x652)==='rPcmP')return $gameParty['deadMembers']();else _0x16bd4b[_0x22a79a(0xc7e)](0x0,0x0,_0x16203c['Duration'],_0x42a589['EasingType']);}else{if(_0x5155e1[_0x22a79a(0x605)](/ACTOR INDEX (\d+)/i)){if(_0x22a79a(0x6d4)===_0x22a79a(0x6ab))_0x474f6e+=_0x1cf3a0[_0x22a79a(0x630)](_0x331d2d['hpDamage']);else{const _0x43a6e3=Number(RegExp['$1']);return[$gameParty[_0x22a79a(0x767)]()[_0x43a6e3]];}}else{if(_0x5155e1[_0x22a79a(0x605)](/ACTOR ID (\d+)/i)){if(_0x22a79a(0x3f3)===_0x22a79a(0xc43))this[_0x22a79a(0x5f3)]=!![],this[_0x22a79a(0x2d4)]['push'](_0x22a79a(0x496),_0x5b3b5c[_0x22a79a(0xbe1)][_0x22a79a(0x668)][_0x22a79a(0x24b)][_0x22a79a(0x92b)]);else{const _0x2b2f2c=Number(RegExp['$1']);return[$gameActors[_0x22a79a(0x442)](_0x2b2f2c)];}}}}}}}if(_0x5155e1==='alive\x20enemies')return $gameTroop['aliveMembers']();else{if(_0x5155e1===_0x22a79a(0x35b)){if('pewRQ'==='pewRQ')return $gameTroop[_0x22a79a(0x564)]()[_0x22a79a(0x435)](_0x2af899=>_0x2af899!==_0x5b88f8);else{if(!_0x4cda87['isSceneBattle']())return;if(!_0x470545[_0x22a79a(0x619)])return;const _0x3c1424=_0x3876f4[_0x22a79a(0xc05)]();if(!_0x3c1424)return;_0x3c1424[_0x22a79a(0xbaa)]('battleSkew');}}else{if(_0x5155e1===_0x22a79a(0x117))return $gameTroop[_0x22a79a(0x564)]()[_0x22a79a(0x435)](_0x5ff913=>_0x5ff913!==_0x3f719b);else{if(_0x5155e1===_0x22a79a(0x6cb)){if(_0x22a79a(0x901)===_0x22a79a(0xa74)){const _0x3dea7c=_0x2f41bf['BattleCore'][_0x22a79a(0x5c9)][_0x22a79a(0x432)](this);if(this[_0x22a79a(0xa8c)]())_0x3dea7c[_0x22a79a(0x249)](this[_0x22a79a(0x1e3)]());return _0x3dea7c;}else return $gameTroop[_0x22a79a(0xc93)]();}else{if(_0x5155e1[_0x22a79a(0x605)](/ENEMY INDEX (\d+)/i)){if('CnMht'==='CnMht'){const _0x22c67a=Number(RegExp['$1']);return[$gameTroop[_0x22a79a(0x767)]()[_0x22c67a]];}else{if(_0x471d97[_0x22a79a(0x2c9)](_0x500579))return!![];return![];}}else{if(_0x5155e1[_0x22a79a(0x605)](/ENEMY ID (\d+)/i)){const _0x4c87eb=Number(RegExp['$1']);return $gameTroop['aliveMembers']()['filter'](_0x2cbbcf=>_0x2cbbcf['enemyId']()===_0x4c87eb);}}}}}}if(_0x5155e1===_0x22a79a(0x93d))return _0x31b441[_0x22a79a(0x435)](_0x371a17=>_0x371a17[_0x22a79a(0x431)]());else{if(_0x5155e1===_0x22a79a(0x158)){if(_0x22a79a(0x215)===_0x22a79a(0x215))return _0x31b441['filter'](_0x32df80=>_0x32df80[_0x22a79a(0x431)]()&&_0x32df80!==_0x5b88f8);else{const _0x523c6e=_0x88a928['indexOf'](_0x1a14c9);return _0x523c6e>=0x0?[_0x3c0017[_0x523c6e+0x1]||_0xdc66af]:[_0x1e28ce];}}else{if(_0x5155e1===_0x22a79a(0x874))return _0x31b441[_0x22a79a(0x435)](_0x2dd6de=>_0x2dd6de['isAlive']()&&_0x2dd6de!==_0x3f719b);else{if(_0x5155e1===_0x22a79a(0x99d))return _0x31b441['filter'](_0x175d6f=>_0x175d6f[_0x22a79a(0x50b)]());}}}return[];},VisuMZ[_0x4a80d9(0xb03)]=function(){const _0x249c20=_0x4a80d9;return BattleManager[_0x249c20(0xcca)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x36f727){return BattleManager['_target'];},PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Set_SetupAction',_0x3d107=>{const _0x1b951e=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b951e(0xb1e)](_0x3d107,_0x3d107);const _0x592ca3=$gameTemp[_0x1b951e(0xc05)](),_0x5bddd2=BattleManager[_0x1b951e(0x287)],_0x2cdd10=BattleManager[_0x1b951e(0x139)],_0x16abf9=BattleManager[_0x1b951e(0x92c)]?BattleManager['_allTargets']['slice'](0x0):[],_0xc208b=BattleManager[_0x1b951e(0x2d4)];if(!_0x592ca3||!_0x5bddd2||!_0x2cdd10)return;if(!_0x5bddd2[_0x1b951e(0x6af)]())return;if(_0x3d107[_0x1b951e(0xba0)])_0xc208b[_0x1b951e(0x276)](_0x2cdd10,_0x5bddd2[_0x1b951e(0x6af)]());_0x3d107[_0x1b951e(0xc22)]&&_0xc208b['push'](_0x1b951e(0x612),_0x2cdd10,_0x16abf9,!![]);if(_0x3d107['ActionStart'])_0xc208b[_0x1b951e(0x510)](_0x1b951e(0x5ad),_0x2cdd10,_0x5bddd2);if(_0x3d107[_0x1b951e(0x6f2)])_0xc208b[_0x1b951e(0x510)](_0x1b951e(0x1d7));if(_0x3d107['CastAnimation'])_0xc208b[_0x1b951e(0x510)](_0x1b951e(0xa87),_0x2cdd10,_0x5bddd2);if(_0x3d107[_0x1b951e(0x4aa)])_0xc208b['push'](_0x1b951e(0x9f8));_0x592ca3[_0x1b951e(0xbaa)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x8c9),_0x2f7bd4=>{const _0x109167=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x109167(0xb1e)](_0x2f7bd4,_0x2f7bd4);const _0x5a9f88=$gameTemp[_0x109167(0xc05)](),_0x57634e=BattleManager[_0x109167(0x287)],_0x1534c3=BattleManager[_0x109167(0x139)],_0x38e94e=BattleManager[_0x109167(0x92c)]?BattleManager[_0x109167(0x92c)]['slice'](0x0):[],_0x5ae877=BattleManager[_0x109167(0x2d4)],_0x3ddd44=_0x2f7bd4[_0x109167(0x7ca)]??![];if(!_0x5a9f88||!_0x57634e||!_0x1534c3)return;if(!_0x57634e[_0x109167(0x6af)]())return;let _0x1ee2cf=_0x3ddd44?_0x5ae877['getDualWieldTimes'](_0x1534c3):0x1;for(let _0x28da33=0x0;_0x28da33<_0x1ee2cf;_0x28da33++){_0x3ddd44&&_0x1534c3[_0x109167(0x172)]()&&_0x5ae877[_0x109167(0x510)](_0x109167(0x46f),_0x1534c3,_0x28da33);if(_0x2f7bd4[_0x109167(0xa77)])_0x5ae877[_0x109167(0x510)](_0x109167(0x1e8),_0x1534c3,_0x57634e);if(_0x2f7bd4[_0x109167(0xa10)]>0x0)_0x5ae877[_0x109167(0x510)](_0x109167(0x8ec),_0x2f7bd4[_0x109167(0xa10)]);if(_0x2f7bd4[_0x109167(0x453)])_0x5ae877[_0x109167(0x510)](_0x109167(0x980),_0x1534c3,_0x38e94e,_0x57634e[_0x109167(0x6af)]()[_0x109167(0xaff)]);if(_0x2f7bd4[_0x109167(0x4aa)])_0x5ae877[_0x109167(0x510)](_0x109167(0x9f8));for(const _0x213294 of _0x38e94e){if(!_0x213294)continue;if(_0x2f7bd4[_0x109167(0x33c)])_0x5ae877[_0x109167(0x510)](_0x109167(0x7a4),_0x1534c3,_0x213294);}}_0x3ddd44&&_0x1534c3[_0x109167(0x172)]()&&_0x5ae877[_0x109167(0x510)](_0x109167(0x3b8),_0x1534c3);if(_0x2f7bd4[_0x109167(0xc22)])_0x5ae877[_0x109167(0x510)](_0x109167(0x612),_0x1534c3,_0x38e94e,![]);_0x5a9f88[_0x109167(0xbaa)](_0x109167(0xcdb));}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x24e),_0x2850e6=>{const _0x3d7cb4=_0x4a80d9;if(!SceneManager[_0x3d7cb4(0x1f8)]())return;VisuMZ[_0x3d7cb4(0xb1e)](_0x2850e6,_0x2850e6);const _0x4bb34b=$gameTemp[_0x3d7cb4(0xc05)](),_0x417820=BattleManager[_0x3d7cb4(0x287)],_0x3af461=BattleManager[_0x3d7cb4(0x139)],_0x2cc1b4=BattleManager[_0x3d7cb4(0x92c)]?BattleManager[_0x3d7cb4(0x92c)][_0x3d7cb4(0x8d8)](0x0):[],_0x592f93=BattleManager[_0x3d7cb4(0x2d4)],_0x230bb8=_0x2850e6['DualWield']??![];if(!_0x4bb34b||!_0x417820||!_0x3af461)return;if(!_0x417820[_0x3d7cb4(0x6af)]())return;let _0x3500a2=_0x230bb8?_0x592f93['getDualWieldTimes'](_0x3af461):0x1;for(let _0x38a214=0x0;_0x38a214<_0x3500a2;_0x38a214++){for(const _0x4e936a of _0x2cc1b4){if(_0x3d7cb4(0xb2a)!==_0x3d7cb4(0xc72)){if(!_0x4e936a)continue;_0x230bb8&&_0x3af461[_0x3d7cb4(0x172)]()&&_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x46f),_0x3af461,_0x38a214);if(_0x2850e6[_0x3d7cb4(0xa77)])_0x592f93[_0x3d7cb4(0x510)]('performAction',_0x3af461,_0x417820);if(_0x2850e6[_0x3d7cb4(0x91c)]>0x0)_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x8ec),_0x2850e6[_0x3d7cb4(0x91c)]);if(_0x2850e6[_0x3d7cb4(0x453)])_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x980),_0x3af461,[_0x4e936a],_0x417820['item']()[_0x3d7cb4(0xaff)]);if(_0x2850e6[_0x3d7cb4(0x895)]>0x0)_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x8ec),_0x2850e6[_0x3d7cb4(0x895)]);if(_0x2850e6['ActionEffect'])_0x592f93[_0x3d7cb4(0x510)]('actionEffect',_0x3af461,_0x4e936a);}else return!this[_0x3d7cb4(0x68e)]()&&!this[_0x3d7cb4(0xc13)]();}}_0x230bb8&&_0x3af461[_0x3d7cb4(0x172)]()&&_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x3b8),_0x3af461);if(_0x2850e6[_0x3d7cb4(0xc22)])_0x592f93[_0x3d7cb4(0x510)](_0x3d7cb4(0x612),_0x3af461,_0x2cc1b4,![]);_0x4bb34b[_0x3d7cb4(0xbaa)]('battlelog');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x60c),_0x18df92=>{const _0x194e38=_0x4a80d9;if(!SceneManager[_0x194e38(0x1f8)]())return;VisuMZ[_0x194e38(0xb1e)](_0x18df92,_0x18df92);const _0x4375a6=$gameTemp[_0x194e38(0xc05)](),_0x323564=BattleManager[_0x194e38(0x287)],_0x365547=BattleManager['_subject'],_0x5ac66e=BattleManager[_0x194e38(0x92c)]?BattleManager[_0x194e38(0x92c)][_0x194e38(0x8d8)](0x0):[],_0x36c757=BattleManager[_0x194e38(0x2d4)];if(!_0x4375a6||!_0x323564||!_0x365547)return;if(!_0x323564['item']())return;if(_0x18df92[_0x194e38(0xc22)])_0x36c757['push'](_0x194e38(0x612),_0x365547,_0x5ac66e,![]);if(_0x18df92[_0x194e38(0x37d)])_0x36c757[_0x194e38(0x510)](_0x194e38(0x4c1));if(_0x18df92['WaitForEffect'])_0x36c757[_0x194e38(0x510)](_0x194e38(0x575));if(_0x18df92['ClearBattleLog'])_0x36c757[_0x194e38(0x510)](_0x194e38(0x2b9));if(_0x18df92[_0x194e38(0x15f)])_0x36c757[_0x194e38(0x510)](_0x194e38(0x8d3),_0x365547);if(_0x18df92[_0x194e38(0x6f2)])_0x36c757[_0x194e38(0x510)](_0x194e38(0x1d7));_0x4375a6['setWaitMode'](_0x194e38(0xcdb));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_ChangeAngle',_0x10cafe=>{const _0x2ea98b=_0x4a80d9;if(!SceneManager[_0x2ea98b(0x1f8)]())return;if(!Imported[_0x2ea98b(0x619)])return;VisuMZ[_0x2ea98b(0xb1e)](_0x10cafe,_0x10cafe);const _0x505a2b=$gameTemp[_0x2ea98b(0xc05)](),_0x308316=_0x10cafe['WaitForAngle'];if(!_0x505a2b)return;$gameScreen[_0x2ea98b(0x43c)](_0x10cafe['Angle'],_0x10cafe['Duration'],_0x10cafe[_0x2ea98b(0x5bd)]);if(_0x308316)_0x505a2b[_0x2ea98b(0xbaa)](_0x2ea98b(0x87b));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Angle_Reset',_0x1a2e8a=>{const _0x438f77=_0x4a80d9;if(!SceneManager[_0x438f77(0x1f8)]())return;if(!Imported[_0x438f77(0x619)])return;VisuMZ[_0x438f77(0xb1e)](_0x1a2e8a,_0x1a2e8a);const _0x1fbb99=$gameTemp[_0x438f77(0xc05)](),_0x160b93=_0x1a2e8a[_0x438f77(0x15b)];if(!_0x1fbb99)return;$gameScreen[_0x438f77(0x43c)](0x0,_0x1a2e8a['Duration'],_0x1a2e8a['EasingType']);if(_0x160b93)_0x1fbb99[_0x438f77(0xbaa)](_0x438f77(0x87b));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x8e5),_0x3bda5e=>{const _0x262fa7=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x262fa7(0x619)])return;const _0x28d4a3=$gameTemp[_0x262fa7(0xc05)]();if(!_0x28d4a3)return;_0x28d4a3[_0x262fa7(0xbaa)](_0x262fa7(0x87b));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa8d),_0x319ebb=>{const _0x557fbb=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x319ebb,_0x319ebb);const _0x363d6e=$gameTemp[_0x557fbb(0xc05)](),_0xefeba7=BattleManager[_0x557fbb(0x287)],_0x4957b1=BattleManager['_subject'],_0x4ef373=VisuMZ[_0x557fbb(0x12b)](_0x319ebb[_0x557fbb(0x302)]),_0x4f33b8=_0x319ebb[_0x557fbb(0x33d)],_0x1fa201=BattleManager[_0x557fbb(0x2d4)];if(!_0x363d6e||!_0xefeba7||!_0x4957b1)return;if(!_0xefeba7[_0x557fbb(0x6af)]())return;let _0x5549dc=_0xefeba7[_0x557fbb(0x6af)]()[_0x557fbb(0xaff)];if(_0x5549dc<0x0)_0x5549dc=_0x4957b1[_0x557fbb(0x74f)]();$gameTemp[_0x557fbb(0xb38)](_0x4ef373,_0x5549dc,_0x4f33b8);if(_0x319ebb[_0x557fbb(0x4aa)]){if(_0x557fbb(0x34c)!==_0x557fbb(0x5b0))_0x363d6e[_0x557fbb(0xbaa)](_0x557fbb(0x134));else{const _0x3c40ee=_0x2d2135[0x0][_0x557fbb(0x7d6)](_0x5d1c75[0x0],_0x195fc0[0x0]),_0x5eb32a=_0x31f952[0x1][_0x557fbb(0x7d6)](_0x3e6b9a[0x1],_0x435947[0x1])[_0x557fbb(0x893)](),_0x5ca6fc=new _0x5b723a(_0x47a22c[_0x557fbb(0x7d6)](_0x5eb32a),'i');_0x317680[_0x3c40ee]=_0x5ca6fc;}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x6ff),_0x235108=>{const _0x150808=_0x4a80d9;if(!SceneManager[_0x150808(0x1f8)]())return;VisuMZ[_0x150808(0xb1e)](_0x235108,_0x235108);const _0x52e7d3=$gameTemp[_0x150808(0xc05)](),_0xb7622f=BattleManager[_0x150808(0x139)],_0x29ec55=VisuMZ[_0x150808(0x12b)](_0x235108[_0x150808(0x302)]),_0x4567b9=_0x235108['Mirror'],_0x3a3212=BattleManager[_0x150808(0x2d4)];if(!_0x52e7d3||!_0xb7622f)return;const _0x9f1a01=_0xb7622f['attackAnimationId1']();$gameTemp[_0x150808(0xb38)](_0x29ec55,_0x9f1a01,_0x4567b9),_0x235108[_0x150808(0x4aa)]&&_0x52e7d3[_0x150808(0xbaa)](_0x150808(0x134));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x29d),_0x2ffe98=>{const _0xa5c52a=_0x4a80d9;if(!SceneManager[_0xa5c52a(0x1f8)]())return;VisuMZ[_0xa5c52a(0xb1e)](_0x2ffe98,_0x2ffe98);const _0x204835=_0x350ad6[_0xa5c52a(0x822)](_0x2ffe98[_0xa5c52a(0x32e)]);if(_0x204835<=0x0)return;const _0x4e9771=$gameTemp[_0xa5c52a(0xc05)](),_0x350ad6=BattleManager['_subject'],_0x5272b2=VisuMZ[_0xa5c52a(0x12b)](_0x2ffe98[_0xa5c52a(0x302)]),_0x16bdab=_0x2ffe98[_0xa5c52a(0x33d)],_0x524703=BattleManager[_0xa5c52a(0x2d4)];if(!_0x4e9771||!_0x350ad6)return;$gameTemp[_0xa5c52a(0xb38)](_0x5272b2,_0x204835,_0x16bdab);if(_0x2ffe98['WaitForAnimation']){if('yYzxo'!==_0xa5c52a(0x207)){if(!this['visible'])return![];if(_0x1321bf[_0xa5c52a(0x6e5)]())return![];const _0x3b08c3=_0x2510c4[_0xa5c52a(0xb97)][_0xa5c52a(0x4bb)](),_0x559ccb=['default',_0xa5c52a(0xa03),'xp',_0xa5c52a(0x120),_0xa5c52a(0x33a)];return _0x559ccb[_0xa5c52a(0xcf9)](_0x3b08c3);}else _0x4e9771['setWaitMode'](_0xa5c52a(0x134));}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Animation_CastAnimation',_0x4aab0c=>{const _0xe8d620=_0x4a80d9;if(!SceneManager[_0xe8d620(0x1f8)]())return;VisuMZ[_0xe8d620(0xb1e)](_0x4aab0c,_0x4aab0c);const _0x40624b=$gameTemp[_0xe8d620(0xc05)](),_0x20d460=BattleManager[_0xe8d620(0x287)],_0x422d49=_0x4aab0c[_0xe8d620(0x33d)],_0x4dff96=VisuMZ[_0xe8d620(0x12b)](_0x4aab0c['Targets']);if(!_0x40624b||!_0x20d460)return;if(!_0x20d460[_0xe8d620(0x6af)]())return;for(const _0x22e987 of _0x4dff96){if(!_0x22e987)continue;_0x22e987['performCastAnimation'](_0x20d460,_0x422d49);}if(_0x4aab0c[_0xe8d620(0x4aa)])_0x40624b[_0xe8d620(0xbaa)](_0xe8d620(0x134));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x53a),_0x21f2c4=>{const _0x215106=_0x4a80d9;VisuMZ[_0x215106(0xb1e)](_0x21f2c4,_0x21f2c4);const _0x38d624=$gameTemp[_0x215106(0xc05)](),_0x4a57c2=VisuMZ[_0x215106(0x12b)](_0x21f2c4[_0x215106(0x302)]),_0xeb0df=_0x21f2c4[_0x215106(0xc29)];if(!_0xeb0df)return;for(const _0x1a4c4d of _0x4a57c2){if(_0x215106(0xada)===_0x215106(0xada)){if(!_0x1a4c4d)continue;if(!_0x1a4c4d['isActor']())continue;_0x1a4c4d[_0x215106(0x4f8)](_0xeb0df);}else return _0x16c326[_0x215106(0xbe1)][_0x215106(0x668)][_0x215106(0x8a8)][_0x215106(0x2c3)];}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x931),_0x1fa363=>{const _0x1bb8c6=_0x4a80d9;if(!SceneManager[_0x1bb8c6(0xb97)])return;if(!SceneManager['_scene'][_0x1bb8c6(0x967)])return;if(!Imported[_0x1bb8c6(0xb80)])return;VisuMZ[_0x1bb8c6(0xb1e)](_0x1fa363,_0x1fa363);const _0x4dbc76=$gameTemp[_0x1bb8c6(0xc05)](),_0x239a8a=Math[_0x1bb8c6(0x961)](_0x1fa363[_0x1bb8c6(0x77a)]),_0x2a1b72=Math[_0x1bb8c6(0x961)](_0x1fa363[_0x1bb8c6(0xcc6)]);$gameTemp[_0x1bb8c6(0x152)](_0x239a8a,_0x2a1b72,_0x1fa363[_0x1bb8c6(0x113)],_0x1fa363['Mirror'],_0x1fa363[_0x1bb8c6(0x254)]),_0x1fa363[_0x1bb8c6(0x46d)]&&_0x4dbc76&&(SceneManager[_0x1bb8c6(0xb97)][_0x1bb8c6(0x967)][_0x1bb8c6(0x1e9)](),_0x4dbc76[_0x1bb8c6(0xbaa)]('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Animation_ShowAnimation',_0x5585f2=>{const _0x21d12a=_0x4a80d9;if(!SceneManager[_0x21d12a(0x1f8)]())return;VisuMZ[_0x21d12a(0xb1e)](_0x5585f2,_0x5585f2);const _0x20adac=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e3fd9=VisuMZ[_0x21d12a(0x12b)](_0x5585f2[_0x21d12a(0x302)]),_0x2ff854=_0x5585f2[_0x21d12a(0x113)],_0x2cf3c4=_0x5585f2[_0x21d12a(0x33d)];if(!_0x20adac)return;$gameTemp[_0x21d12a(0xb38)](_0x1e3fd9,_0x2ff854,_0x2cf3c4);if(_0x5585f2[_0x21d12a(0x4aa)])_0x20adac[_0x21d12a(0xbaa)](_0x21d12a(0x134));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x618),_0x129491=>{const _0x165e0c=_0x4a80d9;if(!SceneManager[_0x165e0c(0x1f8)]())return;const _0x16a8f0=$gameTemp[_0x165e0c(0xc05)]();if(!_0x16a8f0)return;_0x16a8f0[_0x165e0c(0xbaa)]('battleAnimation');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa5e),_0x4799e5=>{const _0x3288b8=_0x4a80d9;if(!SceneManager[_0x3288b8(0x1f8)]())return;VisuMZ[_0x3288b8(0xb1e)](_0x4799e5,_0x4799e5);const _0x289693=BattleManager[_0x3288b8(0x2d4)],_0x15e7ac=_0x4799e5[_0x3288b8(0x8b7)]&&Imported['VisuMZ_4_CombatLog'];_0x289693[_0x3288b8(0x496)](_0x4799e5[_0x3288b8(0xcd9)]),_0x15e7ac&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x3288b8(0x454)](_0x4799e5[_0x3288b8(0xcd9)]||'',_0x4799e5[_0x3288b8(0x9c6)]||0x0);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_BattleLog_Clear',_0x5f0c82=>{const _0x371d97=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x19d6df=BattleManager[_0x371d97(0x2d4)];_0x19d6df[_0x371d97(0x2b9)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_BattleLog_DisplayAction',_0x230355=>{const _0x220308=_0x4a80d9;if(!SceneManager[_0x220308(0x1f8)]())return;const _0x4caeb1=$gameTemp[_0x220308(0xc05)](),_0x59be63=BattleManager['_action'],_0xbc4931=BattleManager[_0x220308(0x139)],_0x1a8ecb=BattleManager[_0x220308(0x2d4)];if(!_0x4caeb1||!_0x59be63||!_0xbc4931)return;if(!_0x59be63[_0x220308(0x6af)]())return;_0x1a8ecb['displayAction'](_0xbc4931,_0x59be63[_0x220308(0x6af)]()),_0x4caeb1['setWaitMode']('battlelog');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x5a4),_0x416e26=>{const _0x30f872=_0x4a80d9;if(!SceneManager[_0x30f872(0x1f8)]())return;const _0x2f5608=BattleManager[_0x30f872(0x2d4)];_0x2f5608[_0x30f872(0xcdc)]();}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x1b8),_0x242acf=>{const _0x1ed22d=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x120958=BattleManager['_logWindow'];_0x120958[_0x1ed22d(0x917)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_BattleLog_Refresh',_0x4ead46=>{const _0x4b51a1=_0x4a80d9;if(!SceneManager[_0x4b51a1(0x1f8)]())return;const _0x2718d0=BattleManager[_0x4b51a1(0x2d4)];_0x2718d0[_0x4b51a1(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_BattleLog_UI',_0x5ce12e=>{const _0x2b6012=_0x4a80d9;if(!SceneManager[_0x2b6012(0x1f8)]())return;VisuMZ[_0x2b6012(0xb1e)](_0x5ce12e,_0x5ce12e),SceneManager[_0x2b6012(0xb97)][_0x2b6012(0x984)](_0x5ce12e['ShowHide']);}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0xcf6),_0x8f6d49=>{const _0x451884=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x5e32bb=$gameTemp['getLastPluginCommandInterpreter']();_0x5e32bb[_0x451884(0xbaa)]('battlelog');}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x69b),_0x425fe8=>{const _0x81e798=_0x4a80d9;if(!SceneManager[_0x81e798(0x1f8)]())return;const _0x56a00c=$gameTemp['getLastPluginCommandInterpreter'](),_0x97ee00=BattleManager['_logWindow'];_0x97ee00[_0x81e798(0x4c1)](),_0x56a00c[_0x81e798(0xbaa)](_0x81e798(0xcdb));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x332),_0x2cf346=>{const _0x56b0c4=_0x4a80d9;if(!SceneManager[_0x56b0c4(0x1f8)]())return;if(!Imported[_0x56b0c4(0x619)])return;VisuMZ[_0x56b0c4(0xb1e)](_0x2cf346,_0x2cf346);const _0x4489cd=$gameScreen[_0x56b0c4(0x2f7)]();_0x4489cd['cameraClamp']=_0x2cf346[_0x56b0c4(0x728)];}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x3c5),_0x2e1167=>{const _0x137826=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x2e1167,_0x2e1167);const _0x2dd69d=$gameTemp[_0x137826(0xc05)](),_0x20f7b6=_0x2e1167[_0x137826(0xac4)];$gameScreen[_0x137826(0x334)](_0x2e1167[_0x137826(0xbf4)],_0x2e1167[_0x137826(0x1a5)],_0x2e1167[_0x137826(0x9b6)],_0x2e1167['EasingType']);if(_0x20f7b6)_0x2dd69d[_0x137826(0xbaa)]('battleCamera');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x8f6),_0x2b068f=>{const _0x151734=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x2b068f,_0x2b068f);const _0x4f92af=$gameTemp[_0x151734(0xc05)](),_0x406bee=VisuMZ[_0x151734(0x12b)](_0x2b068f['Targets']),_0x1ebc12=_0x2b068f[_0x151734(0xac4)];$gameScreen[_0x151734(0x863)](_0x406bee,_0x2b068f[_0x151734(0x9b6)],_0x2b068f[_0x151734(0x5bd)]);if(_0x1ebc12)_0x4f92af[_0x151734(0xbaa)](_0x151734(0x161));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x224),_0x4b83fd=>{const _0x397f28=_0x4a80d9;if(!SceneManager[_0x397f28(0x1f8)]())return;if(!Imported[_0x397f28(0x619)])return;VisuMZ['ConvertParams'](_0x4b83fd,_0x4b83fd);const _0x51eda5=$gameTemp[_0x397f28(0xc05)](),_0x1ecc7e=_0x4b83fd[_0x397f28(0xac4)];$gameScreen[_0x397f28(0xc7e)](_0x4b83fd[_0x397f28(0x2b1)],_0x4b83fd[_0x397f28(0x21f)],_0x4b83fd[_0x397f28(0x9b6)],_0x4b83fd[_0x397f28(0x5bd)]);if(_0x1ecc7e)_0x51eda5[_0x397f28(0xbaa)](_0x397f28(0x161));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x99a),_0x4d122d=>{const _0x2995ac=_0x4a80d9;if(!SceneManager[_0x2995ac(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2995ac(0xb1e)](_0x4d122d,_0x4d122d);const _0xa41c4b=$gameTemp['getLastPluginCommandInterpreter'](),_0x4dc2b2=_0x4d122d[_0x2995ac(0x950)],_0x2d6a73=_0x4d122d['ResetOffset'],_0x467f5c=_0x4d122d[_0x2995ac(0xac4)];if(_0x4dc2b2){const _0x493794=Math[_0x2995ac(0x961)](Graphics[_0x2995ac(0x2ce)]/0x2),_0x9cc048=Math[_0x2995ac(0x961)](Graphics['height']/0x2);$gameScreen[_0x2995ac(0x334)](_0x493794,_0x9cc048,_0x4d122d[_0x2995ac(0x9b6)],_0x4d122d[_0x2995ac(0x5bd)]);}if(_0x2d6a73){if(_0x2995ac(0x84b)!=='MRVpj')$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x4d122d[_0x2995ac(0x9b6)],_0x4d122d['EasingType']);else return this[_0x2995ac(0x3c2)](_0x56f3bf);}if(_0x467f5c)_0xa41c4b[_0x2995ac(0xbaa)](_0x2995ac(0x161));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x171),_0x3076ef=>{const _0x572637=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x572637(0x619)])return;const _0x54474f=$gameTemp[_0x572637(0xc05)]();if(!_0x54474f)return;_0x54474f['setWaitMode'](_0x572637(0x161));}),VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x6ba)]=function(_0xc9ba37){const _0x4d200b=_0x4a80d9;_0xc9ba37[_0x4d200b(0x695)]='';const _0x1d4142=VisuMZ[_0x4d200b(0x1c2)][_0x4d200b(0x6ba)](_0xc9ba37),_0x35962e=VisuMZ[_0x4d200b(0x12b)](_0xc9ba37[_0x4d200b(0x302)])[0x0]||null;if(_0x35962e){if('QQScj'===_0x4d200b(0x8f8))this[_0x4d200b(0xbf9)][_0x4d200b(0x3a5)]();else{_0x1d4142['portraitFilename']=_0x35962e['visualCutinPortraitFilename'](),_0x1d4142[_0x4d200b(0xb8a)]=_0x35962e['visualCutinPortraitIndex'](),_0x1d4142[_0x4d200b(0x871)]=_0x35962e['visualCutinPortraitHue'](),_0x1d4142['portraitType']=_0x35962e['visualCutinPortraitType']();if(_0x35962e[_0x4d200b(0x494)]()){if(_0x4d200b(0x998)==='AUZOQ')_0x35962e[_0x4d200b(0x656)]()&&(_0x1d4142['portraitFlipHorz']=!_0x1d4142[_0x4d200b(0x197)]),_0x35962e['flipVisualCutinVert']()&&(_0x4d200b(0xb1c)==='BVBQX'?_0x1a3739['result']()[_0x4d200b(0x65e)]?this[_0x4d200b(0x510)]('performEvasion',_0x5310df):this[_0x4d200b(0x510)](_0x4d200b(0x5ff),_0x2b24d0):_0x1d4142[_0x4d200b(0xce8)]=!_0x1d4142[_0x4d200b(0xce8)]),_0x1d4142[_0x4d200b(0x983)]===_0x4d200b(0x252)&&(_0x1d4142['portraitFlipHorz']=!_0x1d4142['portraitFlipHorz']),_0xc9ba37[_0x4d200b(0xad6)][_0x4d200b(0x7b3)]&&(_0x1d4142[_0x4d200b(0xba3)]*=-0x1),_0xc9ba37[_0x4d200b(0xad6)][_0x4d200b(0x8be)]&&(_0x1d4142[_0x4d200b(0xad0)]*=-0x1),_0x1d4142['parallaxHue']+=_0xc9ba37[_0x4d200b(0xad6)][_0x4d200b(0x209)]??0x0;else{if(!_0x5d0026['isSceneBattle']())return;_0x293c81[_0x4d200b(0xb1e)](_0x1eda68,_0x3db26d);const _0x385229=_0x4266c4[_0x4d200b(0xc05)](),_0x4a7865=_0x5c0591[_0x4d200b(0x287)],_0x27ecbd=_0x4141a4[_0x4d200b(0x139)],_0x1ec531=_0x5559ae['CreateActionSequenceTargets'](_0x4f244f[_0x4d200b(0x302)]),_0x352dbd=_0x22d65c[_0x4d200b(0x33d)],_0x1bd35f=_0x1a25ff[_0x4d200b(0x2d4)];if(!_0x385229||!_0x4a7865||!_0x27ecbd)return;if(!_0x4a7865[_0x4d200b(0x6af)]())return;let _0x361701=_0x4a7865[_0x4d200b(0x6af)]()[_0x4d200b(0xaff)];if(_0x361701<0x0)_0x361701=_0x27ecbd[_0x4d200b(0x74f)]();_0x5c7739[_0x4d200b(0xb38)](_0x1ec531,_0x361701,_0x352dbd),_0x1d9fc9[_0x4d200b(0x4aa)]&&_0x385229[_0x4d200b(0xbaa)](_0x4d200b(0x134));}}}}return _0x1d4142;},PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa4f),_0x3944ef=>{const _0x341e9f=_0x4a80d9;if(!SceneManager[_0x341e9f(0x1f8)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x341e9f(0xb1e)](_0x3944ef,_0x3944ef);const _0x70d602=VisuMZ[_0x341e9f(0xbe1)][_0x341e9f(0x6ba)](_0x3944ef);SceneManager['_scene'][_0x341e9f(0xb27)](_0x70d602);const _0x38f210=$gameTemp[_0x341e9f(0xc05)]();_0x38f210&&_0x3944ef['WaitForEntrance']&&(_0x341e9f(0x875)==='Ikzof'?_0x38f210[_0x341e9f(0xbaa)](_0x341e9f(0x74c)):this['requestMotion']('swing'));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xac2),_0x20b5f7=>{const _0x147515=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x147515(0xb1e)](_0x20b5f7,_0x20b5f7),SceneManager[_0x147515(0xb97)][_0x147515(0x8cc)]();const _0x685c60=$gameTemp[_0x147515(0xc05)]();_0x685c60&&_0x20b5f7[_0x147515(0x4a7)]&&_0x685c60[_0x147515(0xbaa)]('cutinExit');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x8aa),_0x37456d=>{const _0x378ff1=_0x4a80d9;if(!SceneManager[_0x378ff1(0x1f8)]())return;if(!Imported[_0x378ff1(0x32a)])return;VisuMZ['ConvertParams'](_0x37456d,_0x37456d);const _0x51357c=_0x37456d[_0x378ff1(0xce4)][_0x378ff1(0x303)]()['trim']();SceneManager['_scene']['endVisualCutin'](_0x51357c);const _0xdb749b=$gameTemp['getLastPluginCommandInterpreter']();if(_0xdb749b&&_0x37456d[_0x378ff1(0x4a7)]){if('tpTQh'!==_0x378ff1(0x527))_0xdb749b[_0x378ff1(0xbaa)](_0x378ff1(0x42d));else return _0x4170b4[_0x378ff1(0xbe1)][_0x378ff1(0x668)][_0x378ff1(0x47d)][_0x378ff1(0x572)]['call'](this);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Cutin_WaitForEntrance',_0x5e1246=>{const _0x207ede=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x207ede(0x32a)])return;const _0x120739=$gameTemp['getLastPluginCommandInterpreter']();_0x120739['setWaitMode'](_0x207ede(0x74c));}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Cutin_WaitForExit',_0x1fcf26=>{const _0x1973ae=_0x4a80d9;if(!SceneManager[_0x1973ae(0x1f8)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x162cc9=$gameTemp['getLastPluginCommandInterpreter']();_0x162cc9[_0x1973ae(0xbaa)](_0x1973ae(0x42d));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x90d),_0x5ec8e6=>{const _0x5d1c45=_0x4a80d9;if(!SceneManager[_0x5d1c45(0x1f8)]())return;if(!Imported[_0x5d1c45(0x446)])return;VisuMZ[_0x5d1c45(0xb1e)](_0x5ec8e6,_0x5ec8e6);const _0x4136dd=VisuMZ[_0x5d1c45(0x12b)](_0x5ec8e6[_0x5d1c45(0x302)]),_0x5982ec=_0x5ec8e6[_0x5d1c45(0x310)][_0x5d1c45(0x303)]()[_0x5d1c45(0x893)]();for(const _0x2bfbde of _0x4136dd){if(!_0x2bfbde)continue;_0x2bfbde[_0x5d1c45(0x481)](_0x5982ec);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x8f3),_0x3b78e5=>{const _0x171d30=_0x4a80d9;if(!SceneManager[_0x171d30(0x1f8)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x171d30(0xb1e)](_0x3b78e5,_0x3b78e5);const _0x404ee2=VisuMZ[_0x171d30(0x12b)](_0x3b78e5[_0x171d30(0x302)]),_0xe64292=_0x3b78e5[_0x171d30(0x682)];for(const _0x168fd7 of _0x404ee2){if(!_0x168fd7)continue;_0x168fd7[_0x171d30(0x436)]()[_0x171d30(0xba7)]=_0xe64292;}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x71c),_0x14e0ae=>{const _0x2d1d3e=_0x4a80d9;if(!SceneManager[_0x2d1d3e(0x1f8)]())return;if(!Imported[_0x2d1d3e(0x392)])return;VisuMZ[_0x2d1d3e(0xb1e)](_0x14e0ae,_0x14e0ae);const _0x1f6597=BattleManager[_0x2d1d3e(0x287)],_0x12b6d1=_0x14e0ae[_0x2d1d3e(0x462)];if(!_0x1f6597)return;_0x1f6597[_0x2d1d3e(0x283)]=_0x12b6d1;}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xaf0),_0x3a8645=>{const _0x8e97af=_0x4a80d9;if(!SceneManager[_0x8e97af(0x1f8)]())return;if(!Imported[_0x8e97af(0x392)])return;const _0x502b6a=BattleManager[_0x8e97af(0x287)];if(!_0x502b6a)return;_0x502b6a[_0x8e97af(0x4ea)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xca5),_0x3628f9=>{const _0x3d2360=_0x4a80d9;if(!SceneManager[_0x3d2360(0x1f8)]())return;if(!Imported[_0x3d2360(0x392)])return;VisuMZ['ConvertParams'](_0x3628f9,_0x3628f9);const _0x35311f=BattleManager[_0x3d2360(0x287)],_0x3ce69f=_0x3628f9[_0x3d2360(0x462)];if(!_0x35311f)return;_0x35311f['_battleCoreForcedElements']=_0x3ce69f;}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x76e),_0x4ed932=>{const _0x5aa188=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5aa188(0x392)])return;const _0x19de02=BattleManager[_0x5aa188(0x287)];if(!_0x19de02)return;_0x19de02[_0x5aa188(0x112)]=!![];}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa35),_0x1e897e=>{const _0x36d070=_0x4a80d9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1e897e,_0x1e897e);const _0x76a232=VisuMZ[_0x36d070(0x12b)](_0x1e897e[_0x36d070(0x302)]);for(const _0x34fe04 of _0x76a232){if(_0x36d070(0x268)===_0x36d070(0x896))_0x4db4b1+=_0xded1ce[_0x36d070(0x2ce)]-_0xc5a9c5;else{if(!_0x34fe04)continue;_0x34fe04[_0x36d070(0x5fd)]('noise'),_0x34fe04['removeHorrorEffect']('glitch'),_0x34fe04[_0x36d070(0x5fd)]('tv'),_0x34fe04[_0x36d070(0x4f5)]();}}$gamePlayer[_0x36d070(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x7a0),_0x27f12c=>{const _0x4bef29=_0x4a80d9;if(!Imported[_0x4bef29(0x667)])return;if(!SceneManager[_0x4bef29(0x1f8)]())return;VisuMZ[_0x4bef29(0xb1e)](_0x27f12c,_0x27f12c);const _0x22fc8c=VisuMZ[_0x4bef29(0x12b)](_0x27f12c[_0x4bef29(0x302)]),_0x34fbde=_0x4bef29(0x7bb);_0x27f12c[_0x4bef29(0x4d0)]=Math['ceil'](_0x27f12c[_0x4bef29(0x426)]/0x2),_0x27f12c['sliceMax']=_0x27f12c[_0x4bef29(0x426)],_0x27f12c[_0x4bef29(0xc77)]=!![];for(const _0x3d8069 of _0x22fc8c){if('XcjqA'!==_0x4bef29(0x3ed)){_0x414163=_0xcd6a14[_0x4bef29(0xbe1)]['Game_Action_makeTargets'][_0x4bef29(0x432)](this);const _0x4e456a=_0x135767['BattleCore']['createKeyJS'](this[_0x4bef29(0x6af)](),_0x4bef29(0x302));return _0x192dc0=_0x4b1f38[_0x4bef29(0xbe1)]['JS'][_0x4e456a]['call'](this,this[_0x4bef29(0x1e3)](),_0x2c6773),this[_0x4bef29(0x295)](_0x5ed64d);}else{if(!_0x3d8069)continue;_0x3d8069[_0x4bef29(0x648)](_0x34fbde,_0x27f12c);}}$gamePlayer[_0x4bef29(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa85),_0x50229b=>{const _0x2de4c8=_0x4a80d9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x50229b,_0x50229b);const _0x19496a=VisuMZ['CreateActionSequenceTargets'](_0x50229b['Targets']);for(const _0x10a684 of _0x19496a){if(!_0x10a684)continue;_0x10a684[_0x2de4c8(0x5fd)](_0x2de4c8(0x7bb));}$gamePlayer[_0x2de4c8(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Horror_NoiseCreate',_0x57d0df=>{const _0x3b9000=_0x4a80d9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b9000(0xb1e)](_0x57d0df,_0x57d0df);const _0x21ea3a=VisuMZ['CreateActionSequenceTargets'](_0x57d0df[_0x3b9000(0x302)]),_0x1b61d5='noise';for(const _0x20912e of _0x21ea3a){if(!_0x20912e)continue;_0x20912e[_0x3b9000(0x648)](_0x1b61d5,_0x57d0df);}$gamePlayer[_0x3b9000(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0xb8d),_0x51be7d=>{const _0x47ebd2=_0x4a80d9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x47ebd2(0xb1e)](_0x51be7d,_0x51be7d);const _0x1e145a=VisuMZ[_0x47ebd2(0x12b)](_0x51be7d[_0x47ebd2(0x302)]);for(const _0x430e52 of _0x1e145a){if(!_0x430e52)continue;_0x430e52['removeHorrorEffect'](_0x47ebd2(0x55f));}$gamePlayer[_0x47ebd2(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Horror_TVCreate',_0x246a85=>{const _0x10e45c=_0x4a80d9;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x10e45c(0x1f8)]())return;VisuMZ[_0x10e45c(0xb1e)](_0x246a85,_0x246a85);const _0x5269df=VisuMZ[_0x10e45c(0x12b)](_0x246a85[_0x10e45c(0x302)]),_0x43104a='tv';for(const _0x290e79 of _0x5269df){if(_0x10e45c(0x4af)!==_0x10e45c(0x4af))this[_0x10e45c(0x93f)]=_0x5b152b;else{if(!_0x290e79)continue;_0x290e79['setHorrorEffectSettings'](_0x43104a,_0x246a85);}}$gamePlayer[_0x10e45c(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Horror_TVRemove',_0x2e6e9f=>{const _0x102c05=_0x4a80d9;if(!Imported[_0x102c05(0x667)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2e6e9f,_0x2e6e9f);const _0x980caa=VisuMZ['CreateActionSequenceTargets'](_0x2e6e9f[_0x102c05(0x302)]);for(const _0xc0eb4f of _0x980caa){if(_0x102c05(0xb34)===_0x102c05(0xb34)){if(!_0xc0eb4f)continue;_0xc0eb4f[_0x102c05(0x5fd)]('tv');}else _0x5a7821[_0x102c05(0xc0b)]=_0x215601,_0x3f3e16['bitmap']=_0x59eaf0,_0x3dfac3[_0x102c05(0x993)](),_0x1d6951[_0x102c05(0x993)]();}$gamePlayer[_0x102c05(0x1d6)]();}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x8ab),_0x53866e=>{const _0x4e1532=_0x4a80d9;if(!Imported[_0x4e1532(0x72a)])return;const _0x4e626d=SceneManager['_scene'][_0x4e1532(0x967)];if(!_0x4e626d)return;if(VisuMZ[_0x4e1532(0x689)][_0x4e1532(0xbdd)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x53866e,_0x53866e);const _0x3013f3=_0x53866e[_0x4e1532(0x242)];_0x4e626d[_0x4e1532(0x476)](_0x3013f3);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Impact_ColorBreak',_0x3b1fd8=>{const _0x48f991=_0x4a80d9;if(!SceneManager[_0x48f991(0x1f8)]())return;if(!Imported[_0x48f991(0x72a)])return;const _0x4d7a54=SceneManager[_0x48f991(0xb97)][_0x48f991(0x967)];if(!_0x4d7a54)return;VisuMZ['ConvertParams'](_0x3b1fd8,_0x3b1fd8);const _0x74ac6c=_0x3b1fd8[_0x48f991(0xaab)]||0x1,_0xcb4bd0=_0x3b1fd8[_0x48f991(0x9b6)]||0x1,_0x5b05a1=_0x3b1fd8['EasingType']||_0x48f991(0xa70);_0x4d7a54['setupRgbSplitImpactFilter'](_0x74ac6c,_0xcb4bd0,_0x5b05a1);}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0xbef),_0x31f777=>{const _0x5365f3=_0x4a80d9;if(!Imported[_0x5365f3(0x72a)])return;const _0x1f0b1a=SceneManager[_0x5365f3(0xb97)]['_spriteset'];if(!_0x1f0b1a)return;if(VisuMZ[_0x5365f3(0x689)][_0x5365f3(0xbdd)]<=1.04){if('sbBLt'===_0x5365f3(0x76c)){const _0x2d15e3=this[_0x5365f3(0x641)](_0x2c8dec);if(_0x2d15e3[_0x5365f3(0x605)](/\\I\[(\d+)\]/i)){const _0x42e0d0=this[_0x5365f3(0xcf8)](_0x5ae136),_0x1c76d0=this[_0x5365f3(0x475)](_0x2d15e3)[_0x5365f3(0x2ce)];return _0x1c76d0<=_0x42e0d0[_0x5365f3(0x2ce)]?'iconText':_0x5365f3(0x6db);}}else{alert(_0x5365f3(0x939)),SceneManager[_0x5365f3(0x628)]();return;}}VisuMZ[_0x5365f3(0xb1e)](_0x31f777,_0x31f777);const _0x4986b1=_0x31f777[_0x5365f3(0x242)];_0x1f0b1a[_0x5365f3(0xbeb)](_0x4986b1);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Impact_MotionBlurScreen',_0x6d7408=>{const _0x485927=_0x4a80d9;if(!SceneManager[_0x485927(0x1f8)]())return;if(!Imported[_0x485927(0x72a)])return;const _0x19a521=SceneManager['_scene']['_spriteset'];if(!_0x19a521)return;VisuMZ[_0x485927(0xb1e)](_0x6d7408,_0x6d7408);const _0x2950b8=Number(_0x6d7408[_0x485927(0x2e3)])||0x0,_0x932b22=Number(_0x6d7408['Rate']),_0x20272f=_0x6d7408[_0x485927(0x9b6)]||0x1,_0x40814f=_0x6d7408[_0x485927(0x5bd)]||_0x485927(0xa70);_0x19a521[_0x485927(0xc1f)](_0x2950b8,_0x932b22,_0x20272f,_0x40814f);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xbae),_0x16723a=>{const _0x6402d6=_0x4a80d9;if(!SceneManager[_0x6402d6(0x1f8)]())return;if(!Imported[_0x6402d6(0x72a)])return;const _0x1dd99c=SceneManager[_0x6402d6(0xb97)][_0x6402d6(0x967)];if(!_0x1dd99c)return;VisuMZ[_0x6402d6(0xb1e)](_0x16723a,_0x16723a);const _0x4793c9=Number(_0x16723a[_0x6402d6(0x2e3)])||0x0,_0x58b5ff=Number(_0x16723a[_0x6402d6(0x87d)]),_0x20ac44=_0x16723a[_0x6402d6(0x9b6)]||0x1,_0x58e256=_0x16723a[_0x6402d6(0x5bd)]||_0x6402d6(0xa70),_0x35bab8=VisuMZ[_0x6402d6(0x12b)](_0x16723a[_0x6402d6(0x302)]);for(const _0x49831d of _0x35bab8){if(!_0x49831d)continue;if(!_0x49831d[_0x6402d6(0x997)]())continue;_0x49831d[_0x6402d6(0x997)]()[_0x6402d6(0xc1f)](_0x4793c9,_0x58b5ff,_0x20ac44,_0x58e256);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Impact_MotionTrailCreate',_0x1ebbd5=>{const _0x363312=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x1ebbd5,_0x1ebbd5);const _0x4e62b={'delay':_0x1ebbd5[_0x363312(0x96d)],'duration':_0x1ebbd5[_0x363312(0x48f)],'hue':_0x1ebbd5[_0x363312(0x663)],'opacityStart':_0x1ebbd5[_0x363312(0x205)],'tone':_0x1ebbd5[_0x363312(0x6bf)],'visible':!![]},_0x2a73ca=VisuMZ[_0x363312(0x12b)](_0x1ebbd5[_0x363312(0x302)]);for(const _0x143f91 of _0x2a73ca){if('LToxK'!=='pzKnn'){if(!_0x143f91)continue;_0x143f91['setBattlerMotionTrailData'](_0x4e62b);}else this['push'](_0x363312(0x46f),_0x4891f3,_0x43e924);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xab5),_0x1a593=>{const _0x3b9f0c=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3b9f0c(0x72a)])return;VisuMZ[_0x3b9f0c(0xb1e)](_0x1a593,_0x1a593);const _0x37be1a=VisuMZ[_0x3b9f0c(0x12b)](_0x1a593[_0x3b9f0c(0x302)]);for(const _0x2356dc of _0x37be1a){if(!_0x2356dc)continue;_0x2356dc[_0x3b9f0c(0x47f)]();}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x256),_0x79d5b8=>{const _0xfbbbc9=_0x4a80d9;if(!Imported[_0xfbbbc9(0x72a)])return;const _0x56ae88=SceneManager[_0xfbbbc9(0xb97)][_0xfbbbc9(0x967)];if(!_0x56ae88)return;if(VisuMZ[_0xfbbbc9(0x689)][_0xfbbbc9(0xbdd)]<=1.04){alert(_0xfbbbc9(0x939)),SceneManager['exit']();return;}VisuMZ[_0xfbbbc9(0xb1e)](_0x79d5b8,_0x79d5b8);const _0x312d52=_0x79d5b8[_0xfbbbc9(0x242)];_0x56ae88[_0xfbbbc9(0xbd3)](_0x312d52);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Impact_Oversaturate',_0x301897=>{const _0x34ae8f=_0x4a80d9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xbbdf4e=SceneManager[_0x34ae8f(0xb97)][_0x34ae8f(0x967)];if(!_0xbbdf4e)return;if(VisuMZ['ActSeqImpact'][_0x34ae8f(0xbdd)]<=1.04){if(_0x34ae8f(0x23b)!==_0x34ae8f(0x68f)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x34ae8f(0x628)]();return;}else{if(!_0x14778e[_0x34ae8f(0x1f8)]())return;const _0xf9aa5a=this['battler']();if(!_0xf9aa5a)return;let _0x2cef1e=this['isActor']()?_0xf9aa5a[_0x34ae8f(0x550)]:_0xf9aa5a[_0x34ae8f(0x2ae)][_0x34ae8f(0x550)];_0x2cef1e&&_0x2cef1e[_0x34ae8f(0x622)](0x0);}}VisuMZ[_0x34ae8f(0xb1e)](_0x301897,_0x301897);const _0x38a177=_0x301897[_0x34ae8f(0x242)];_0xbbdf4e['setupOversaturateImpactFilter'](_0x38a177);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x814),_0x2d3d5f=>{const _0x20629c=_0x4a80d9;if(!Imported[_0x20629c(0x72a)])return;const _0x495e4f=SceneManager[_0x20629c(0xb97)][_0x20629c(0x967)];if(!_0x495e4f)return;VisuMZ['ConvertParams'](_0x2d3d5f,_0x2d3d5f);const _0x57eb80=_0x2d3d5f['X']||0x0,_0x35dc8b=_0x2d3d5f['Y']||0x0,_0x58e796=_0x2d3d5f['Amp']||0x0,_0x5e1799=_0x2d3d5f['Wave']||0x0,_0x4fef7e=_0x2d3d5f[_0x20629c(0x9b6)]||0x1;_0x495e4f[_0x20629c(0x4be)](_0x57eb80,_0x35dc8b,_0x58e796,_0x5e1799,_0x4fef7e);}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x629),_0x4c5e82=>{const _0x179787=_0x4a80d9;if(!SceneManager[_0x179787(0x1f8)]())return;if(!Imported[_0x179787(0x72a)])return;const _0x13fdd3=SceneManager['_scene'][_0x179787(0x967)];if(!_0x13fdd3)return;VisuMZ['ConvertParams'](_0x4c5e82,_0x4c5e82);const _0x28de6b=VisuMZ['CreateActionSequenceTargets'](_0x4c5e82[_0x179787(0x302)]),_0x2fd094=_0x4c5e82[_0x179787(0x568)],_0x57964f=_0x4c5e82[_0x179787(0x2b1)]||0x0,_0x1c4da3=_0x4c5e82[_0x179787(0x21f)]||0x0,_0xf5c448=_0x4c5e82['Amp']||0x0,_0x4d7a6c=_0x4c5e82['Wave']||0x0,_0x1049b7=_0x4c5e82[_0x179787(0x9b6)]||0x1;for(const _0x4d6f9a of _0x28de6b){if(_0x179787(0x5f6)==='WVKip'){if(!_0x4d6f9a)continue;if(!_0x4d6f9a['battler']())continue;const _0x76388=_0x4d6f9a[_0x179787(0x997)]();let _0x5d5e41=_0x76388[_0x179787(0x9ec)],_0x3d24ba=_0x76388[_0x179787(0x1d5)];_0x5d5e41+=(Graphics[_0x179787(0x2ce)]-Graphics[_0x179787(0x84d)])/0x2,_0x3d24ba+=(Graphics['height']-Graphics[_0x179787(0x91f)])/0x2;if(_0x2fd094[_0x179787(0x605)](/front/i))_0x5d5e41+=(_0x4d6f9a[_0x179787(0x494)]()?0x1:-0x1)*_0x76388[_0x179787(0x29a)]()/0x2;else _0x2fd094[_0x179787(0x605)](/back/i)&&(_0x5d5e41+=(_0x4d6f9a[_0x179787(0x494)]()?-0x1:0x1)*_0x76388[_0x179787(0x29a)]()/0x2);if(_0x2fd094[_0x179787(0x605)](/head/i))_0x3d24ba-=_0x76388['mainSpriteHeight']();else _0x2fd094[_0x179787(0x605)](/center/i)&&(_0x3d24ba-=_0x76388[_0x179787(0x33e)]()/0x2);_0x5d5e41+=_0x57964f,_0x3d24ba+=_0x1c4da3,_0x13fdd3[_0x179787(0x4be)](_0x5d5e41,_0x3d24ba,_0xf5c448,_0x4d7a6c,_0x1049b7);}else{const _0x43ff75=_0x591a06[_0x179787(0xbe1)][_0x179787(0x668)]['BattleLog'],_0x1bcc35=_0x495176[_0x179787(0x4ac)]();if(_0x43ff75['ShowAddedBuff'])this[_0x179787(0x1fc)](_0x2dded8,_0x1bcc35[_0x179787(0x226)],_0x4faea3['buffAdd']);if(_0x43ff75[_0x179787(0x263)])this[_0x179787(0x1fc)](_0x2cf3e9,_0x1bcc35[_0x179787(0x351)],_0x479ac7[_0x179787(0x264)]);if(_0x43ff75[_0x179787(0x167)])this[_0x179787(0x1fc)](_0x5df510,_0x1bcc35[_0x179787(0xb25)],_0xf2d5ec[_0x179787(0xc36)]);}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Impact_ShockwaveCenterTargets',_0x6c5901=>{const _0x39049e=_0x4a80d9;if(!SceneManager[_0x39049e(0x1f8)]())return;if(!Imported[_0x39049e(0x72a)])return;const _0x5644ae=SceneManager['_scene'][_0x39049e(0x967)];if(!_0x5644ae)return;VisuMZ[_0x39049e(0xb1e)](_0x6c5901,_0x6c5901);const _0x2871f3=VisuMZ['CreateActionSequenceTargets'](_0x6c5901['Targets']),_0x4369bb=_0x6c5901[_0x39049e(0x568)],_0xfbb663=_0x6c5901[_0x39049e(0x2b1)]||0x0,_0x4379ae=_0x6c5901['OffsetY']||0x0,_0x3365ed=_0x6c5901[_0x39049e(0x608)]||0x0,_0x47bd59=_0x6c5901[_0x39049e(0xc4d)]||0x0,_0x400220=_0x6c5901[_0x39049e(0x9b6)]||0x1,_0x4f7dc3=Math['min'](..._0x2871f3['map'](_0x1aea73=>_0x1aea73[_0x39049e(0x997)]()[_0x39049e(0x9ec)]-_0x1aea73[_0x39049e(0x997)]()[_0x39049e(0x29a)]()/0x2)),_0x384fb7=Math['max'](..._0x2871f3['map'](_0x557ee6=>_0x557ee6[_0x39049e(0x997)]()[_0x39049e(0x9ec)]+_0x557ee6[_0x39049e(0x997)]()['mainSpriteWidth']()/0x2)),_0x4de7c0=Math[_0x39049e(0x834)](..._0x2871f3[_0x39049e(0xc3f)](_0xf10460=>_0xf10460[_0x39049e(0x997)]()[_0x39049e(0x1d5)]-_0xf10460[_0x39049e(0x997)]()[_0x39049e(0x33e)]())),_0x4fec4a=Math[_0x39049e(0x78c)](..._0x2871f3['map'](_0x33748c=>_0x33748c[_0x39049e(0x997)]()[_0x39049e(0x1d5)])),_0x3fc8a1=_0x2871f3[_0x39049e(0x435)](_0x8dc6c4=>_0x8dc6c4[_0x39049e(0x172)]())[_0x39049e(0x6fc)],_0x2fce24=_0x2871f3['filter'](_0x11413f=>_0x11413f[_0x39049e(0x494)]())[_0x39049e(0x6fc)];let _0x586d1f=0x0,_0xe086c=0x0;if(_0x4369bb['match'](/front/i))_0x586d1f=_0x3fc8a1>=_0x2fce24?_0x4f7dc3:_0x384fb7;else{if(_0x4369bb[_0x39049e(0x605)](/middle/i))_0x39049e(0x1ff)!=='bQKlx'?(_0x586d1f=(_0x4f7dc3+_0x384fb7)/0x2,melee=-0x1):this[_0x39049e(0xa2e)](_0xf236bd,_0x28d615,_0x2ebe8a);else _0x4369bb['match'](/back/i)&&(_0x586d1f=_0x3fc8a1>=_0x2fce24?_0x384fb7:_0x4f7dc3);}if(_0x4369bb[_0x39049e(0x605)](/head/i))_0xe086c=_0x4de7c0;else{if(_0x4369bb[_0x39049e(0x605)](/center/i))_0xe086c=(_0x4de7c0+_0x4fec4a)/0x2;else _0x4369bb[_0x39049e(0x605)](/base/i)&&(_0xe086c=_0x4fec4a);}_0x586d1f+=(Graphics['width']-Graphics[_0x39049e(0x84d)])/0x2,_0xe086c+=(Graphics[_0x39049e(0x8dc)]-Graphics['boxHeight'])/0x2,_0x586d1f+=_0xfbb663,_0xe086c+=_0x4379ae,_0x5644ae[_0x39049e(0x4be)](_0x586d1f,_0xe086c,_0x3365ed,_0x47bd59,_0x400220);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x2ec),_0x4877b2=>{const _0x5ec2f6=_0x4a80d9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x11f791=SceneManager['_scene']['_spriteset'];if(!_0x11f791)return;if(VisuMZ[_0x5ec2f6(0x689)][_0x5ec2f6(0xbdd)]<=1.04){alert(_0x5ec2f6(0x939)),SceneManager[_0x5ec2f6(0x628)]();return;}VisuMZ[_0x5ec2f6(0xb1e)](_0x4877b2,_0x4877b2);const _0x38af94=$gameTemp[_0x5ec2f6(0xc05)](),_0x33ae73=Math[_0x5ec2f6(0x78c)](0.01,_0x4877b2['Scale']);$gameTemp[_0x5ec2f6(0x727)](_0x33ae73,_0x38af94);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x388),_0x272317=>{const _0x106b2c=_0x4a80d9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x555b75=SceneManager[_0x106b2c(0xb97)][_0x106b2c(0x967)];if(!_0x555b75)return;if(VisuMZ[_0x106b2c(0x689)][_0x106b2c(0xbdd)]<=1.04){alert(_0x106b2c(0x939)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x272317,_0x272317);const _0x5beeba=$gameTemp[_0x106b2c(0xc05)](),_0x3710c5=_0x272317['ms']||0x1;VisuMZ[_0x106b2c(0x689)][_0x106b2c(0x5e9)](_0x3710c5,_0x5beeba);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Impact_ZoomBlurPoint',_0x85ec51=>{const _0x3b3e12=_0x4a80d9;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3c5df8=SceneManager[_0x3b3e12(0xb97)][_0x3b3e12(0x967)];if(!_0x3c5df8)return;VisuMZ[_0x3b3e12(0xb1e)](_0x85ec51,_0x85ec51);const _0x3ab50f=_0x85ec51['X']||0x0,_0x1e1e82=_0x85ec51['Y']||0x0,_0x25ab64=_0x85ec51[_0x3b3e12(0x722)]||0x0,_0x5c1e6d=_0x85ec51[_0x3b3e12(0x5ac)]||0x0,_0x2fcfd0=_0x85ec51['Duration']||0x1,_0x2a3217=_0x85ec51[_0x3b3e12(0x5bd)]||_0x3b3e12(0xa70);_0x3c5df8['setupZoomBlurImpactFilter'](_0x25ab64,_0x3ab50f,_0x1e1e82,_0x5c1e6d,_0x2fcfd0,_0x2a3217);}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Impact_ZoomBlurTargetCenter',_0x376723=>{const _0x28a296=_0x4a80d9;if(!Imported[_0x28a296(0x72a)])return;const _0x5cffed=SceneManager[_0x28a296(0xb97)][_0x28a296(0x967)];if(!_0x5cffed)return;VisuMZ['ConvertParams'](_0x376723,_0x376723);const _0x47cdbb=VisuMZ[_0x28a296(0x12b)](_0x376723[_0x28a296(0x302)]),_0x331697=_0x376723[_0x28a296(0x568)],_0x615efa=_0x376723[_0x28a296(0x2b1)]||0x0,_0x43d8d8=_0x376723['OffsetY']||0x0,_0x3daf55=_0x376723[_0x28a296(0x722)]||0x0,_0x488839=_0x376723['Radius']||0x0,_0x5c40e0=_0x376723[_0x28a296(0x9b6)]||0x1,_0xfa85f5=_0x376723[_0x28a296(0x5bd)]||_0x28a296(0xa70),_0x46e406=Math['min'](..._0x47cdbb['map'](_0x5c1627=>_0x5c1627[_0x28a296(0x997)]()[_0x28a296(0x9ec)]-_0x5c1627[_0x28a296(0x997)]()[_0x28a296(0x29a)]()/0x2)),_0x2c2984=Math['max'](..._0x47cdbb[_0x28a296(0xc3f)](_0x4c5b45=>_0x4c5b45[_0x28a296(0x997)]()['_baseX']+_0x4c5b45[_0x28a296(0x997)]()[_0x28a296(0x29a)]()/0x2)),_0x28a7a6=Math[_0x28a296(0x834)](..._0x47cdbb[_0x28a296(0xc3f)](_0x29fa04=>_0x29fa04['battler']()['_baseY']-_0x29fa04[_0x28a296(0x997)]()[_0x28a296(0x33e)]())),_0x3f1e17=Math[_0x28a296(0x78c)](..._0x47cdbb[_0x28a296(0xc3f)](_0xc50982=>_0xc50982[_0x28a296(0x997)]()[_0x28a296(0x1d5)])),_0x33a270=_0x47cdbb[_0x28a296(0x435)](_0x473281=>_0x473281[_0x28a296(0x172)]())['length'],_0x379dea=_0x47cdbb['filter'](_0x1063d1=>_0x1063d1[_0x28a296(0x494)]())[_0x28a296(0x6fc)];let _0x2a1847=0x0,_0x3d2cdf=0x0;if(_0x331697[_0x28a296(0x605)](/front/i))_0x2a1847=_0x33a270>=_0x379dea?_0x46e406:_0x2c2984;else{if(_0x331697[_0x28a296(0x605)](/middle/i))_0x2a1847=(_0x46e406+_0x2c2984)/0x2,melee=-0x1;else{if(_0x331697[_0x28a296(0x605)](/back/i)){if(_0x28a296(0x185)!==_0x28a296(0x1ea))_0x2a1847=_0x33a270>=_0x379dea?_0x2c2984:_0x46e406;else{if(!this[_0x28a296(0x588)]())return![];return _0x1a2d2d['BattleCore'][_0x28a296(0x965)]['call'](this);}}}}if(_0x331697[_0x28a296(0x605)](/head/i))'VAmhr'!==_0x28a296(0xc5a)?_0x3d2cdf=_0x28a7a6:_0xb53b1[_0x28a296(0x11b)]?this['_forcedBattleLayout']='frontview_ui':this[_0x28a296(0x93f)]=_0x28a296(0x7e5);else{if(_0x331697[_0x28a296(0x605)](/center/i))_0x28a296(0xa90)!==_0x28a296(0xa90)?this[_0x28a296(0xbaa)](_0x28a296(0x162)):_0x3d2cdf=(_0x28a7a6+_0x3f1e17)/0x2;else _0x331697[_0x28a296(0x605)](/base/i)&&(_0x28a296(0x72f)==='dwOlh'?_0x4f5b52[_0x28a296(0xae6)]():_0x3d2cdf=_0x3f1e17);}_0x2a1847+=(Graphics[_0x28a296(0x2ce)]-Graphics['boxWidth'])/0x2,_0x3d2cdf+=(Graphics[_0x28a296(0x8dc)]-Graphics[_0x28a296(0x91f)])/0x2,_0x2a1847+=_0x615efa,_0x3d2cdf+=_0x43d8d8,_0x5cffed[_0x28a296(0x658)](_0x3daf55,_0x2a1847,_0x3d2cdf,_0x488839,_0x5c40e0,_0xfa85f5);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x294),_0x32104b=>{const _0x1ab15b=_0x4a80d9;if(!Imported[_0x1ab15b(0x72a)])return;const _0x1f457b=SceneManager[_0x1ab15b(0xb97)]['_spriteset'];if(!_0x1f457b)return;if(VisuMZ['ActSeqImpact'][_0x1ab15b(0xbdd)]<=1.05){if('xJxmJ'===_0x1ab15b(0x27d))return _0x25ce8e[_0x1ab15b(0xbe1)][_0x1ab15b(0x668)][_0x1ab15b(0x6ea)][_0x1ab15b(0xcdf)][_0x1ab15b(0x432)](this,_0x41b3c8,_0x1c2db4);else{alert(_0x1ab15b(0x939)),SceneManager['exit']();return;}}VisuMZ['ConvertParams'](_0x32104b,_0x32104b);const _0x153a37=VisuMZ[_0x1ab15b(0x12b)](_0x32104b['Targets']),_0x1da995={'filename':_0x32104b[_0x1ab15b(0xc29)],'horzCells':_0x32104b[_0x1ab15b(0xca9)]||0x1,'vertCells':_0x32104b[_0x1ab15b(0x6c2)]||0x1,'frameDelay':_0x32104b[_0x1ab15b(0x7a5)]||0x1,'smooth':_0x32104b['smooth']||![],'anchorX':_0x32104b[_0x1ab15b(0xcc7)]||0x0,'anchorY':_0x32104b[_0x1ab15b(0x7e9)]||0x0,'offsetX':_0x32104b[_0x1ab15b(0x5f4)]||0x0,'offsetY':_0x32104b[_0x1ab15b(0xb96)]||0x0};for(const _0x57fc09 of _0x153a37){if(_0x1ab15b(0x5b3)===_0x1ab15b(0x3a9)){if(!_0x1e2e3d[_0x1ab15b(0x1f8)]())return;if(!_0x219f5d[_0x1ab15b(0x620)])return;if(!_0x45b482[_0x1ab15b(0x2cd)]())return;_0x13c84f[_0x1ab15b(0xb1e)](_0x10d325,_0x4bce34);const _0x5525e1=_0x5bed38[_0x1ab15b(0x139)][_0x1ab15b(0x6f9)](),_0x5e1386=_0x242af3[_0x1ab15b(0x56a)],_0x1d1d87=_0x5311d5[_0x1ab15b(0x813)]||'unchanged',_0x1289ff=_0x10d637[_0x1ab15b(0x130)]||_0x1ab15b(0x601),_0x571150=_0x2a94ef[_0x1ab15b(0xbcf)]||0x0,_0x4916c0=_0x1b4da9['alterPriority']||0x0;(_0x5525e1[_0x1ab15b(0x491)]()||_0x5e1386)&&(_0x5e1386&&(_0x5525e1[_0x1ab15b(0xae7)]=_0x5525e1[_0x1ab15b(0xae7)]||{},_0x5525e1[_0x1ab15b(0xae7)]['priority']=0x0),_0x5525e1['alterActionCostPTB'](_0x1d1d87,_0x1289ff,_0x571150,_0x4916c0));}else{if(!_0x57fc09)continue;if(!_0x57fc09['battler']())continue;_0x57fc09[_0x1ab15b(0x997)]()[_0x1ab15b(0xc46)](_0x1da995);}}const _0x555213=$gameTemp[_0x1ab15b(0xc05)]();_0x555213&&_0x555213[_0x1ab15b(0xbaa)](_0x1ab15b(0x183));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x1e6),_0x347e27=>{const _0x1c2d75=_0x4a80d9;if(!Imported[_0x1c2d75(0x72a)])return;const _0x38255f=SceneManager[_0x1c2d75(0xb97)]['_spriteset'];if(!_0x38255f)return;if(VisuMZ['ActSeqImpact'][_0x1c2d75(0xbdd)]<=1.05){if(_0x1c2d75(0x4e6)==='ywIrv'){alert(_0x1c2d75(0x939)),SceneManager[_0x1c2d75(0x628)]();return;}else this[_0x1c2d75(0x7ba)](),this['_currentActor']=null,this['_inputting']=![];}VisuMZ[_0x1c2d75(0xb1e)](_0x347e27,_0x347e27);const _0x2ce8e3=VisuMZ[_0x1c2d75(0x12b)](_0x347e27[_0x1c2d75(0x302)]);for(const _0x2c0a07 of _0x2ce8e3){if(!_0x2c0a07)continue;if(!_0x2c0a07[_0x1c2d75(0x997)]())continue;_0x2c0a07['battler']()[_0x1c2d75(0xc69)]();}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa27),_0x307c68=>{const _0x5daae3=_0x4a80d9;if(!Imported[_0x5daae3(0x72a)])return;const _0x343c87=SceneManager[_0x5daae3(0xb97)][_0x5daae3(0x967)];if(!_0x343c87)return;if(VisuMZ[_0x5daae3(0x689)][_0x5daae3(0xbdd)]<=1.05){if('JhUtr'!==_0x5daae3(0xb07))this[_0x5daae3(0xbc6)]=_0x1dbe9f['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x3377a6[_0x5daae3(0x4a9)]);else{alert(_0x5daae3(0x939)),SceneManager[_0x5daae3(0x628)]();return;}}VisuMZ[_0x5daae3(0xb1e)](_0x307c68,_0x307c68);const _0x284eb0=VisuMZ[_0x5daae3(0x12b)](_0x307c68[_0x5daae3(0x302)]),_0x4cc347=_0x307c68['pause'];for(const _0x2b2900 of _0x284eb0){if(_0x5daae3(0xaa6)===_0x5daae3(0xaa6)){if(!_0x2b2900)continue;if(!_0x2b2900[_0x5daae3(0x997)]())continue;_0x2b2900[_0x5daae3(0x997)]()[_0x5daae3(0x92a)](_0x4cc347);}else return _0x2736bf[_0x5daae3(0x84d)];}}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0xa58),_0x1d5d0a=>{const _0x324d2f=_0x4a80d9;if(!SceneManager[_0x324d2f(0x1f8)]())return;const _0x4b8fd6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4b8fd6)return;_0x4b8fd6[_0x324d2f(0xbaa)](_0x324d2f(0x70d));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x26f),_0x8fab5c=>{const _0x22b0d8=_0x4a80d9;if(!SceneManager[_0x22b0d8(0x1f8)]())return;VisuMZ[_0x22b0d8(0xb1e)](_0x8fab5c,_0x8fab5c);const _0xce25f2=$gameTemp[_0x22b0d8(0xc05)](),_0xa15b06=BattleManager[_0x22b0d8(0x287)],_0x4662c5=BattleManager[_0x22b0d8(0x139)],_0xcd4a1b=BattleManager['_logWindow'];if(!_0xce25f2||!_0xa15b06||!_0x4662c5)return;if(!_0xa15b06[_0x22b0d8(0x6af)]())return;const _0x446b21=VisuMZ['CreateActionSequenceTargets'](_0x8fab5c[_0x22b0d8(0x302)]);for(const _0x8d5ce8 of _0x446b21){if(!_0x8d5ce8)continue;_0xcd4a1b['push'](_0x22b0d8(0x7a4),_0x4662c5,_0x8d5ce8);}_0xce25f2['setWaitMode'](_0x22b0d8(0xcdb));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x9ee),_0x58a1e7=>{const _0x4c34a1=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4c34a1(0xcc8)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x361),_0x148abb=>{const _0x184503=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x148abb,_0x148abb);const _0x35efd5=[_0x184503(0x6da),_0x184503(0x4b4),_0x184503(0xc75),_0x184503(0x63f),_0x184503(0x17d),_0x184503(0xa8e),'AGI',_0x184503(0x757)],_0x50eda4=_0x148abb[_0x184503(0xaf7)],_0x5a1cbd=_0x148abb[_0x184503(0x640)],_0x2211ff=_0x148abb[_0x184503(0xa25)],_0xee7e1d=VisuMZ[_0x184503(0x12b)](_0x148abb['Targets']);for(const _0x5a570c of _0xee7e1d){if('uahCA'!==_0x184503(0x1df))return _0x2e9dd4[_0x184503(0xcf3)]&&_0x11af55[_0x184503(0x890)][_0x184503(0xcf9)]('['+_0x1259b3+']');else{if(!_0x5a570c)continue;for(const _0x35352b of _0x50eda4){const _0x2dfe70=_0x35efd5[_0x184503(0x699)](_0x35352b['toUpperCase']()[_0x184503(0x893)]());if(_0x2dfe70>=0x0&&_0x2dfe70<=0x7){if(_0x184503(0x72d)!==_0x184503(0x36c))_0x5a570c['addBuff'](_0x2dfe70,_0x2211ff);else{const _0xfc1afa=_0x4057e5[_0x184503(0x642)]();if(_0xfc1afa)_0xfc1afa[_0x184503(0xa64)](_0x184503(0xa98));this[_0x184503(0x9fd)]();}}}for(const _0x1fa886 of _0x5a1cbd){const _0x1e09c9=_0x35efd5['indexOf'](_0x1fa886['toUpperCase']()[_0x184503(0x893)]());_0x1e09c9>=0x0&&_0x1e09c9<=0x7&&_0x5a570c[_0x184503(0x7fa)](_0x1e09c9,_0x2211ff);}}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xb35),_0x4ff2f8=>{const _0xe2ca0=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe2ca0(0xb1e)](_0x4ff2f8,_0x4ff2f8);const _0x18503a=_0x4ff2f8['States'],_0x5e5842=VisuMZ[_0xe2ca0(0x12b)](_0x4ff2f8[_0xe2ca0(0x302)]);for(const _0x163a51 of _0x5e5842){if(!_0x163a51)continue;for(const _0x3c23d7 of _0x18503a){_0x163a51[_0xe2ca0(0xb9d)](_0x3c23d7);}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x4ce6ee=>{const _0x25cfe2=_0x4a80d9;if(!SceneManager[_0x25cfe2(0x1f8)]())return;VisuMZ[_0x25cfe2(0xb1e)](_0x4ce6ee,_0x4ce6ee);const _0x5a03b9=BattleManager[_0x25cfe2(0x287)],_0x499ccf={'arPenRate':_0x4ce6ee['ArPenRate'],'arPenFlat':_0x4ce6ee['ArPenFlat'],'arRedRate':_0x4ce6ee['ArRedRate'],'arRedFlat':_0x4ce6ee['ArRedFlat']};_0x5a03b9[_0x25cfe2(0x440)]=_0x499ccf;}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_AnalyzeWeakness',_0x580dd1=>{const _0x25156b=_0x4a80d9;if(!SceneManager[_0x25156b(0x1f8)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x580dd1,_0x580dd1);const _0xb3e87e=VisuMZ[_0x25156b(0x12b)](_0x580dd1[_0x25156b(0x302)]),_0x4f063a=_0x580dd1[_0x25156b(0x86f)]||0x1;for(const _0xcd358b of _0xb3e87e){if(!_0xcd358b)continue;if(!_0xcd358b[_0x25156b(0x494)]())continue;_0xcd358b['revealNewWeaknesses'](_0x4f063a);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x5ed),_0x4b0bd6=>{const _0x399027=_0x4a80d9;if(!SceneManager[_0x399027(0x1f8)]())return;if(!Imported[_0x399027(0x687)])return;if(!BattleManager[_0x399027(0x235)]())return;VisuMZ[_0x399027(0xb1e)](_0x4b0bd6,_0x4b0bd6);const _0x895c4d=VisuMZ[_0x399027(0x12b)](_0x4b0bd6[_0x399027(0x302)]),_0x58078a=_0x4b0bd6['ChargeRate'],_0x33c30f=_0x4b0bd6[_0x399027(0x1fe)],_0x254c41=_0x4b0bd6[_0x399027(0x4f2)];for(const _0x1a673e of _0x895c4d){if(!_0x1a673e)continue;if(_0x1a673e[_0x399027(0x99c)]())_0x1a673e[_0x399027(0x83d)](_0x58078a);else{if(_0x1a673e[_0x399027(0x7cc)]()){if(_0x399027(0x212)===_0x399027(0x212)){_0x1a673e[_0x399027(0x907)](_0x33c30f);if(_0x254c41)_0x1a673e['atbInterrupt']();}else this[_0x399027(0x505)]()?(this[_0x399027(0x989)][_0x399027(0x3a5)](),this[_0x399027(0xcc2)]['hide'](),this[_0x399027(0x5bc)]['activate']()):_0x208a96[_0x399027(0xbe1)][_0x399027(0x881)]['call'](this),this['cancelTargetSelectionVisibility']();}}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xb17),_0x1693be=>{const _0x33af49=_0x4a80d9;if(!SceneManager[_0x33af49(0x1f8)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x33af49(0xb1e)](_0x1693be,_0x1693be);const _0x1f9a31=VisuMZ['CreateActionSequenceTargets'](_0x1693be[_0x33af49(0x302)]),_0x3f7477=_0x1693be[_0x33af49(0x75c)];for(const _0x4a8e18 of _0x1f9a31){if(!_0x4a8e18)continue;_0x4a8e18[_0x33af49(0x518)](_0x3f7477);}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x243),_0x14b06e=>{const _0x4b15cb=_0x4a80d9;if(!SceneManager[_0x4b15cb(0x1f8)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x4b15cb(0x139)])return;VisuMZ[_0x4b15cb(0xb1e)](_0x14b06e,_0x14b06e);const _0x1b6422=_0x14b06e[_0x4b15cb(0x7f2)];$gameVariables['setValue'](_0x1b6422,BattleManager[_0x4b15cb(0x139)][_0x4b15cb(0x57e)]());}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x434),_0x334bca=>{const _0x2915d5=_0x4a80d9;if(!SceneManager[_0x2915d5(0x1f8)]())return;if(!Imported[_0x2915d5(0x80b)])return;VisuMZ[_0x2915d5(0xb1e)](_0x334bca,_0x334bca);const _0x22a141=VisuMZ[_0x2915d5(0x12b)](_0x334bca['Targets']),_0x22e616=_0x334bca[_0x2915d5(0x3a7)];for(const _0x2cd357 of _0x22a141){if('TDZdi'!==_0x2915d5(0x96a))_0x7f1998=![];else{if(!_0x2cd357)continue;if(_0x2cd357[_0x2915d5(0x7b2)]())continue;if(!_0x2cd357[_0x2915d5(0x190)]())continue;_0x2cd357['alterBreakShield'](_0x22e616);}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x838),_0xf29fb7=>{const _0x2436e1=_0x4a80d9;if(!SceneManager[_0x2436e1(0x1f8)]())return;if(!Imported[_0x2436e1(0x80b)])return;VisuMZ[_0x2436e1(0xb1e)](_0xf29fb7,_0xf29fb7);const _0x44a0ba=VisuMZ[_0x2436e1(0x12b)](_0xf29fb7[_0x2436e1(0x302)]);for(const _0x3cb494 of _0x44a0ba){if(_0x2436e1(0x826)===_0x2436e1(0x826)){if(!_0x3cb494)continue;if(_0x3cb494[_0x2436e1(0x7b2)]())continue;if(!_0x3cb494[_0x2436e1(0x190)]())continue;_0x3cb494[_0x2436e1(0xa7e)]();}else{if(this[_0x2436e1(0x222)])return;}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x46c),_0xf8dbfa=>{const _0x4d22e3=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x4d22e3(0xbb9)]())return;VisuMZ[_0x4d22e3(0xb1e)](_0xf8dbfa,_0xf8dbfa);const _0x59412c=VisuMZ['CreateActionSequenceTargets'](_0xf8dbfa[_0x4d22e3(0x302)]),_0x16e9e8=_0xf8dbfa[_0x4d22e3(0x6c3)];for(const _0x20a7a7 of _0x59412c){if(!_0x20a7a7)continue;_0x20a7a7[_0x4d22e3(0x495)](_0x16e9e8);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x734),_0x291b79=>{const _0x39c83c=_0x4a80d9;if(!SceneManager[_0x39c83c(0x1f8)]())return;VisuMZ['ConvertParams'](_0x291b79,_0x291b79);const _0x2c6314=$gameTemp[_0x39c83c(0xc05)](),_0x1aaf81=BattleManager[_0x39c83c(0x287)],_0x1058ae=BattleManager[_0x39c83c(0x139)];if(!_0x2c6314||!_0x1aaf81||!_0x1058ae)return;if(!_0x1aaf81['item']())return;const _0x4d835a=VisuMZ[_0x39c83c(0x12b)](_0x291b79['Targets']);for(const _0x5a8e34 of _0x4d835a){if('skpuN'!==_0x39c83c(0xc2d)){if(!_0x5a8e34)continue;_0x291b79['ForceDeath']&&(_0x39c83c(0x817)!=='TfiOH'?(this[_0x39c83c(0x5ae)]['x']=_0x2ff8ae[_0x39c83c(0x584)](this['_shakeFlinchPower'])*(_0x2598a1[_0x39c83c(0xa62)]()<0.5?-0x1:0x1),this[_0x39c83c(0x1d5)]!==this['y']&&(this['_mainSprite']['y']=this[_0x39c83c(0x8dc)]*0.5,this[_0x39c83c(0x5ae)]['y']+=_0x3f9780[_0x39c83c(0x584)](this[_0x39c83c(0x66c)])*(_0x3a3b20[_0x39c83c(0xa62)]()<0.5?-0x1:0x1))):(_0x5a8e34[_0x39c83c(0x445)](),_0x5a8e34[_0x39c83c(0xb9d)](_0x5a8e34[_0x39c83c(0x3c3)]()))),_0x5a8e34[_0x39c83c(0x66e)]()&&(_0x39c83c(0x6e7)!==_0x39c83c(0x6e7)?this[_0x39c83c(0x7fe)]-=0x10:_0x5a8e34[_0x39c83c(0x748)]());}else{_0x2a1fbe[_0x39c83c(0x907)](_0x475a4b);if(_0x322c25)_0x2b5a23['atbInterrupt']();}}_0x2c6314['setWaitMode'](_0x39c83c(0xd03));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xbfc),_0x4c2df0=>{const _0x4d6b08=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x4d6b08(0xb1e)](_0x4c2df0,_0x4c2df0);const _0x138c03=VisuMZ[_0x4d6b08(0x12b)](_0x4c2df0[_0x4d6b08(0x302)]),_0x1ec3c8=_0x4c2df0[_0x4d6b08(0x5b5)];for(const _0x269a99 of _0x138c03){if(!_0x269a99)continue;_0x269a99[_0x4d6b08(0x551)](_0x1ec3c8);}}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0xbff),_0x4b5235=>{const _0x227685=_0x4a80d9;if(!SceneManager[_0x227685(0x1f8)]())return;if(!Imported[_0x227685(0xbd4)])return;if(!BattleManager[_0x227685(0x963)]())return;VisuMZ[_0x227685(0xb1e)](_0x4b5235,_0x4b5235);const _0x4d498d=VisuMZ[_0x227685(0x12b)](_0x4b5235[_0x227685(0x302)]),_0x40c38a=_0x4b5235[_0x227685(0x1fe)],_0x1c6df2=_0x4b5235['ChargeRate'];for(const _0x436d10 of _0x4d498d){if(_0x227685(0x5a0)!==_0x227685(0x7aa)){if(!_0x436d10)continue;if(_0x436d10['_tpbState']===_0x227685(0x887))_0x436d10[_0x227685(0xaaa)](_0x40c38a);else{if(_0x436d10[_0x227685(0x6ac)]===_0x227685(0x53c)){if(_0x227685(0x8f1)===_0x227685(0x716)){const _0x3f492c=this['battler']();if(_0x3f492c)_0x3f492c[_0x227685(0x38a)](_0x385f3f);}else _0x436d10[_0x227685(0x756)](_0x1c6df2);}}}else this[_0x227685(0x736)]('sleep');}}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x742),_0x19d3c5=>{const _0x5e5f20=_0x4a80d9;if(!SceneManager[_0x5e5f20(0x1f8)]())return;VisuMZ['ConvertParams'](_0x19d3c5,_0x19d3c5);const _0x48c5e8=BattleManager[_0x5e5f20(0x287)];if(!_0x48c5e8)return;let _0x4bea5a=_0x19d3c5[_0x5e5f20(0x30d)];_0x48c5e8[_0x5e5f20(0x4df)](_0x4bea5a);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_DamagePopup',_0x4bc925=>{const _0x1841c2=_0x4a80d9;if(!SceneManager[_0x1841c2(0x1f8)]())return;VisuMZ[_0x1841c2(0xb1e)](_0x4bc925,_0x4bc925);const _0x17d014=VisuMZ['CreateActionSequenceTargets'](_0x4bc925[_0x1841c2(0x302)]);for(const _0x222ef5 of _0x17d014){if(!_0x222ef5)continue;if(_0x222ef5[_0x1841c2(0x1b5)]())_0x222ef5['startDamagePopup']();}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x32c),_0x461924=>{const _0x553430=_0x4a80d9;if(!SceneManager[_0x553430(0x1f8)]())return;VisuMZ[_0x553430(0xb1e)](_0x461924,_0x461924);const _0x503356=$gameTemp[_0x553430(0xc05)](),_0x5df380=BattleManager[_0x553430(0x139)],_0x326ec3=_0x461924['JumpToLabel'];if(!_0x503356)return;if(!_0x5df380)return;_0x5df380&&_0x5df380[_0x553430(0x50b)]()&&_0x326ec3[_0x553430(0x7ff)]()['trim']()!=='UNTITLED'&&_0x503356[_0x553430(0x8f7)]([_0x326ec3]);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_EnemyEscape',_0x3ec01d=>{const _0x1aec84=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1aec84(0xb1e)](_0x3ec01d,_0x3ec01d);const _0x179122=VisuMZ[_0x1aec84(0x12b)](_0x3ec01d['Targets']);for(const _0x589ec2 of _0x179122){if(!_0x589ec2)continue;if(!_0x589ec2[_0x1aec84(0x494)]())continue;_0x589ec2[_0x1aec84(0xc41)]();}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xac6),_0x39a056=>{const _0x30baf4=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30baf4(0x9ae)])return;if(!BattleManager[_0x30baf4(0x996)]())return;VisuMZ[_0x30baf4(0xb1e)](_0x39a056,_0x39a056);const _0xab6448=_0x39a056[_0x30baf4(0x9c5)];if(BattleManager[_0x30baf4(0x139)]){if(_0x30baf4(0x497)!=='VwDEp')BattleManager['_subject'][_0x30baf4(0x6f9)]()[_0x30baf4(0x9e2)](_0xab6448);else return _0x3a3a31[_0x30baf4(0x8a7)]();}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_FtbAction',_0x58cc0d=>{const _0x5f2df9=_0x4a80d9;if(!SceneManager[_0x5f2df9(0x1f8)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x5f2df9(0x799)]())return;VisuMZ[_0x5f2df9(0xb1e)](_0x58cc0d,_0x58cc0d);const _0x537a36=_0x58cc0d[_0x5f2df9(0x9c5)];if(BattleManager[_0x5f2df9(0x139)]){if(_0x5f2df9(0xa29)===_0x5f2df9(0xa29))BattleManager[_0x5f2df9(0x139)][_0x5f2df9(0x6f9)]()[_0x5f2df9(0x129)](_0x537a36);else{const _0x1de585=this[_0x5f2df9(0x997)]();_0x1de585&&_0x1de585[_0x5f2df9(0xa6b)]();}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x7be),_0x5064a1=>{const _0x3d877d=_0x4a80d9;if(!SceneManager[_0x3d877d(0x1f8)]())return;VisuMZ[_0x3d877d(0xb1e)](_0x5064a1,_0x5064a1);const _0x258a3a=VisuMZ[_0x3d877d(0x12b)](_0x5064a1[_0x3d877d(0x302)]),_0x54845b=_0x5064a1[_0x3d877d(0xb20)],_0x59afc2=_0x5064a1[_0x3d877d(0x9bb)],_0x5e42a6=_0x5064a1['MP_Rate'],_0x31bca5=_0x5064a1['MP_Flat'],_0x5ac096=_0x5064a1['TP_Rate'],_0x304e5e=_0x5064a1[_0x3d877d(0xb00)],_0xf116fe=_0x5064a1[_0x3d877d(0xb3f)];for(const _0x5d20ee of _0x258a3a){if('OjRHn'===_0x3d877d(0x1d0))_0x3de2a1=(_0x5a04f8+_0x17fe08)/0x2,_0x3249ca=-0x1;else{if(!_0x5d20ee)continue;const _0x394d69=_0x5d20ee['isAlive'](),_0xe4024d=Math['round'](_0x54845b*_0x5d20ee['mhp']+_0x59afc2),_0x1f94d1=Math[_0x3d877d(0x961)](_0x5e42a6*_0x5d20ee['mmp']+_0x31bca5),_0x16a125=Math[_0x3d877d(0x961)](_0x5ac096*_0x5d20ee[_0x3d877d(0x7d8)]()+_0x304e5e);if(_0xe4024d!==0x0)_0x5d20ee[_0x3d877d(0x65a)](_0xe4024d);if(_0x1f94d1!==0x0)_0x5d20ee[_0x3d877d(0x554)](_0x1f94d1);if(_0x16a125!==0x0)_0x5d20ee[_0x3d877d(0x389)](_0x16a125);if(_0xf116fe)_0x5d20ee[_0x3d877d(0x101)]();_0x394d69&&_0x5d20ee[_0x3d877d(0x50b)]()&&(_0x3d877d(0x683)!=='hPClj'?_0x87460[_0x3d877d(0x308)]('undecided'):_0x5d20ee['performCollapse']());}}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xaa0),_0x7f9597=>{const _0x204b70=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x204b70(0xb1e)](_0x7f9597,_0x7f9597);const _0x211bcb=VisuMZ[_0x204b70(0x12b)](_0x7f9597[_0x204b70(0x302)]);for(const _0x5aae47 of _0x211bcb){if(!_0x5aae47)continue;_0x5aae47[_0x204b70(0x349)](_0x7f9597[_0x204b70(0x558)]);}}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x659),_0x50c425=>{const _0x100fc0=_0x4a80d9;if(!SceneManager[_0x100fc0(0x1f8)]())return;VisuMZ[_0x100fc0(0xb1e)](_0x50c425,_0x50c425);const _0x2f360c=BattleManager[_0x100fc0(0x287)],_0xdfa684={'criticalHitRate':_0x50c425[_0x100fc0(0xa86)],'criticalHitFlat':_0x50c425[_0x100fc0(0x95d)],'criticalDmgRate':_0x50c425[_0x100fc0(0x422)],'criticalDmgFlat':_0x50c425['CriticalDmgFlat'],'damageRate':_0x50c425['DamageRate'],'damageFlat':_0x50c425['DamageFlat'],'hitRate':_0x50c425[_0x100fc0(0xc34)],'hitFlat':_0x50c425[_0x100fc0(0xa81)]};_0x2f360c[_0x100fc0(0x2e0)]=_0xdfa684;}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x1b3),_0x53ba05=>{const _0x2971f2=_0x4a80d9;if(!SceneManager[_0x2971f2(0x1f8)]())return;VisuMZ[_0x2971f2(0xb1e)](_0x53ba05,_0x53ba05);const _0xfd0060=_0x53ba05[_0x2971f2(0xd00)];SceneManager[_0x2971f2(0xb97)][_0x2971f2(0xb2c)](_0xfd0060);}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xc01),_0xee6d0=>{const _0x3c9a7e=_0x4a80d9;if(!SceneManager[_0x3c9a7e(0x1f8)]())return;if(!Imported[_0x3c9a7e(0x7b4)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x3c9a7e(0xb1e)](_0xee6d0,_0xee6d0);const _0xd13d89=VisuMZ[_0x3c9a7e(0x12b)](_0xee6d0[_0x3c9a7e(0x302)]);for(const _0x7fee04 of _0xd13d89){if(!_0x7fee04)continue;let _0x5d0d65=_0xee6d0[_0x3c9a7e(0x210)],_0x372510=_0xee6d0['NextTurn'],_0x219787=_0xee6d0[_0x3c9a7e(0xa3b)];if(BattleManager['_actionBattlers'][_0x3c9a7e(0xcf9)](_0x7fee04))_0x3c9a7e(0x504)===_0x3c9a7e(0x504)?_0x5d0d65+=_0x219787:_0x52a30d[_0x3c9a7e(0xbe1)]['Settings'][_0x3c9a7e(0x916)][_0x3c9a7e(0x7ce)]&&(this[_0x3c9a7e(0x621)]=new _0x48cf5c(),this[_0x3c9a7e(0xd02)](this[_0x3c9a7e(0x621)]));else{if(_0x3c9a7e(0x64e)!==_0x3c9a7e(0x64e)){if(_0x818b79[_0x3c9a7e(0x8fb)])return![];return _0x2afb9f['BattleCore'][_0x3c9a7e(0x668)]['Enemy'][_0x3c9a7e(0x1c7)];}else _0x372510+=_0x219787;}BattleManager[_0x3c9a7e(0x111)](_0x7fee04,-_0x5d0d65,![]),BattleManager[_0x3c9a7e(0x111)](_0x7fee04,-_0x372510,!![]);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x594),_0x433ddc=>{const _0x4ee947=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ee947(0x620)])return;if(!BattleManager[_0x4ee947(0x2cd)]())return;VisuMZ['ConvertParams'](_0x433ddc,_0x433ddc);const _0x3ca744=BattleManager[_0x4ee947(0x139)]['friendsUnit'](),_0x5e1575=_0x433ddc['Override'],_0x9338a6=_0x433ddc[_0x4ee947(0x813)]||_0x4ee947(0x601),_0x48b78f=_0x433ddc[_0x4ee947(0x130)]||_0x4ee947(0x601),_0x55629d=_0x433ddc['alterCost']||0x0,_0x5aeab2=_0x433ddc[_0x4ee947(0x128)]||0x0;(_0x3ca744['canAlterActionCostPTB']()||_0x5e1575)&&(_0x5e1575&&(_0x3ca744[_0x4ee947(0xae7)]=_0x3ca744[_0x4ee947(0xae7)]||{},_0x3ca744[_0x4ee947(0xae7)][_0x4ee947(0x914)]=0x0),_0x3ca744['alterActionCostPTB'](_0x9338a6,_0x48b78f,_0x55629d,_0x5aeab2));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_PtbConvert',_0x213e78=>{const _0x3acd6c=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x3acd6c(0x2cd)]())return;VisuMZ['ConvertParams'](_0x213e78,_0x213e78);const _0x4ed48d=BattleManager[_0x3acd6c(0x139)][_0x3acd6c(0x6f9)]();let _0xb645d9=Math['max'](_0x213e78[_0x3acd6c(0x357)],0x0),_0x22819e=_0x4ed48d[_0x3acd6c(0x590)](),_0x2f5ef6=_0x4ed48d[_0x3acd6c(0x6ef)]();while(_0xb645d9--){if(_0x22819e<=0x0&&_0x2f5ef6<=0x0)break;else _0x22819e>0x0?(_0x22819e--,_0x2f5ef6++):_0x2f5ef6--;}_0x4ed48d[_0x3acd6c(0xc6d)](_0x22819e),_0x4ed48d[_0x3acd6c(0xa15)](_0x2f5ef6);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x266),_0x3da8d2=>{const _0x5d36c9=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d36c9(0x620)])return;if(!BattleManager[_0x5d36c9(0x2cd)]())return;VisuMZ[_0x5d36c9(0xb1e)](_0x3da8d2,_0x3da8d2);const _0x24b317=BattleManager[_0x5d36c9(0x139)][_0x5d36c9(0x6f9)]();let _0x47bade=_0x3da8d2['FullActions'],_0xbab59c=_0x3da8d2[_0x5d36c9(0x406)];_0x24b317['gainFullActionsPTB'](_0x47bade),_0x24b317['gainHalfActionsPTB'](_0xbab59c);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x5d178f=>{const _0x171bca=_0x4a80d9;if(!SceneManager[_0x171bca(0x1f8)]())return;VisuMZ[_0x171bca(0xb1e)](_0x5d178f,_0x5d178f);const _0x118638=[_0x171bca(0x6da),_0x171bca(0x4b4),_0x171bca(0xc75),_0x171bca(0x63f),'MAT',_0x171bca(0xa8e),'AGI',_0x171bca(0x757)],_0x21484d=_0x5d178f[_0x171bca(0xaf7)],_0x3e1eb9=_0x5d178f[_0x171bca(0x640)],_0x37c1ab=VisuMZ['CreateActionSequenceTargets'](_0x5d178f[_0x171bca(0x302)]);for(const _0x3cc957 of _0x37c1ab){if(!_0x3cc957)continue;for(const _0x5e318f of _0x21484d){if(_0x171bca(0x6c5)!==_0x171bca(0x7b1)){const _0x398559=_0x118638[_0x171bca(0x699)](_0x5e318f[_0x171bca(0x7ff)]()['trim']());_0x398559>=0x0&&_0x398559<=0x7&&_0x3cc957[_0x171bca(0x8b6)](_0x398559)&&_0x3cc957[_0x171bca(0xb7a)](_0x398559);}else this[_0x171bca(0x63c)]('PreEndTurnJS'),_0x448d05['BattleCore']['Game_Battler_onTurnEnd']['call'](this),_0x3bf6f5[_0x171bca(0xbe1)]['Settings'][_0x171bca(0x1c6)][_0x171bca(0xacf)]&&this[_0x171bca(0x999)](),this[_0x171bca(0x63c)](_0x171bca(0xc60));}for(const _0x5af6a1 of _0x3e1eb9){if(_0x171bca(0x191)!==_0x171bca(0x569)){const _0x230553=_0x118638['indexOf'](_0x5af6a1[_0x171bca(0x7ff)]()['trim']());_0x230553>=0x0&&_0x230553<=0x7&&_0x3cc957[_0x171bca(0x832)](_0x230553)&&_0x3cc957['removeBuff'](_0x230553);}else{if(_0x42aef4[_0x171bca(0xbd4)]&&_0x1db102[_0x171bca(0x963)]())return![];else{if(!_0x3a6c1d[_0x171bca(0xbe1)]['TpbActiveChangeEnabled'])return![];const _0x2c07f2=_0x52e247[_0x171bca(0x564)]()[_0x171bca(0x435)](_0xd337c3=>_0xd337c3['isTpbCharged']()&&_0xd337c3[_0x171bca(0xb3c)]());return _0x2c07f2[_0x171bca(0x6fc)]>0x0&&_0x46ef26[_0x171bca(0x442)]()!==_0x2c07f2[_0x2c07f2[_0x171bca(0x6fc)]-0x1];}}}}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_RemoveState',_0x49f1ec=>{const _0x22cb21=_0x4a80d9;if(!SceneManager[_0x22cb21(0x1f8)]())return;VisuMZ[_0x22cb21(0xb1e)](_0x49f1ec,_0x49f1ec);const _0x5a8ef1=_0x49f1ec[_0x22cb21(0x7cf)],_0x367c01=VisuMZ[_0x22cb21(0x12b)](_0x49f1ec[_0x22cb21(0x302)]);for(const _0x514c0a of _0x367c01){if(_0x22cb21(0x2b8)!==_0x22cb21(0x6e1)){if(!_0x514c0a)continue;for(const _0xf288bf of _0x5a8ef1){_0x514c0a[_0x22cb21(0xa08)](_0xf288bf);}}else this['startMotion'](_0x22cb21(0x95b));}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Mechanics_StbExploit',_0x301c42=>{const _0x39a40c=_0x4a80d9;if(!SceneManager[_0x39a40c(0x1f8)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x39a40c(0x459)]())return;VisuMZ[_0x39a40c(0xb1e)](_0x301c42,_0x301c42);const _0x1d7e45=_0x301c42[_0x39a40c(0x6b2)],_0x183390=VisuMZ['CreateActionSequenceTargets'](_0x301c42[_0x39a40c(0x302)]),_0x368041=_0x301c42[_0x39a40c(0x57f)],_0x15c783=_0x301c42[_0x39a40c(0x1e4)],_0x527d21=_0x301c42['ForceExploiter'],_0x35a5e1=BattleManager[_0x39a40c(0x287)];if(_0x1d7e45){if('gHdpB'===_0x39a40c(0xa73))for(const _0x5858cf of _0x183390){if(!_0x5858cf)continue;if(_0x5858cf===user)continue;if(_0x368041)_0x5858cf[_0x39a40c(0x7db)](![]);_0x5858cf[_0x39a40c(0x6e3)](BattleManager[_0x39a40c(0x139)],_0x35a5e1);}else{const _0x516347=_0x5728e5[_0x39a40c(0x997)]();this[_0x39a40c(0x510)](_0x39a40c(0x3f6),[_0xc73ae2],_0x558c6e,_0x1ad440),this[_0x39a40c(0x510)]('performMoveToPoint',_0xe458c2,_0x516347[_0x39a40c(0xa47)],_0x516347[_0x39a40c(0x1b4)],_0x4ab3f5,![],_0x39a40c(0xa70)),this[_0x39a40c(0x510)]('requestMotion',[_0x2912d0],_0x39a40c(0x367)),this['push'](_0x39a40c(0x1d7)),this[_0x39a40c(0x510)](_0x39a40c(0x1f3),[_0x5cd6fd],'walk');}}if(_0x15c783&&BattleManager['_subject']){if(_0x527d21)BattleManager['_subject'][_0x39a40c(0x7db)](![]);const _0x2e8fb8=_0x183390[0x0];BattleManager[_0x39a40c(0x45c)](_0x2e8fb8,_0x35a5e1);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Mechanics_StbExtraAction',_0x47a41a=>{const _0x24856c=_0x4a80d9;if(!SceneManager[_0x24856c(0x1f8)]())return;if(!Imported[_0x24856c(0x4d8)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x24856c(0xb1e)](_0x47a41a,_0x47a41a);const _0xb9a4e9=_0x47a41a[_0x24856c(0x2a5)];BattleManager[_0x24856c(0x139)]&&('uwFsa'===_0x24856c(0x6b3)?BattleManager[_0x24856c(0x139)][_0x24856c(0x94f)](_0xb9a4e9):this[_0x24856c(0xbaa)]('float'));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x173),_0x59a832=>{const _0x28e2a3=_0x4a80d9;if(!SceneManager[_0x28e2a3(0x1f8)]())return;if(!Imported[_0x28e2a3(0x4d8)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x28e2a3(0xb1e)](_0x59a832,_0x59a832);let _0x478abf=_0x59a832[_0x28e2a3(0x2a5)];if(BattleManager[_0x28e2a3(0x139)]){BattleManager[_0x28e2a3(0x139)][_0x28e2a3(0x77d)]=BattleManager[_0x28e2a3(0x139)][_0x28e2a3(0x77d)]||[];while(_0x478abf--){if(_0x28e2a3(0x3b9)===_0x28e2a3(0x3b9)){if(BattleManager['_subject'][_0x28e2a3(0x77d)][_0x28e2a3(0x6fc)]<=0x0)break;BattleManager['_subject'][_0x28e2a3(0x77d)][_0x28e2a3(0xae3)]();}else return this[_0x28e2a3(0x522)]();}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x387),_0x460d35=>{const _0x93e9a1=_0x4a80d9;if(!SceneManager[_0x93e9a1(0x1f8)]())return;if(!Imported[_0x93e9a1(0x704)])return;VisuMZ['ConvertParams'](_0x460d35,_0x460d35);const _0xbaeeee=VisuMZ[_0x93e9a1(0x12b)](_0x460d35['Targets']),_0x1fde5e=_0x460d35[_0x93e9a1(0x2fe)];for(const _0x1fa086 of _0xbaeeee){if(!_0x1fa086)continue;if(!_0x1fa086[_0x93e9a1(0x172)]())continue;_0x1fa086[_0x93e9a1(0x8db)](_0x1fde5e);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x892),_0x163048=>{const _0x29a348=_0x4a80d9;if(!SceneManager[_0x29a348(0x1f8)]())return;VisuMZ[_0x29a348(0xb1e)](_0x163048,_0x163048);const _0x19073c=VisuMZ[_0x29a348(0x12b)](_0x163048['Targets']),_0x252743=_0x163048['Text'],_0x528c14={'textColor':ColorManager[_0x29a348(0x714)](_0x163048[_0x29a348(0x493)]),'flashColor':_0x163048['FlashColor'],'flashDuration':_0x163048[_0x29a348(0x1a8)]};for(const _0x229468 of _0x19073c){if(_0x29a348(0xbab)==='OCyJw'){if(!_0x229468)continue;_0x229468[_0x29a348(0x5c2)](_0x252743,_0x528c14);}else this[_0x29a348(0x2d4)][_0x29a348(0x510)](_0x29a348(0x496),_0x5787f3[_0x29a348(0x16d)][_0x29a348(0x7d6)](_0xe563b[_0x29a348(0x380)]())),this['_logWindow'][_0x29a348(0x510)](_0x29a348(0xca3));}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_VariablePopup',_0x1f57c8=>{const _0x3b5193=_0x4a80d9;if(!SceneManager[_0x3b5193(0x1f8)]())return;VisuMZ['ConvertParams'](_0x1f57c8,_0x1f57c8);const _0x4606d6=VisuMZ[_0x3b5193(0x12b)](_0x1f57c8[_0x3b5193(0x302)]);let _0x1885dd=$gameVariables[_0x3b5193(0x638)](_0x1f57c8[_0x3b5193(0x8b1)]);Imported[_0x3b5193(0xb80)]&&_0x1f57c8[_0x3b5193(0x1e2)]&&(_0x3b5193(0x60b)===_0x3b5193(0x60b)?_0x1885dd=VisuMZ[_0x3b5193(0xaa3)](_0x1885dd):(this[_0x3b5193(0x2d4)][_0x3b5193(0x510)](_0x3b5193(0xca3)),this[_0x3b5193(0x2d4)][_0x3b5193(0x510)](_0x3b5193(0x2b9))));const _0x6e497c=String(_0x1885dd),_0x4386e5={'textColor':ColorManager[_0x3b5193(0x714)](_0x1f57c8[_0x3b5193(0x493)]),'flashColor':_0x1f57c8['FlashColor'],'flashDuration':_0x1f57c8[_0x3b5193(0x1a8)]};for(const _0x144af9 of _0x4606d6){if(_0x3b5193(0x8ad)===_0x3b5193(0x8ad)){if(!_0x144af9)continue;_0x144af9[_0x3b5193(0x5c2)](_0x6e497c,_0x4386e5);}else this['_endingBattle']=!![],_0x1c4bdb[_0x3b5193(0xbe1)][_0x3b5193(0x178)][_0x3b5193(0x432)](this);}}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x217),_0x2b9f3b=>{const _0x50ac0d=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x2f805d=$gameTemp[_0x50ac0d(0xc05)]();if(!_0x2f805d)return;_0x2f805d[_0x50ac0d(0xbaa)](_0x50ac0d(0xd03));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x1cd),_0x507e9c=>{const _0x2eeef4=_0x4a80d9;if(!SceneManager[_0x2eeef4(0x1f8)]())return;VisuMZ[_0x2eeef4(0xb1e)](_0x507e9c,_0x507e9c);const _0x5e3268=VisuMZ['CreateActionSequenceTargets'](_0x507e9c[_0x2eeef4(0x302)]);for(const _0x27c37e of _0x5e3268){if(!_0x27c37e)continue;_0x27c37e[_0x2eeef4(0xa8a)]();}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Motion_FreezeMotionFrame',_0x200b81=>{const _0xd31fea=_0x4a80d9;if(!SceneManager[_0xd31fea(0x1f8)]())return;VisuMZ['ConvertParams'](_0x200b81,_0x200b81);const _0x2f6a5f=VisuMZ[_0xd31fea(0x12b)](_0x200b81[_0xd31fea(0x302)]),_0x3c1d47=_0x200b81[_0xd31fea(0x639)][_0xd31fea(0x303)]()[_0xd31fea(0x893)]();let _0x3de3cb=_0x200b81[_0xd31fea(0xb04)];const _0x57659f=_0x200b81[_0xd31fea(0x528)];if(![_0xd31fea(0x365),_0xd31fea(0x89a),_0xd31fea(0x3d8),'missile'][_0xd31fea(0xcf9)](_0x3c1d47)){if(_0xd31fea(0x7f4)===_0xd31fea(0x7f4))_0x3de3cb=![];else{const _0x224c7e=_0x41af1e(_0x5ecd44['$1']);return _0x493326[_0xd31fea(0x564)]()[_0xd31fea(0x435)](_0x4bbbb1=>_0x4bbbb1['enemyId']()===_0x224c7e);}}for(const _0x21f41c of _0x2f6a5f){if(!_0x21f41c)continue;_0x21f41c['freezeMotion'](_0x3c1d47,_0x3de3cb,_0x57659f);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x91e),_0x3a5e3c=>{const _0x2f905c=_0x4a80d9;if(!SceneManager[_0x2f905c(0x1f8)]())return;VisuMZ[_0x2f905c(0xb1e)](_0x3a5e3c,_0x3a5e3c);const _0x220467=VisuMZ['CreateActionSequenceTargets'](_0x3a5e3c[_0x2f905c(0x302)]),_0x3b2884=_0x3a5e3c['MotionType'][_0x2f905c(0x303)]()[_0x2f905c(0x893)](),_0x59d0b6=_0x3a5e3c[_0x2f905c(0xb04)];for(const _0x400f54 of _0x220467){if(_0x2f905c(0x142)!==_0x2f905c(0xc89)){if(!_0x400f54)continue;if(_0x3b2884[_0x2f905c(0x605)](/ATTACK[ ](\d+)/i)){if(_0x2f905c(0x164)!==_0x2f905c(0x2e2))_0x400f54['performAttackSlot'](Number(RegExp['$1']));else{if(this['hasSvBattler']())this[_0x2f905c(0x2ae)][_0x2f905c(0x38a)](_0x1b7cf0);}}else _0x3b2884==='attack'?_0x2f905c(0x5d3)!==_0x2f905c(0x94c)?_0x400f54[_0x2f905c(0xae6)]():(this[_0x2f905c(0x5ae)]['x']=0x0,this[_0x2f905c(0x5ae)]['y']=this['height']*0.5):_0x400f54[_0x2f905c(0x1f3)](_0x3b2884);if(!_0x59d0b6)_0x400f54[_0x2f905c(0xbfd)](0x0);else{if(_0x59d0b6&&[_0x2f905c(0x89a),_0x2f905c(0x3d8),_0x2f905c(0x267)][_0x2f905c(0xcf9)](_0x3b2884)){}}}else{const _0x5b74b1=_0xef7806['width'],_0x1d42ea=_0x19f6fe['round']((_0x2399a7[_0x2f905c(0x84d)]-_0x5b74b1)/0x2),_0xdbbce3=this[_0x2f905c(0xb3a)](0x4,!![]),_0x4f26db=_0x56b5f6[_0x2f905c(0x91f)]-_0xdbbce3+(_0x110ee7[_0x2f905c(0x8dc)]-_0x206ac7[_0x2f905c(0x91f)])/0x2;return new _0x25e0d1(_0x1d42ea,_0x4f26db,_0x5b74b1,_0xdbbce3);}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x1d9),_0x333cec=>{const _0x619437=_0x4a80d9;if(!SceneManager[_0x619437(0x1f8)]())return;VisuMZ[_0x619437(0xb1e)](_0x333cec,_0x333cec);const _0x1660f6=BattleManager['_action'];if(!_0x1660f6)return;if(!_0x1660f6[_0x619437(0x6af)]())return;const _0x2229a6=VisuMZ[_0x619437(0x12b)](_0x333cec['Targets']);for(const _0x2119a3 of _0x2229a6){if('IaWtj'==='oegig'){if(!_0x41ce78[_0x619437(0x1f8)]())return;const _0x28ea4f=_0x120f2e[_0x619437(0xc05)]();if(!_0x28ea4f)return;_0x28ea4f[_0x619437(0xbaa)](_0x619437(0x8d7));}else{if(!_0x2119a3)continue;_0x2119a3[_0x619437(0x1e8)](_0x1660f6);}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x862),_0x46604d=>{const _0x4fd4b6=_0x4a80d9;if(!SceneManager[_0x4fd4b6(0x1f8)]())return;VisuMZ['ConvertParams'](_0x46604d,_0x46604d);const _0x4136e9=VisuMZ[_0x4fd4b6(0x12b)](_0x46604d[_0x4fd4b6(0x302)]);for(const _0x120b5f of _0x4136e9){if('SlVWk'===_0x4fd4b6(0x136)){if(!_0x120b5f)continue;if(!_0x120b5f['battler']())continue;_0x120b5f[_0x4fd4b6(0x997)]()['refreshMotion']();}else{if(_0x1b0e85[_0x4fd4b6(0x9bc)]['active']&&_0xba9922[_0x4fd4b6(0x9bc)][_0x4fd4b6(0x44d)][_0x4fd4b6(0xbdf)])return!![];}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Motion_WaitMotionFrame',_0x260c43=>{const _0x3b43e0=_0x4a80d9;if(!SceneManager[_0x3b43e0(0x1f8)]())return;VisuMZ['ConvertParams'](_0x260c43,_0x260c43);const _0x333044=$gameTemp[_0x3b43e0(0xc05)](),_0x15113c=_0x260c43[_0x3b43e0(0x2f8)]*Sprite_Battler[_0x3b43e0(0x369)];_0x333044[_0x3b43e0(0xca3)](_0x15113c);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x59a),_0x115a40=>{const _0x554245=_0x4a80d9;if(!SceneManager[_0x554245(0x1f8)]())return;VisuMZ[_0x554245(0xb1e)](_0x115a40,_0x115a40);const _0x2a1db8=$gameTemp['getLastPluginCommandInterpreter'](),_0x3aee49=BattleManager['_action'];if(!_0x2a1db8||!_0x3aee49)return;if(!_0x3aee49[_0x554245(0x6af)]())return;const _0x18bedf=VisuMZ['CreateActionSequenceTargets'](_0x115a40[_0x554245(0x302)]);for(const _0x21f515 of _0x18bedf){if(!_0x21f515)continue;_0x21f515['performActionStart'](_0x3aee49);}if(_0x115a40[_0x554245(0x6f2)])_0x2a1db8[_0x554245(0xbaa)](_0x554245(0xa16));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x425),_0x456823=>{const _0x47b500=_0x4a80d9;if(!SceneManager[_0x47b500(0x1f8)]())return;if(!$gameSystem[_0x47b500(0x6e5)]())return;VisuMZ[_0x47b500(0xb1e)](_0x456823,_0x456823);const _0x1af74c=$gameTemp[_0x47b500(0xc05)](),_0x454966=VisuMZ['CreateActionSequenceTargets'](_0x456823[_0x47b500(0x302)]),_0x7f00ca=_0x456823[_0x47b500(0x80d)],_0x75366c=_0x456823[_0x47b500(0xc7d)],_0x2108fc=_0x456823[_0x47b500(0x805)],_0x4d0d97=_0x456823[_0x47b500(0x9b6)],_0x5e8fe8=_0x456823['FaceDirection'],_0x1f9998=_0x456823[_0x47b500(0x5bd)],_0x8cc1f1=_0x456823[_0x47b500(0x639)],_0x2926c9=_0x456823['WaitForMovement'];if(!_0x1af74c)return;for(const _0x1cacbb of _0x454966){if(!_0x1cacbb)continue;let _0x351d74=_0x75366c,_0xcf4891=_0x2108fc;if(_0x7f00ca['match'](/horz/i))_0x351d74*=_0x1cacbb[_0x47b500(0x172)]()?-0x1:0x1;if(_0x7f00ca[_0x47b500(0x605)](/vert/i))_0xcf4891*=_0x1cacbb[_0x47b500(0x172)]()?-0x1:0x1;_0x1cacbb[_0x47b500(0xb7d)](_0x351d74,_0xcf4891,_0x4d0d97,_0x5e8fe8,_0x1f9998),_0x1cacbb['requestMotion'](_0x8cc1f1);}if(_0x2926c9)_0x1af74c[_0x47b500(0xbaa)](_0x47b500(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x82f),_0x2c626c=>{const _0x4d11bf=_0x4a80d9;if(!SceneManager[_0x4d11bf(0x1f8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4d11bf(0xb1e)](_0x2c626c,_0x2c626c);const _0x8feb3d=$gameTemp[_0x4d11bf(0xc05)](),_0x1ee13c=VisuMZ[_0x4d11bf(0x12b)](_0x2c626c[_0x4d11bf(0x302)]),_0x53f45a=_0x2c626c['OffsetAdjust'],_0x451220=_0x2c626c[_0x4d11bf(0x2b1)],_0x360fe5=_0x2c626c[_0x4d11bf(0x21f)],_0x1bd5a1=_0x2c626c[_0x4d11bf(0x9b6)],_0x371fa1=_0x2c626c['FaceDirection'],_0x3c9407=_0x2c626c[_0x4d11bf(0x5bd)],_0x389d0f=_0x2c626c[_0x4d11bf(0x639)],_0x36cf17=_0x2c626c['WaitForMovement'];if(!_0x8feb3d)return;for(const _0x3d6b7f of _0x1ee13c){if(_0x4d11bf(0x1ab)!==_0x4d11bf(0x571)){if(!_0x3d6b7f)continue;const _0x44700c=_0x2c626c['DestinationJS'](_0x3d6b7f)||{'x':0x0,'y':0x0};let _0x5bdb9b=_0x44700c['x'],_0x16a9b9=_0x44700c['y'];if(_0x53f45a[_0x4d11bf(0x605)](/none/i))_0x5bdb9b+=_0x451220,_0x16a9b9+=_0x360fe5;else{if(_0x53f45a[_0x4d11bf(0x605)](/horz/i)&&_0x53f45a[_0x4d11bf(0x605)](/vert/i))_0x5bdb9b+=_0x3d6b7f['isActor']()?-_0x451220:_0x451220,_0x16a9b9+=_0x3d6b7f[_0x4d11bf(0x172)]()?-_0x360fe5:_0x360fe5;else{if(_0x53f45a[_0x4d11bf(0x605)](/horz/i))_0x5bdb9b+=_0x3d6b7f[_0x4d11bf(0x172)]()?-_0x451220:_0x451220,_0x16a9b9+=_0x360fe5;else _0x53f45a['match'](/vert/i)&&(_0x5bdb9b+=_0x451220,_0x16a9b9+=_0x3d6b7f[_0x4d11bf(0x172)]()?-_0x360fe5:_0x360fe5);}}_0x3d6b7f[_0x4d11bf(0xc5b)](_0x5bdb9b,_0x16a9b9,_0x1bd5a1,_0x371fa1,_0x3c9407,-0x1),_0x3d6b7f[_0x4d11bf(0x1f3)](_0x389d0f);}else _0x33f8b6=_0x478cef[_0x4d11bf(0x84d)]/0x2,_0x11634c=_0x11d3db['boxHeight']/0x2;}if(_0x36cf17)_0x8feb3d[_0x4d11bf(0xbaa)](_0x4d11bf(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xc8a),_0x21143=>{const _0x26d920=_0x4a80d9;if(!SceneManager[_0x26d920(0x1f8)]())return;if(!$gameSystem[_0x26d920(0x6e5)]())return;VisuMZ[_0x26d920(0xb1e)](_0x21143,_0x21143);const _0x505d8a=$gameTemp[_0x26d920(0xc05)](),_0x2dd6fa=VisuMZ[_0x26d920(0x12b)](_0x21143['Targets']),_0x47e9a4=_0x21143[_0x26d920(0x35d)],_0x3e0e24=_0x21143[_0x26d920(0x66b)],_0x335de7=_0x21143[_0x26d920(0x2b1)],_0x41d4ba=_0x21143[_0x26d920(0x21f)],_0x139ddc=_0x21143[_0x26d920(0x9b6)],_0xe29eab=_0x21143[_0x26d920(0x537)],_0x57b18e=_0x21143[_0x26d920(0x5bd)],_0x37f440=_0x21143['MotionType'],_0x4e3985=_0x21143['WaitForMovement'];if(!_0x505d8a)return;for(const _0x511c09 of _0x2dd6fa){if(!_0x511c09)continue;let _0x348703=_0x511c09[_0x26d920(0x997)]()['_baseX'],_0xb9519b=_0x511c09[_0x26d920(0x997)]()[_0x26d920(0x1d5)];if(_0x47e9a4[_0x26d920(0x605)](/home/i))_0x348703=_0x511c09[_0x26d920(0x997)]()['_homeX'],_0xb9519b=_0x511c09[_0x26d920(0x997)]()['_homeY'];else{if(_0x47e9a4[_0x26d920(0x605)](/center/i))_0x348703=Graphics[_0x26d920(0x84d)]/0x2,_0xb9519b=Graphics[_0x26d920(0x91f)]/0x2;else _0x47e9a4['match'](/point (\d+), (\d+)/i)&&('apezI'!=='apezI'?this['hasStaticSvBattler']()?this[_0x26d920(0x23d)]():(this[_0x26d920(0x909)](),_0x2d4759[_0x26d920(0xbe1)][_0x26d920(0x379)][_0x26d920(0x432)](this)):(_0x348703=Number(RegExp['$1']),_0xb9519b=Number(RegExp['$2'])));}if(_0x3e0e24[_0x26d920(0x605)](/none/i))_0x348703+=_0x335de7,_0xb9519b+=_0x41d4ba;else{if(_0x3e0e24[_0x26d920(0x605)](/horz/i)&&_0x3e0e24[_0x26d920(0x605)](/vert/i))_0x348703+=_0x511c09[_0x26d920(0x172)]()?-_0x335de7:_0x335de7,_0xb9519b+=_0x511c09[_0x26d920(0x172)]()?-_0x41d4ba:_0x41d4ba;else{if(_0x3e0e24[_0x26d920(0x605)](/horz/i))_0x26d920(0xb9a)!==_0x26d920(0xb9a)?_0x319fde=_0x3bec64:(_0x348703+=_0x511c09[_0x26d920(0x172)]()?-_0x335de7:_0x335de7,_0xb9519b+=_0x41d4ba);else _0x3e0e24[_0x26d920(0x605)](/vert/i)&&(_0x348703+=_0x335de7,_0xb9519b+=_0x511c09[_0x26d920(0x172)]()?-_0x41d4ba:_0x41d4ba);}}_0x511c09[_0x26d920(0xc5b)](_0x348703,_0xb9519b,_0x139ddc,_0xe29eab,_0x57b18e,-0x1),_0x511c09['requestMotion'](_0x37f440);}if(_0x4e3985)_0x505d8a['setWaitMode'](_0x26d920(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_HomeMoveToTarget',_0x1ba2f6=>{const _0xbd3335=_0x4a80d9;if(!SceneManager[_0xbd3335(0x1f8)]())return;if(!$gameSystem[_0xbd3335(0x6e5)]())return;VisuMZ[_0xbd3335(0xb1e)](_0x1ba2f6,_0x1ba2f6);const _0x17c9ba=$gameTemp[_0xbd3335(0xc05)](),_0x36ef94=VisuMZ['CreateActionSequenceTargets'](_0x1ba2f6['Targets1']),_0xc63986=VisuMZ['CreateActionSequenceTargets'](_0x1ba2f6[_0xbd3335(0xa48)]),_0xc00b2c=_0x1ba2f6[_0xbd3335(0x568)];let _0x213202=_0x1ba2f6[_0xbd3335(0x7ae)];const _0x2063ba=_0x1ba2f6[_0xbd3335(0x66b)],_0x1a8e66=_0x1ba2f6['OffsetX'],_0x5bbabd=_0x1ba2f6[_0xbd3335(0x21f)],_0x31dae0=_0x1ba2f6['Duration'],_0x5e37ea=_0x1ba2f6[_0xbd3335(0x537)],_0x30eaa4=_0x1ba2f6[_0xbd3335(0x5bd)],_0x577fbe=_0x1ba2f6['MotionType'],_0x369c6c=_0x1ba2f6[_0xbd3335(0x6f2)],_0x31210c=Math[_0xbd3335(0x834)](..._0xc63986['map'](_0x1e9319=>_0x1e9319['battler']()['_baseX']-_0x1e9319[_0xbd3335(0x997)]()[_0xbd3335(0x29a)]()/0x2)),_0x51cd58=Math['max'](..._0xc63986[_0xbd3335(0xc3f)](_0x5201e8=>_0x5201e8[_0xbd3335(0x997)]()[_0xbd3335(0x9ec)]+_0x5201e8[_0xbd3335(0x997)]()[_0xbd3335(0x29a)]()/0x2)),_0x1cf610=Math['min'](..._0xc63986[_0xbd3335(0xc3f)](_0x267854=>_0x267854[_0xbd3335(0x997)]()[_0xbd3335(0x1d5)]-_0x267854[_0xbd3335(0x997)]()[_0xbd3335(0x33e)]())),_0x3a71d5=Math[_0xbd3335(0x78c)](..._0xc63986['map'](_0x4fb2af=>_0x4fb2af[_0xbd3335(0x997)]()[_0xbd3335(0x1d5)])),_0x5adc77=_0xc63986[_0xbd3335(0x435)](_0x3cbc87=>_0x3cbc87[_0xbd3335(0x172)]())[_0xbd3335(0x6fc)],_0x1d685a=_0xc63986[_0xbd3335(0x435)](_0xd63d6e=>_0xd63d6e[_0xbd3335(0x494)]())[_0xbd3335(0x6fc)];let _0x270a5a=0x0,_0x6fccd4=0x0;if(_0xc00b2c['match'](/front/i))_0x270a5a=_0x5adc77>=_0x1d685a?_0x31210c:_0x51cd58;else{if(_0xc00b2c[_0xbd3335(0x605)](/middle/i))_0x270a5a=(_0x31210c+_0x51cd58)/0x2,_0x213202=-0x1;else _0xc00b2c[_0xbd3335(0x605)](/back/i)&&(_0xbd3335(0xcbe)!=='egoaz'?_0x270a5a=_0x5adc77>=_0x1d685a?_0x51cd58:_0x31210c:_0x87373f[_0xbd3335(0xba6)][_0xbd3335(0x54a)][_0xbd3335(0x432)](this));}if(_0xc00b2c[_0xbd3335(0x605)](/head/i))_0x6fccd4=_0x1cf610;else{if(_0xc00b2c[_0xbd3335(0x605)](/center/i)){if(_0xbd3335(0xc16)!=='sBGwj')_0x6fccd4=(_0x1cf610+_0x3a71d5)/0x2;else{_0x3cc7b7=_0x813438['toUpperCase']()['trim']();const _0x4459c5=this[_0xbd3335(0x599)](_0x10f5f6,_0x285b44);if(_0x4459c5<=0x0)return;const _0xad6f3a=_0x7134fa[_0xbd3335(0x961)](_0x54d4d0*_0x4459c5);if(_0xad6f3a<=0x0)return;let _0x486507=this['subject']();if(this['_reflectionTarget'])_0x486507=this[_0xbd3335(0xaba)];const _0x15c0a1=_0x4909b3[_0xbd3335(0x87a)](_0x3470bd)?-0x1:0x1;if(_0x66ec0d==='HP')_0x486507[_0xbd3335(0x65a)](_0x15c0a1*_0xad6f3a);if(_0x38e25d==='MP')_0x486507['gainMp'](_0x15c0a1*_0xad6f3a);}}else _0xc00b2c[_0xbd3335(0x605)](/base/i)&&(_0x6fccd4=_0x3a71d5);}if(!_0x17c9ba)return;for(const _0x36bee5 of _0x36ef94){if(!_0x36bee5)continue;let _0x273bba=_0x270a5a,_0x1ce89e=_0x6fccd4;if(_0x2063ba[_0xbd3335(0x605)](/none/i))_0x273bba+=_0x1a8e66,_0x1ce89e+=_0x5bbabd;else{if(_0x2063ba['match'](/horz/i)&&_0x2063ba[_0xbd3335(0x605)](/vert/i))_0x273bba+=_0x36bee5[_0xbd3335(0x172)]()?-_0x1a8e66:_0x1a8e66,_0x1ce89e+=_0x36bee5['isActor']()?-_0x5bbabd:_0x5bbabd;else{if(_0x2063ba[_0xbd3335(0x605)](/horz/i))_0x273bba+=_0x36bee5[_0xbd3335(0x172)]()?-_0x1a8e66:_0x1a8e66,_0x1ce89e+=_0x5bbabd;else _0x2063ba[_0xbd3335(0x605)](/vert/i)&&(_0x273bba+=_0x1a8e66,_0x1ce89e+=_0x36bee5[_0xbd3335(0x172)]()?-_0x5bbabd:_0x5bbabd);}}_0x36bee5['moveBattlerHomeToPoint'](_0x273bba,_0x1ce89e,_0x31dae0,_0x5e37ea,_0x30eaa4,_0x213202),_0x36bee5[_0xbd3335(0x1f3)](_0x577fbe);}if(_0x369c6c)_0x17c9ba['setWaitMode'](_0xbd3335(0xa16));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x292),_0x3e6019=>{const _0x3a905e=_0x4a80d9;if(!SceneManager[_0x3a905e(0x1f8)]())return;if(!$gameSystem[_0x3a905e(0x6e5)]())return;VisuMZ[_0x3a905e(0xb1e)](_0x3e6019,_0x3e6019);const _0xef4de5=VisuMZ[_0x3a905e(0x12b)](_0x3e6019[_0x3a905e(0x302)]);let _0x1572d1=_0x3e6019['Direction']['match'](/back/i);for(const _0x5149cd of _0xef4de5){if(_0x3a905e(0x1ee)===_0x3a905e(0x1ee)){if(!_0x5149cd)continue;if(_0x3e6019['Direction'][_0x3a905e(0x605)](/rand/i))_0x1572d1=Math['randomInt'](0x2);_0x5149cd[_0x3a905e(0x3ba)](!!_0x1572d1);}else{if(this[_0x3a905e(0x77d)]['some'](_0xff647f=>_0xff647f['item']()&&_0xff647f[_0x3a905e(0x2c0)]()))return!![];}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_FaceJsPoint',_0x139706=>{const _0x49919a=_0x4a80d9;if(!SceneManager[_0x49919a(0x1f8)]())return;if(!$gameSystem[_0x49919a(0x6e5)]())return;VisuMZ[_0x49919a(0xb1e)](_0x139706,_0x139706);const _0x513c5b=VisuMZ[_0x49919a(0x12b)](_0x139706[_0x49919a(0x302)]),_0x307e8c=_0x139706['FaceAway'];for(const _0x360c96 of _0x513c5b){if(_0x49919a(0x60a)!==_0x49919a(0x6e2)){if(!_0x360c96)continue;const _0x2eaff8=_0x139706[_0x49919a(0xa9d)](_0x360c96)||{'x':0x0,'y':0x0};let _0x3ef844=_0x2eaff8['x'],_0x5e1115=_0x2eaff8['y'];_0x360c96[_0x49919a(0xa28)](Math[_0x49919a(0x961)](_0x3ef844),Math[_0x49919a(0x961)](_0x5e1115),!!_0x307e8c);}else{const _0x29f2cd=new _0x2f5b7b(0x0,0x0,_0xbfcf53[_0x49919a(0x2ce)],_0x3084df['height']);this[_0x49919a(0xace)]=new _0x2ec322(_0x29f2cd),this[_0x49919a(0xace)][_0x49919a(0x2ff)]=0x0,this[_0x49919a(0xd02)](this[_0x49919a(0xace)]),this[_0x49919a(0xa89)]();}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_FacePoint',_0xa28a2b=>{const _0x46fe74=_0x4a80d9;if(!SceneManager[_0x46fe74(0x1f8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0xa28a2b,_0xa28a2b);const _0x5ea6a6=VisuMZ['CreateActionSequenceTargets'](_0xa28a2b['Targets']);let _0x4aae12=_0xa28a2b[_0x46fe74(0x3de)];const _0x457d92=_0xa28a2b[_0x46fe74(0x1c9)];for(const _0x39b781 of _0x5ea6a6){if(!_0x39b781)continue;let _0x434546=_0x39b781['battler']()[_0x46fe74(0x9ec)],_0x28d348=_0x39b781[_0x46fe74(0x997)]()['_baseY'];if(_0x4aae12['match'](/home/i)){if('NNopy'==='NNopy')_0x434546=_0x39b781[_0x46fe74(0x997)]()[_0x46fe74(0xa47)],_0x28d348=_0x39b781[_0x46fe74(0x997)]()[_0x46fe74(0x1b4)];else{if(!_0x312e9f['isSideView']())return;const _0x5ec98d=this[_0x46fe74(0x997)]();if(!_0x5ec98d)return;_0x5ec98d['startFloat'](_0xa1d8df,_0x44576b,_0x508ee8);}}else{if(_0x4aae12['match'](/center/i))_0x434546=Graphics['boxWidth']/0x2,_0x28d348=Graphics['boxHeight']/0x2;else{if(_0x4aae12['match'](/point (\d+), (\d+)/i)){if('xgncq'===_0x46fe74(0xa6d))_0x434546=Number(RegExp['$1']),_0x28d348=Number(RegExp['$2']);else{const _0x1345a7=this[_0x46fe74(0x641)](_0xf2744f);if(_0x1345a7[_0x46fe74(0x605)](/\\I\[(\d+)\]/i)){const _0x344895=this[_0x46fe74(0xcf8)](_0x3df03b),_0x3ace11=this['textSizeEx'](_0x1345a7)[_0x46fe74(0x2ce)];return _0x3ace11<=_0x344895[_0x46fe74(0x2ce)]?'iconText':_0x46fe74(0x6db);}}}}}_0x39b781[_0x46fe74(0xa28)](Math['round'](_0x434546),Math[_0x46fe74(0x961)](_0x28d348),!!_0x457d92);}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_FaceTarget',_0x376ee9=>{const _0x38d9ab=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x38d9ab(0x6e5)]())return;VisuMZ[_0x38d9ab(0xb1e)](_0x376ee9,_0x376ee9);const _0x1e1962=VisuMZ[_0x38d9ab(0x12b)](_0x376ee9[_0x38d9ab(0x7e4)]),_0x589010=VisuMZ[_0x38d9ab(0x12b)](_0x376ee9['Targets2']),_0x25f23d=_0x589010['map'](_0x21dace=>_0x21dace&&_0x21dace[_0x38d9ab(0x997)]()?_0x21dace[_0x38d9ab(0x997)]()[_0x38d9ab(0x9ec)]:0x0)/(_0x589010['length']||0x1),_0x56b0d6=_0x589010['map'](_0x384621=>_0x384621&&_0x384621[_0x38d9ab(0x997)]()?_0x384621['battler']()[_0x38d9ab(0x1d5)]:0x0)/(_0x589010[_0x38d9ab(0x6fc)]||0x1),_0x8836c4=_0x376ee9[_0x38d9ab(0x1c9)];for(const _0x32f305 of _0x1e1962){if('wsNdO'==='wsNdO'){if(!_0x32f305)continue;_0x32f305[_0x38d9ab(0xa28)](Math[_0x38d9ab(0x961)](_0x25f23d),Math[_0x38d9ab(0x961)](_0x56b0d6),!!_0x8836c4);}else _0x39265b=_0x25a4ca>=_0xababc4?_0x30faff:_0x1f276a;}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x5f7),_0x485200=>{const _0x2e6482=_0x4a80d9;if(!SceneManager[_0x2e6482(0x1f8)]())return;VisuMZ[_0x2e6482(0xb1e)](_0x485200,_0x485200);const _0x2d8a1e=$gameTemp[_0x2e6482(0xc05)](),_0x4923bd=VisuMZ[_0x2e6482(0x12b)](_0x485200['Targets']),_0x36f0b9=_0x485200[_0x2e6482(0xbe6)],_0x21961a=_0x485200[_0x2e6482(0x9b6)],_0xb2b2ac=_0x485200[_0x2e6482(0x5bd)],_0x2b04b1=_0x485200[_0x2e6482(0x52a)];if(!_0x2d8a1e)return;for(const _0x262419 of _0x4923bd){if(_0x2e6482(0x1bf)!=='UxtcV')_0x308dfa=!_0x24ade3;else{if(!_0x262419)continue;_0x262419[_0x2e6482(0x1ec)](_0x36f0b9,_0x21961a,_0xb2b2ac);}}if(_0x2b04b1)_0x2d8a1e[_0x2e6482(0xbaa)]('battleFloat');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_HomeReset',_0x322269=>{const _0x5c1637=_0x4a80d9;if(!SceneManager[_0x5c1637(0x1f8)]())return;VisuMZ[_0x5c1637(0xb1e)](_0x322269,_0x322269);const _0x16e89b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x16e89b)return;const _0xbfecf3=VisuMZ[_0x5c1637(0x12b)](_0x322269[_0x5c1637(0x302)]);for(const _0x29e23d of _0xbfecf3){if(!_0x29e23d)continue;_0x29e23d[_0x5c1637(0x7f0)]();}BattleManager[_0x5c1637(0x139)]&&BattleManager[_0x5c1637(0x139)][_0x5c1637(0x8d3)]();if(_0x322269[_0x5c1637(0x6f2)])_0x16e89b[_0x5c1637(0xbaa)](_0x5c1637(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x600),_0x43105e=>{const _0x28483f=_0x4a80d9;if(!SceneManager[_0x28483f(0x1f8)]())return;VisuMZ[_0x28483f(0xb1e)](_0x43105e,_0x43105e);const _0x24e342=$gameTemp[_0x28483f(0xc05)](),_0x278e85=VisuMZ[_0x28483f(0x12b)](_0x43105e[_0x28483f(0x302)]),_0x4962e6=_0x43105e[_0x28483f(0xbe6)],_0xddf335=_0x43105e[_0x28483f(0x9b6)],_0x1521b0=_0x43105e[_0x28483f(0xc62)];if(!_0x24e342)return;for(const _0x13ef9b of _0x278e85){if(!_0x13ef9b)continue;_0x13ef9b[_0x28483f(0x946)](_0x4962e6,_0xddf335);}if(_0x1521b0)_0x24e342[_0x28483f(0xbaa)](_0x28483f(0x778));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x610),_0x585a8b=>{const _0x411ab2=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x411ab2(0x6e5)]())return;VisuMZ[_0x411ab2(0xb1e)](_0x585a8b,_0x585a8b);const _0x30d03=$gameTemp[_0x411ab2(0xc05)](),_0xcaf1f8=VisuMZ[_0x411ab2(0x12b)](_0x585a8b[_0x411ab2(0x302)]),_0x289b43=_0x585a8b[_0x411ab2(0x80d)],_0x25b868=_0x585a8b[_0x411ab2(0xc7d)],_0x30b665=_0x585a8b[_0x411ab2(0x805)],_0x158503=_0x585a8b[_0x411ab2(0x9b6)],_0x3d96fc=_0x585a8b[_0x411ab2(0x537)],_0xdaa31=_0x585a8b[_0x411ab2(0x5bd)],_0x1e7770=_0x585a8b['MotionType'],_0x4f1447=_0x585a8b['WaitForMovement'];if(!_0x30d03)return;for(const _0x390267 of _0xcaf1f8){if(!_0x390267)continue;let _0x5c44dc=_0x25b868,_0x166d53=_0x30b665;if(_0x289b43[_0x411ab2(0x605)](/horz/i))_0x5c44dc*=_0x390267[_0x411ab2(0x172)]()?-0x1:0x1;if(_0x289b43[_0x411ab2(0x605)](/vert/i))_0x166d53*=_0x390267[_0x411ab2(0x172)]()?-0x1:0x1;_0x390267[_0x411ab2(0x154)](_0x5c44dc,_0x166d53,_0x158503,_0x3d96fc,_0xdaa31),_0x390267[_0x411ab2(0x1f3)](_0x1e7770);}if(_0x4f1447)_0x30d03[_0x411ab2(0xbaa)](_0x411ab2(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0xc5f),_0xba2b11=>{const _0x222127=_0x4a80d9;if(!SceneManager[_0x222127(0x1f8)]())return;if(!$gameSystem[_0x222127(0x6e5)]())return;VisuMZ[_0x222127(0xb1e)](_0xba2b11,_0xba2b11);const _0x1ffd03=$gameTemp[_0x222127(0xc05)](),_0x195860=VisuMZ['CreateActionSequenceTargets'](_0xba2b11['Targets']),_0x278971=_0xba2b11[_0x222127(0x66b)],_0x30443c=_0xba2b11[_0x222127(0x2b1)],_0x5dbbed=_0xba2b11[_0x222127(0x21f)],_0x5461e3=_0xba2b11[_0x222127(0x9b6)],_0x2a3d0c=_0xba2b11[_0x222127(0x537)],_0x4417ee=_0xba2b11[_0x222127(0x5bd)],_0x37b234=_0xba2b11['MotionType'],_0x2ffb6d=_0xba2b11[_0x222127(0x6f2)];if(!_0x1ffd03)return;for(const _0x12aa1f of _0x195860){if(!_0x12aa1f)continue;const _0x2b93f0=_0xba2b11[_0x222127(0x79b)](_0x12aa1f)||{'x':0x0,'y':0x0};let _0x2f22fa=_0x2b93f0['x'],_0x4a5103=_0x2b93f0['y'];if(_0x278971[_0x222127(0x605)](/none/i)){if(_0x222127(0xa23)!=='URddv')_0x2f22fa+=_0x30443c,_0x4a5103+=_0x5dbbed;else return this[_0x222127(0xb97)]&&this[_0x222127(0xb97)]['constructor']===_0x51d1a4;}else{if(_0x278971['match'](/horz/i)&&_0x278971['match'](/vert/i))_0x2f22fa+=_0x12aa1f[_0x222127(0x172)]()?-_0x30443c:_0x30443c,_0x4a5103+=_0x12aa1f['isActor']()?-_0x5dbbed:_0x5dbbed;else{if(_0x278971[_0x222127(0x605)](/horz/i))_0x2f22fa+=_0x12aa1f[_0x222127(0x172)]()?-_0x30443c:_0x30443c,_0x4a5103+=_0x5dbbed;else _0x278971['match'](/vert/i)&&(_0x2f22fa+=_0x30443c,_0x4a5103+=_0x12aa1f[_0x222127(0x172)]()?-_0x5dbbed:_0x5dbbed);}}_0x12aa1f['moveBattlerToPoint'](_0x2f22fa,_0x4a5103,_0x5461e3,_0x2a3d0c,_0x4417ee,-0x1),_0x12aa1f['requestMotion'](_0x37b234);}if(_0x2ffb6d)_0x1ffd03['setWaitMode']('battleMove');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xbca),_0x2d20ff=>{const _0x530321=_0x4a80d9;if(!SceneManager[_0x530321(0x1f8)]())return;if(!$gameSystem[_0x530321(0x6e5)]())return;VisuMZ[_0x530321(0xb1e)](_0x2d20ff,_0x2d20ff);const _0x363c7f=$gameTemp[_0x530321(0xc05)](),_0x4252ba=VisuMZ[_0x530321(0x12b)](_0x2d20ff[_0x530321(0x302)]),_0x18a0b2=_0x2d20ff[_0x530321(0x35d)],_0x4f916a=_0x2d20ff['OffsetAdjust'],_0x2b1f48=_0x2d20ff[_0x530321(0x2b1)],_0x22d818=_0x2d20ff[_0x530321(0x21f)],_0x286b65=_0x2d20ff[_0x530321(0x9b6)],_0x128b1c=_0x2d20ff['FaceDirection'],_0x8d896f=_0x2d20ff['EasingType'],_0x58ed90=_0x2d20ff[_0x530321(0x639)],_0x5512c3=_0x2d20ff[_0x530321(0x6f2)];if(!_0x363c7f)return;for(const _0x5cde68 of _0x4252ba){if(!_0x5cde68)continue;let _0x41ac0f=_0x5cde68[_0x530321(0x997)]()[_0x530321(0x9ec)],_0x2ab212=_0x5cde68[_0x530321(0x997)]()[_0x530321(0x1d5)];if(_0x18a0b2[_0x530321(0x605)](/home/i))_0x41ac0f=_0x5cde68['battler']()['_homeX'],_0x2ab212=_0x5cde68[_0x530321(0x997)]()[_0x530321(0x1b4)];else{if(_0x18a0b2[_0x530321(0x605)](/center/i))_0x41ac0f=Graphics[_0x530321(0x84d)]/0x2,_0x2ab212=Graphics[_0x530321(0x91f)]/0x2;else _0x18a0b2['match'](/point (\d+), (\d+)/i)&&(_0x41ac0f=Number(RegExp['$1']),_0x2ab212=Number(RegExp['$2']));}if(_0x4f916a[_0x530321(0x605)](/none/i)){if(_0x530321(0x884)!==_0x530321(0x884))return null;else _0x41ac0f+=_0x2b1f48,_0x2ab212+=_0x22d818;}else{if(_0x4f916a[_0x530321(0x605)](/horz/i)&&_0x4f916a['match'](/vert/i))_0x41ac0f+=_0x5cde68['isActor']()?-_0x2b1f48:_0x2b1f48,_0x2ab212+=_0x5cde68[_0x530321(0x172)]()?-_0x22d818:_0x22d818;else{if(_0x4f916a[_0x530321(0x605)](/horz/i))_0x41ac0f+=_0x5cde68['isActor']()?-_0x2b1f48:_0x2b1f48,_0x2ab212+=_0x22d818;else _0x4f916a['match'](/vert/i)&&(_0x41ac0f+=_0x2b1f48,_0x2ab212+=_0x5cde68[_0x530321(0x172)]()?-_0x22d818:_0x22d818);}}_0x5cde68[_0x530321(0xa2c)](_0x41ac0f,_0x2ab212,_0x286b65,_0x128b1c,_0x8d896f,-0x1),_0x5cde68[_0x530321(0x1f3)](_0x58ed90);}if(_0x5512c3)_0x363c7f[_0x530321(0xbaa)](_0x530321(0xa16));}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],_0x4a80d9(0x32d),_0x1258f9=>{const _0x3b6fcc=_0x4a80d9;if(!SceneManager[_0x3b6fcc(0x1f8)]())return;if(!$gameSystem[_0x3b6fcc(0x6e5)]())return;VisuMZ[_0x3b6fcc(0xb1e)](_0x1258f9,_0x1258f9);const _0x367f9b=$gameTemp['getLastPluginCommandInterpreter'](),_0xe44732=VisuMZ[_0x3b6fcc(0x12b)](_0x1258f9[_0x3b6fcc(0x7e4)]),_0x5c777b=VisuMZ[_0x3b6fcc(0x12b)](_0x1258f9[_0x3b6fcc(0xa48)]),_0xbe0d11=_0x1258f9[_0x3b6fcc(0x568)];let _0x336623=_0x1258f9[_0x3b6fcc(0x7ae)];const _0x26ae1a=_0x1258f9[_0x3b6fcc(0x66b)],_0x5cdc33=_0x1258f9[_0x3b6fcc(0x2b1)],_0x214e07=_0x1258f9[_0x3b6fcc(0x21f)],_0x2d4c7f=_0x1258f9[_0x3b6fcc(0x9b6)],_0x982000=_0x1258f9[_0x3b6fcc(0x537)],_0x1cc82b=_0x1258f9['EasingType'],_0xcc7286=_0x1258f9[_0x3b6fcc(0x639)],_0xf909d3=_0x1258f9[_0x3b6fcc(0x6f2)],_0x413d39=Math['min'](..._0x5c777b[_0x3b6fcc(0xc3f)](_0x31f8aa=>_0x31f8aa[_0x3b6fcc(0x997)]()['_baseX']-_0x31f8aa['battler']()['mainSpriteWidth']()/0x2)),_0x217256=Math['max'](..._0x5c777b['map'](_0x345e91=>_0x345e91[_0x3b6fcc(0x997)]()[_0x3b6fcc(0x9ec)]+_0x345e91[_0x3b6fcc(0x997)]()[_0x3b6fcc(0x29a)]()/0x2)),_0x54f381=Math[_0x3b6fcc(0x834)](..._0x5c777b[_0x3b6fcc(0xc3f)](_0x1d8871=>_0x1d8871[_0x3b6fcc(0x997)]()[_0x3b6fcc(0x1d5)]-_0x1d8871[_0x3b6fcc(0x997)]()[_0x3b6fcc(0x33e)]())),_0x243985=Math[_0x3b6fcc(0x78c)](..._0x5c777b[_0x3b6fcc(0xc3f)](_0x5e6e76=>_0x5e6e76['battler']()[_0x3b6fcc(0x1d5)])),_0x4ef614=_0x5c777b[_0x3b6fcc(0x435)](_0x5e1ba1=>_0x5e1ba1[_0x3b6fcc(0x172)]())[_0x3b6fcc(0x6fc)],_0x58b0df=_0x5c777b[_0x3b6fcc(0x435)](_0x4b2d47=>_0x4b2d47[_0x3b6fcc(0x494)]())[_0x3b6fcc(0x6fc)];let _0x115c10=0x0,_0x231213=0x0;if(_0xbe0d11[_0x3b6fcc(0x605)](/front/i))_0x3b6fcc(0x661)===_0x3b6fcc(0x4a1)?(_0x41a88f[_0x3b6fcc(0x889)](_0xc70a5),[_0x3b6fcc(0x3d8),_0x3b6fcc(0x89a),'missile'][_0x3b6fcc(0xcf9)](_0x1c3702)&&this['performWeaponAnimation']()):_0x115c10=_0x4ef614>=_0x58b0df?_0x413d39:_0x217256;else{if(_0xbe0d11[_0x3b6fcc(0x605)](/middle/i))_0x115c10=(_0x413d39+_0x217256)/0x2,_0x336623=-0x1;else{if(_0xbe0d11['match'](/back/i)){if(_0x3b6fcc(0xae5)!==_0x3b6fcc(0xae5)){if(this[_0x3b6fcc(0x245)]())_0x3ce45e[_0x3b6fcc(0xbe1)][_0x3b6fcc(0x27b)][_0x3b6fcc(0x432)](this);}else _0x115c10=_0x4ef614>=_0x58b0df?_0x217256:_0x413d39;}}}if(_0xbe0d11[_0x3b6fcc(0x605)](/head/i))_0x231213=_0x54f381;else{if(_0xbe0d11[_0x3b6fcc(0x605)](/center/i))_0x231213=(_0x54f381+_0x243985)/0x2;else _0xbe0d11[_0x3b6fcc(0x605)](/base/i)&&(_0x231213=_0x243985);}if(!_0x367f9b)return;for(const _0x46b527 of _0xe44732){if(!_0x46b527)continue;let _0x3a5ba1=_0x115c10,_0x407a30=_0x231213;if(_0x26ae1a[_0x3b6fcc(0x605)](/none/i))_0x3a5ba1+=_0x5cdc33,_0x407a30+=_0x214e07;else{if(_0x26ae1a[_0x3b6fcc(0x605)](/horz/i)&&_0x26ae1a[_0x3b6fcc(0x605)](/vert/i))_0x3a5ba1+=_0x46b527[_0x3b6fcc(0x172)]()?-_0x5cdc33:_0x5cdc33,_0x407a30+=_0x46b527['isActor']()?-_0x214e07:_0x214e07;else{if(_0x26ae1a['match'](/horz/i))_0x3a5ba1+=_0x46b527[_0x3b6fcc(0x172)]()?-_0x5cdc33:_0x5cdc33,_0x407a30+=_0x214e07;else{if(_0x26ae1a['match'](/vert/i)){if(_0x3b6fcc(0x12d)===_0x3b6fcc(0x33b)){if(this[_0x3b6fcc(0x466)]&&this[_0x3b6fcc(0x441)][_0x3b6fcc(0xcf9)](this[_0x3b6fcc(0x466)])){const _0x202361=this[_0x3b6fcc(0x441)][_0x3b6fcc(0x699)](this['_lastActor']);return this[_0x3b6fcc(0x232)](_0x202361);}else return this[_0x3b6fcc(0x1b2)]();}else _0x3a5ba1+=_0x5cdc33,_0x407a30+=_0x46b527[_0x3b6fcc(0x172)]()?-_0x214e07:_0x214e07;}}}}_0x46b527[_0x3b6fcc(0xa2c)](_0x3a5ba1,_0x407a30,_0x2d4c7f,_0x982000,_0x1cc82b,_0x336623),_0x46b527[_0x3b6fcc(0x1f3)](_0xcc7286);}if(_0xf909d3)_0x367f9b[_0x3b6fcc(0xbaa)](_0x3b6fcc(0xa16));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x339),_0x1afe5c=>{const _0x51eb8c=_0x4a80d9;if(!SceneManager[_0x51eb8c(0x1f8)]())return;VisuMZ[_0x51eb8c(0xb1e)](_0x1afe5c,_0x1afe5c);const _0x85bb88=$gameTemp['getLastPluginCommandInterpreter'](),_0x5a02ab=VisuMZ[_0x51eb8c(0x12b)](_0x1afe5c[_0x51eb8c(0x302)]),_0x3ee324=_0x1afe5c[_0x51eb8c(0x1c1)],_0x11fe46=_0x1afe5c[_0x51eb8c(0x9b6)],_0x520535=_0x1afe5c[_0x51eb8c(0x5bd)],_0x3c7ad2=_0x1afe5c[_0x51eb8c(0x2c5)];if(!_0x85bb88)return;for(const _0x5a0b33 of _0x5a02ab){if(!_0x5a0b33)continue;_0x5a0b33[_0x51eb8c(0x3cc)](_0x3ee324,_0x11fe46,_0x520535);}if(_0x3c7ad2)_0x85bb88[_0x51eb8c(0xbaa)](_0x51eb8c(0x93c));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa91),_0x34c86a=>{const _0x5731bb=_0x4a80d9;if(!SceneManager[_0x5731bb(0x1f8)]())return;VisuMZ[_0x5731bb(0xb1e)](_0x34c86a,_0x34c86a);const _0x568340=$gameTemp[_0x5731bb(0xc05)](),_0x2664ea=VisuMZ[_0x5731bb(0x12b)](_0x34c86a[_0x5731bb(0x302)]),_0x2aa34a=_0x34c86a[_0x5731bb(0x64f)],_0x42e8bd=_0x34c86a[_0x5731bb(0x7d0)],_0x50d3bf=_0x34c86a[_0x5731bb(0x9b6)],_0x23247f=_0x34c86a['EasingType'],_0x593d29=_0x34c86a['WaitForScale'];if(!_0x568340)return;for(const _0x9c1390 of _0x2664ea){if(_0x5731bb(0xce0)!=='onijc')this['setWaitMode'](_0x5731bb(0x2ff));else{if(!_0x9c1390)continue;_0x9c1390[_0x5731bb(0xc82)](_0x2aa34a,_0x42e8bd,_0x50d3bf,_0x23247f);}}if(_0x593d29)_0x568340[_0x5731bb(0xbaa)](_0x5731bb(0x8d7));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x891),_0x56f48a=>{const _0x49d0e1=_0x4a80d9;if(!SceneManager[_0x49d0e1(0x1f8)]())return;VisuMZ['ConvertParams'](_0x56f48a,_0x56f48a);const _0x1a0a7d=$gameTemp[_0x49d0e1(0xc05)](),_0x1e68bb=VisuMZ[_0x49d0e1(0x12b)](_0x56f48a[_0x49d0e1(0x302)]),_0x1a3aa4=_0x56f48a[_0x49d0e1(0x4cc)],_0x5f56cc=_0x56f48a['SkewY'],_0x13ce31=_0x56f48a['Duration'],_0x443a32=_0x56f48a[_0x49d0e1(0x5bd)],_0x360dde=_0x56f48a[_0x49d0e1(0xa30)];if(!_0x1a0a7d)return;for(const _0x12d27a of _0x1e68bb){if(!_0x12d27a)continue;_0x12d27a['skewBattler'](_0x1a3aa4,_0x5f56cc,_0x13ce31,_0x443a32);}if(_0x360dde)_0x1a0a7d['setWaitMode'](_0x49d0e1(0xb7e));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x3e9),_0x4dce56=>{const _0x273baf=_0x4a80d9;if(!SceneManager[_0x273baf(0x1f8)]())return;VisuMZ['ConvertParams'](_0x4dce56,_0x4dce56);const _0x51be47=$gameTemp[_0x273baf(0xc05)](),_0x129dfd=VisuMZ['CreateActionSequenceTargets'](_0x4dce56[_0x273baf(0x302)]),_0x28ebac=_0x4dce56[_0x273baf(0x2e3)],_0x33be6a=_0x4dce56['Duration'],_0x4f86c5=_0x4dce56['EasingType'],_0xd71b6a=_0x4dce56['RevertAngle'],_0x40057a=_0x4dce56[_0x273baf(0x888)];if(!_0x51be47)return;for(const _0x14e0a6 of _0x129dfd){if(_0x273baf(0x6d5)===_0x273baf(0x6d5)){if(!_0x14e0a6)continue;_0x14e0a6['spinBattler'](_0x28ebac,_0x33be6a,_0x4f86c5,_0xd71b6a);}else return _0x46f180[_0x273baf(0x562)][0x0];}if(_0x40057a)_0x51be47[_0x273baf(0xbaa)](_0x273baf(0xbfa));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_WaitForFloat',_0x100014=>{const _0x19d903=_0x4a80d9;if(!SceneManager[_0x19d903(0x1f8)]())return;const _0x11dfaa=$gameTemp[_0x19d903(0xc05)]();if(!_0x11dfaa)return;_0x11dfaa[_0x19d903(0xbaa)]('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x830),_0x33eac1=>{const _0x493c0e=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x4e5f06=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4e5f06)return;_0x4e5f06[_0x493c0e(0xbaa)](_0x493c0e(0x778));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Movement_WaitForMovement',_0x1ff874=>{const _0xaeb2a1=_0x4a80d9;if(!SceneManager[_0xaeb2a1(0x1f8)]())return;const _0x325366=$gameTemp[_0xaeb2a1(0xc05)]();if(!_0x325366)return;_0x325366[_0xaeb2a1(0xbaa)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x789),_0x563142=>{const _0x244fae=_0x4a80d9;if(!SceneManager[_0x244fae(0x1f8)]())return;const _0x53b25e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x53b25e)return;_0x53b25e[_0x244fae(0xbaa)]('battleOpacity');}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x146),_0x5d3301=>{const _0x37e90d=_0x4a80d9;if(!SceneManager[_0x37e90d(0x1f8)]())return;const _0xb5fe8b=$gameTemp[_0x37e90d(0xc05)]();if(!_0xb5fe8b)return;_0xb5fe8b[_0x37e90d(0xbaa)](_0x37e90d(0x8d7));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x94a),_0x13bc22=>{const _0x378c3d=_0x4a80d9;if(!SceneManager[_0x378c3d(0x1f8)]())return;const _0x196e4e=$gameTemp[_0x378c3d(0xc05)]();if(!_0x196e4e)return;_0x196e4e['setWaitMode'](_0x378c3d(0xb7e));}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x92f),_0x434e95=>{const _0xb93d58=_0x4a80d9;if(!SceneManager[_0xb93d58(0x1f8)]())return;const _0x2fb315=$gameTemp[_0xb93d58(0xc05)]();if(!_0x2fb315)return;_0x2fb315[_0xb93d58(0xbaa)](_0xb93d58(0xbfa));}),PluginManager[_0x4a80d9(0xa6a)](pluginData['name'],'ActSeq_Projectile_Animation',_0x44b7c4=>{const _0x4bc65a=_0x4a80d9;if(!SceneManager[_0x4bc65a(0x1f8)]())return;if(!Imported[_0x4bc65a(0xacc)])return;VisuMZ['ConvertParams'](_0x44b7c4,_0x44b7c4);const _0x3300c9=$gameTemp[_0x4bc65a(0xc05)](),_0x4a0175=_0x44b7c4['WaitForProjectile'];if(!_0x3300c9)return;const _0x22bccf=BattleManager['_spriteset'];if(!_0x22bccf)return;_0x22bccf[_0x4bc65a(0x715)](_0x44b7c4);if(_0x4a0175)_0x3300c9[_0x4bc65a(0xbaa)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Projectile_Icon',_0x1ae023=>{const _0x27e885=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x27e885(0xacc)])return;VisuMZ[_0x27e885(0xb1e)](_0x1ae023,_0x1ae023);const _0x5d99ff=$gameTemp[_0x27e885(0xc05)](),_0x43dde1=_0x1ae023['WaitForProjectile'];if(!_0x5d99ff)return;const _0x12d5d3=BattleManager[_0x27e885(0x967)];if(!_0x12d5d3)return;_0x12d5d3[_0x27e885(0x715)](_0x1ae023);if(_0x43dde1)_0x5d99ff['setWaitMode'](_0x27e885(0xb40));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x408),_0x45bcc2=>{const _0x1cb0c7=_0x4a80d9;if(!SceneManager[_0x1cb0c7(0x1f8)]())return;if(!Imported[_0x1cb0c7(0xacc)])return;VisuMZ[_0x1cb0c7(0xb1e)](_0x45bcc2,_0x45bcc2);const _0x1f8438=$gameTemp[_0x1cb0c7(0xc05)](),_0x480df7=_0x45bcc2[_0x1cb0c7(0x74e)];if(!_0x1f8438)return;const _0x49394a=BattleManager['_spriteset'];if(!_0x49394a)return;_0x49394a[_0x1cb0c7(0x715)](_0x45bcc2);if(_0x480df7)_0x1f8438[_0x1cb0c7(0xbaa)](_0x1cb0c7(0xb40));}),PluginManager['registerCommand'](pluginData['name'],_0x4a80d9(0x1eb),_0x4bbc12=>{const _0x2b62f2=_0x4a80d9;if(!SceneManager[_0x2b62f2(0x1f8)]())return;if(!Imported[_0x2b62f2(0x619)])return;VisuMZ[_0x2b62f2(0xb1e)](_0x4bbc12,_0x4bbc12);const _0x4706d5=$gameTemp[_0x2b62f2(0xc05)](),_0x26aafa=_0x4bbc12[_0x2b62f2(0xa30)];if(!_0x4706d5)return;$gameScreen[_0x2b62f2(0x5f9)](_0x4bbc12['SkewX'],_0x4bbc12[_0x2b62f2(0xc30)],_0x4bbc12[_0x2b62f2(0x9b6)],_0x4bbc12[_0x2b62f2(0x5bd)]);if(_0x26aafa)_0x4706d5[_0x2b62f2(0xbaa)](_0x2b62f2(0x4b2));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xbfb),_0x2d84d8=>{const _0x4acf6a=_0x4a80d9;if(!SceneManager[_0x4acf6a(0x1f8)]())return;if(!Imported[_0x4acf6a(0x619)])return;VisuMZ[_0x4acf6a(0xb1e)](_0x2d84d8,_0x2d84d8);const _0x25bdf8=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f9cfc=_0x2d84d8[_0x4acf6a(0xa30)];if(!_0x25bdf8)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x2d84d8[_0x4acf6a(0x9b6)],_0x2d84d8['EasingType']);if(_0x1f9cfc)_0x25bdf8[_0x4acf6a(0xbaa)](_0x4acf6a(0x4b2));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x62b),_0x1e93ab=>{const _0x5d28c3=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d28c3(0x619)])return;const _0x39b843=$gameTemp[_0x5d28c3(0xc05)]();if(!_0x39b843)return;_0x39b843[_0x5d28c3(0xbaa)](_0x5d28c3(0x4b2));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Target_CurrentIndex',_0xb4d1e=>{const _0x5066be=_0x4a80d9;if(!SceneManager[_0x5066be(0x1f8)]())return;VisuMZ[_0x5066be(0xb1e)](_0xb4d1e,_0xb4d1e);const _0x2c5827=$gameTemp[_0x5066be(0xc05)](),_0x4c71cc=_0xb4d1e[_0x5066be(0x6a9)],_0xd2dd4b=_0xb4d1e['JumpToLabel'];if(!_0x2c5827)return;BattleManager['_targetIndex']=_0x4c71cc,BattleManager[_0x5066be(0xcca)]=BattleManager[_0x5066be(0x92c)]?BattleManager[_0x5066be(0x92c)][BattleManager[_0x5066be(0xb0f)]]||null:null,BattleManager[_0x5066be(0xcca)]&&_0xd2dd4b[_0x5066be(0x7ff)]()['trim']()!==_0x5066be(0xade)&&('RKQuc'!=='XCjCR'?_0x2c5827[_0x5066be(0x8f7)]([_0xd2dd4b]):_0x26eb31[_0x5066be(0xbaa)](_0x5066be(0x42d)));}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x11c),_0x8a8180=>{const _0x38fda1=_0x4a80d9;if(!SceneManager[_0x38fda1(0x1f8)]())return;VisuMZ[_0x38fda1(0xb1e)](_0x8a8180,_0x8a8180);const _0x1b7b53=$gameTemp[_0x38fda1(0xc05)](),_0x3c01ab=_0x8a8180[_0x38fda1(0x729)];if(!_0x1b7b53)return;BattleManager[_0x38fda1(0xb0f)]++,BattleManager[_0x38fda1(0xcca)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(BattleManager['_target']&&_0x3c01ab[_0x38fda1(0x7ff)]()[_0x38fda1(0x893)]()!=='UNTITLED'){if(_0x38fda1(0x231)===_0x38fda1(0x32f))return this[_0x38fda1(0x10e)]();else _0x1b7b53[_0x38fda1(0x8f7)]([_0x3c01ab]);}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],'ActSeq_Target_PrevTarget',_0x1f580c=>{const _0x4609e1=_0x4a80d9;if(!SceneManager[_0x4609e1(0x1f8)]())return;VisuMZ[_0x4609e1(0xb1e)](_0x1f580c,_0x1f580c);const _0x465570=$gameTemp['getLastPluginCommandInterpreter'](),_0x7526f4=_0x1f580c[_0x4609e1(0x729)];if(!_0x465570)return;BattleManager[_0x4609e1(0xb0f)]--,BattleManager[_0x4609e1(0xcca)]=BattleManager[_0x4609e1(0x92c)][BattleManager[_0x4609e1(0xb0f)]]||null,BattleManager[_0x4609e1(0xcca)]&&_0x7526f4['toUpperCase']()[_0x4609e1(0x893)]()!==_0x4609e1(0xade)&&_0x465570[_0x4609e1(0x8f7)]([_0x7526f4]);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xb95),_0x2e3746=>{const _0x21cd19=_0x4a80d9;if(!SceneManager[_0x21cd19(0x1f8)]())return;VisuMZ[_0x21cd19(0xb1e)](_0x2e3746,_0x2e3746);const _0xc09624=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bdbdd=_0x2e3746[_0x21cd19(0x7c5)],_0x50d77b=_0x2e3746['JumpToLabel'];if(!_0xc09624)return;const _0x3a3a3=BattleManager[_0x21cd19(0xb0f)];for(;;){BattleManager[_0x21cd19(0xb0f)]=Math[_0x21cd19(0x584)](BattleManager[_0x21cd19(0x92c)][_0x21cd19(0x6fc)]);if(!_0x3bdbdd)break;if(BattleManager[_0x21cd19(0xb0f)]!==_0x3a3a3)break;if(BattleManager['_allTargets'][_0x21cd19(0x6fc)]<=0x1){BattleManager[_0x21cd19(0xb0f)]=0x0;break;}}BattleManager['_target']=BattleManager[_0x21cd19(0x92c)][BattleManager[_0x21cd19(0xb0f)]]||null,BattleManager['_target']&&_0x50d77b[_0x21cd19(0x7ff)]()[_0x21cd19(0x893)]()!==_0x21cd19(0xade)&&('LRGKy'!=='LRGKy'?this['_targetBattlerKey']='':_0xc09624[_0x21cd19(0x8f7)]([_0x50d77b]));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0xa69),_0x37ac22=>{const _0x478cbf=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x478cbf(0xb8c)])return;if(!ConfigManager[_0x478cbf(0x73b)])return;VisuMZ[_0x478cbf(0xb1e)](_0x37ac22,_0x37ac22);const _0x5a7dc4=VisuMZ[_0x478cbf(0x12b)](_0x37ac22[_0x478cbf(0x302)]);let _0x2c4512=_0x37ac22[_0x478cbf(0x9b0)]||'';for(const _0xe0790 of _0x5a7dc4){if(_0x478cbf(0x51d)===_0x478cbf(0x8c6)){if(!_0x4d5919[_0x478cbf(0x72a)])return;const _0x1b561a=_0x238226[_0x478cbf(0xb97)][_0x478cbf(0x967)];if(!_0x1b561a)return;if(_0x3c9968[_0x478cbf(0x689)]['version']<=1.04){_0xca088a(_0x478cbf(0x939)),_0x3eca35[_0x478cbf(0x628)]();return;}_0x3ad007[_0x478cbf(0xb1e)](_0x555102,_0x56fa9a);const _0x1757b6=_0x26d7b7['getLastPluginCommandInterpreter'](),_0x1cc596=_0x59e946['ms']||0x1;_0x1a3b72[_0x478cbf(0x689)][_0x478cbf(0x5e9)](_0x1cc596,_0x1757b6);}else{if(!_0xe0790)continue;_0xe0790[_0x478cbf(0x543)](_0x2c4512);}}}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x635),_0x5c1432=>{const _0x1cde35=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BattleVoices'])return;if(!ConfigManager[_0x1cde35(0x73b)])return;VisuMZ[_0x1cde35(0xb1e)](_0x5c1432,_0x5c1432);const _0x4c4ca2=VisuMZ[_0x1cde35(0x12b)](_0x5c1432[_0x1cde35(0x302)]);let _0x13a50d=(_0x5c1432[_0x1cde35(0x415)]||'')+(_0x5c1432[_0x1cde35(0x9db)]||'');for(const _0x45dfe8 of _0x4c4ca2){if(!_0x45dfe8)continue;_0x45dfe8['playBattleVoice'](_0x13a50d);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Weapon_ClearActiveWeapon',_0x1e3f6f=>{const _0x47fe6e=_0x4a80d9;if(!SceneManager[_0x47fe6e(0x1f8)]())return;VisuMZ['ConvertParams'](_0x1e3f6f,_0x1e3f6f);const _0x2b8d3d=VisuMZ[_0x47fe6e(0x12b)](_0x1e3f6f['Targets']);for(const _0x10b6d4 of _0x2b8d3d){if(_0x47fe6e(0x657)!==_0x47fe6e(0x657)){if(_0x34f46b[_0x47fe6e(0x24f)])return _0x29700b[_0x47fe6e(0x24f)](_0x35d21e,_0x5c638c);let _0x410391='';if(_0x51df78[_0x47fe6e(0xcf9)](_0xf61810))_0x410391='Actor-%1-%2'[_0x47fe6e(0x7d6)](_0x479237['id'],_0x180714);if(_0x56f3e5[_0x47fe6e(0xcf9)](_0x3eb2e3))_0x410391=_0x47fe6e(0xb86)[_0x47fe6e(0x7d6)](_0x3f2b81['id'],_0x1a2b9b);if(_0x3f1989[_0x47fe6e(0xcf9)](_0x5e2632))_0x410391=_0x47fe6e(0x484)[_0x47fe6e(0x7d6)](_0x44fcce['id'],_0x439450);if(_0x56363e['includes'](_0x2ee89d))_0x410391='Item-%1-%2'[_0x47fe6e(0x7d6)](_0x1dd1ad['id'],_0x2fb30c);if(_0x10e74d[_0x47fe6e(0xcf9)](_0x567ebd))_0x410391='Weapon-%1-%2'[_0x47fe6e(0x7d6)](_0x43efcd['id'],_0x1fae7e);if(_0x104267[_0x47fe6e(0xcf9)](_0xb4b83))_0x410391=_0x47fe6e(0xc65)['format'](_0xadc806['id'],_0x3ea303);if(_0x7e1c8c[_0x47fe6e(0xcf9)](_0xa81a61))_0x410391='Enemy-%1-%2'[_0x47fe6e(0x7d6)](_0x3eb6f0['id'],_0x36d56a);if(_0x213cc3['includes'](_0x4743ab))_0x410391=_0x47fe6e(0xb44)[_0x47fe6e(0x7d6)](_0x4f3873['id'],_0x301d45);return _0x410391;}else{if(!_0x10b6d4)continue;if(!_0x10b6d4[_0x47fe6e(0x172)]())continue;_0x10b6d4[_0x47fe6e(0x55e)]();}}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x878),_0x11828b=>{const _0xab7bda=_0x4a80d9;if(!SceneManager[_0xab7bda(0x1f8)]())return;VisuMZ[_0xab7bda(0xb1e)](_0x11828b,_0x11828b);const _0x435784=$gameTemp[_0xab7bda(0xc05)]();let _0x559f13=![];const _0x40c7a2=_0x11828b[_0xab7bda(0x729)],_0x36d3f5=VisuMZ[_0xab7bda(0x12b)](_0x11828b[_0xab7bda(0x302)]);for(const _0x1b4162 of _0x36d3f5){if(!_0x1b4162)continue;if(!_0x1b4162[_0xab7bda(0x172)]())continue;_0x1b4162[_0xab7bda(0x3e4)](),_0x1b4162[_0xab7bda(0xc45)]()['length']>0x0?'iXiYs'==='iXiYs'?_0x559f13=!![]:_0x443de7[_0xab7bda(0xba6)][_0xab7bda(0x71f)][_0xab7bda(0x432)](this):_0x1b4162[_0xab7bda(0x55e)]();}_0x559f13&&_0x40c7a2[_0xab7bda(0x7ff)]()['trim']()!==_0xab7bda(0xade)&&_0x435784[_0xab7bda(0x8f7)]([_0x40c7a2]);}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x9bd),_0x1b1271=>{const _0x5f5577=_0x4a80d9;if(!SceneManager[_0x5f5577(0x1f8)]())return;VisuMZ[_0x5f5577(0xb1e)](_0x1b1271,_0x1b1271);let _0xc8f74=_0x1b1271['SlotID'];_0xc8f74--,_0xc8f74=Math['max'](_0xc8f74,0x0);const _0x3c880c=VisuMZ[_0x5f5577(0x12b)](_0x1b1271[_0x5f5577(0x302)]);for(const _0x32efcb of _0x3c880c){if(!_0x32efcb)continue;if(!_0x32efcb['isActor']())continue;_0x32efcb[_0x5f5577(0x60d)](_0xc8f74);}}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Zoom_Scale',_0x51ae10=>{const _0x10a4ba=_0x4a80d9;if(!SceneManager[_0x10a4ba(0x1f8)]())return;if(!Imported[_0x10a4ba(0x619)])return;VisuMZ[_0x10a4ba(0xb1e)](_0x51ae10,_0x51ae10);const _0x4c102d=$gameTemp[_0x10a4ba(0xc05)](),_0x4aae07=_0x51ae10['WaitForZoom'];if(!_0x4c102d)return;$gameScreen[_0x10a4ba(0x452)](_0x51ae10[_0x10a4ba(0x8ed)],_0x51ae10[_0x10a4ba(0x9b6)],_0x51ae10[_0x10a4ba(0x5bd)]);if(_0x4aae07)_0x4c102d[_0x10a4ba(0xbaa)](_0x10a4ba(0x464));}),PluginManager['registerCommand'](pluginData[_0x4a80d9(0x380)],_0x4a80d9(0x1f0),_0x17debc=>{const _0x24ef0a=_0x4a80d9;if(!SceneManager[_0x24ef0a(0x1f8)]())return;if(!Imported[_0x24ef0a(0x619)])return;VisuMZ[_0x24ef0a(0xb1e)](_0x17debc,_0x17debc);const _0x45cbfb=$gameTemp['getLastPluginCommandInterpreter'](),_0x4cec0e=_0x17debc[_0x24ef0a(0xaa4)];if(!_0x45cbfb)return;$gameScreen['setBattleZoom'](0x1,_0x17debc[_0x24ef0a(0x9b6)],_0x17debc[_0x24ef0a(0x5bd)]);if(_0x4cec0e)_0x45cbfb[_0x24ef0a(0xbaa)]('battleZoom');}),PluginManager[_0x4a80d9(0xa6a)](pluginData[_0x4a80d9(0x380)],'ActSeq_Zoom_WaitForZoom',_0x3067e1=>{const _0x4c2a69=_0x4a80d9;if(!SceneManager[_0x4c2a69(0x1f8)]())return;if(!Imported[_0x4c2a69(0x619)])return;const _0x34c711=$gameTemp[_0x4c2a69(0xc05)]();if(!_0x34c711)return;_0x34c711[_0x4c2a69(0xbaa)](_0x4c2a69(0x464));}),VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x9fe)]=Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0xc19)],Scene_Boot[_0x4a80d9(0xba6)]['onDatabaseLoaded']=function(){const _0x503342=_0x4a80d9;this[_0x503342(0xb3e)](),this[_0x503342(0x143)](),this[_0x503342(0x170)](),this[_0x503342(0x109)](),VisuMZ['BattleCore']['Scene_Boot_onDatabaseLoaded'][_0x503342(0x432)](this),this[_0x503342(0x63b)](),this[_0x503342(0x67a)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x503342(0x617)]();},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0x63b)]=function(){const _0x157ba2=_0x4a80d9;if(VisuMZ[_0x157ba2(0x89d)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x157ba2(0xa94)](),this[_0x157ba2(0x816)]();},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0xb3e)]=function(){const _0x3eb23e=_0x4a80d9,_0x2c64ad=$dataSystem[_0x3eb23e(0xcce)][_0x3eb23e(0x6fc)];for(let _0x4143dc=0x0;_0x4143dc<_0x2c64ad;_0x4143dc++){const _0x3f909e=$dataSystem[_0x3eb23e(0x562)][_0x4143dc];if(_0x3f909e)continue;$dataSystem[_0x3eb23e(0x562)][_0x4143dc]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x1b721b=_0x4a80d9,_0x425141=VisuMZ[_0x1b721b(0xbe1)]['Settings'];_0x425141[_0x1b721b(0x6ea)]['PopupPosition']===undefined&&(_0x425141[_0x1b721b(0x6ea)][_0x1b721b(0x781)]=_0x1b721b(0xb12));_0x425141[_0x1b721b(0x490)][_0x1b721b(0x73e)]===undefined&&(_0x425141[_0x1b721b(0x490)]['SmoothImage']=![]);if(_0x425141[_0x1b721b(0x916)][_0x1b721b(0x73e)]===undefined){if('LmNsn'!==_0x1b721b(0x819))_0x425141[_0x1b721b(0x916)][_0x1b721b(0x73e)]=!![];else{if(!_0x170fe3[_0x1b721b(0x1f8)]())return;if(!_0x251831['VisuMZ_2_BattleSystemSTB'])return;if(!_0x415a2b[_0x1b721b(0x459)]())return;_0x1bb981[_0x1b721b(0xb1e)](_0x50708f,_0x4eb13b);const _0x9a51aa=_0x257a32[_0x1b721b(0x2a5)];_0x234925[_0x1b721b(0x139)]&&_0x555252[_0x1b721b(0x139)]['stbGainInstant'](_0x9a51aa);}}_0x425141[_0x1b721b(0x490)][_0x1b721b(0x750)]===undefined&&(_0x425141['Actor'][_0x1b721b(0x750)]=![]),_0x425141[_0x1b721b(0x490)][_0x1b721b(0x116)]===undefined&&(_0x425141['Actor'][_0x1b721b(0x116)]=!![]);},VisuMZ[_0x4a80d9(0x12e)]={},Scene_Boot[_0x4a80d9(0xba6)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x17a0d0=_0x4a80d9;for(const _0x505a3 of VisuMZ[_0x17a0d0(0xbe1)][_0x17a0d0(0x668)][_0x17a0d0(0x6ea)][_0x17a0d0(0xbcd)]){if(!_0x505a3)continue;const _0x1c849b=_0x505a3[_0x17a0d0(0xba4)][_0x17a0d0(0x7ff)]()[_0x17a0d0(0x893)]();VisuMZ[_0x17a0d0(0x12e)][_0x1c849b]=_0x505a3;}},VisuMZ[_0x4a80d9(0xbe1)]['RegExp']={},Scene_Boot['prototype'][_0x4a80d9(0x109)]=function(){const _0x48c17d=_0x4a80d9,_0xf9bacb=VisuMZ['BattleCore'][_0x48c17d(0x4ef)],_0x45f5d9=_0x48c17d(0x95f),_0x16f672=[[_0x48c17d(0x9dc),_0x48c17d(0x3c6)],[_0x48c17d(0x910),'POST-']],_0xb46363=[[_0x48c17d(0x53f),_0x48c17d(0x991)],[_0x48c17d(0xa1d),'JS\x20%1DAMAGE\x20%2']],_0x5f0a16=[['',''],[_0x48c17d(0x214),_0x48c17d(0x7fc)],[_0x48c17d(0x4b5),'AS\x20TARGET']];for(const _0x295bc2 of _0xb46363){if(_0x48c17d(0x463)===_0x48c17d(0x9fc))this[_0x48c17d(0xc83)]();else for(const _0x4ded39 of _0x5f0a16){for(const _0x52fd1d of _0x16f672){if(_0x48c17d(0xcb9)===_0x48c17d(0x7a9))this[_0x48c17d(0x98c)]=![],this[_0x48c17d(0x8fb)]=_0x46fc57[_0x48c17d(0x29e)],this['_endingBattle']=![],this[_0x48c17d(0x63c)]('PreStartBattleJS'),_0x2a6ede[_0x48c17d(0xbe1)][_0x48c17d(0x837)][_0x48c17d(0x432)](this),this[_0x48c17d(0x63c)](_0x48c17d(0xbf2));else{const _0x1a463e=_0x295bc2[0x0][_0x48c17d(0x7d6)](_0x52fd1d[0x0],_0x4ded39[0x0]),_0x330292=_0x295bc2[0x1]['format'](_0x52fd1d[0x1],_0x4ded39[0x1])[_0x48c17d(0x893)](),_0x174856=new RegExp(_0x45f5d9[_0x48c17d(0x7d6)](_0x330292),'i');_0xf9bacb[_0x1a463e]=_0x174856;}}}}const _0x14e40b=[[_0x48c17d(0x354),_0x48c17d(0x233)],[_0x48c17d(0x16b),_0x48c17d(0x28b)]];for(const _0x185639 of _0x14e40b){if(_0x48c17d(0x3e8)!==_0x48c17d(0x3e8))return 0x1;else for(const _0x363978 of _0x16f672){if(_0x48c17d(0xcd6)!==_0x48c17d(0xcd6)){const _0x4785c1=_0x4bd05f[_0x48c17d(0x4ac)](),_0x320c7b=_0x4785c1['addedStateObjects']();for(const _0x5e4f49 of _0x320c7b){const _0x290ab2=_0x385729[_0x48c17d(0x172)]()?_0x5e4f49[_0x48c17d(0x9a4)]:_0x5e4f49[_0x48c17d(0xc09)];_0x290ab2&&_0x4213b5[_0x48c17d(0xbe1)][_0x48c17d(0x668)][_0x48c17d(0x47d)][_0x48c17d(0x5be)]&&(this[_0x48c17d(0x510)](_0x48c17d(0x5b9)),this[_0x48c17d(0x510)](_0x48c17d(0xcdc)),this['push'](_0x48c17d(0x917)),this[_0x48c17d(0x510)](_0x48c17d(0x496),_0x290ab2[_0x48c17d(0x7d6)](_0x346c3d[_0x48c17d(0x380)]())),this['push'](_0x48c17d(0xca3))),_0x5e4f49['id']===_0x4186d3['deathStateId']()&&this[_0x48c17d(0x510)]('performCollapse',_0x42d55a);}}else{const _0x35256f=_0x185639[0x0][_0x48c17d(0x7d6)](_0x363978[0x0]),_0x19eb1b=_0x185639[0x1]['format'](_0x363978[0x1]),_0x813937=new RegExp(_0x45f5d9['format'](_0x19eb1b),'i');_0xf9bacb[_0x35256f]=_0x813937;}}}const _0x29e276=[['%1StartBattleJS',_0x48c17d(0xba5)],[_0x48c17d(0x307),_0x48c17d(0xa0a)],[_0x48c17d(0x52b),'JS\x20BATTLE\x20VICTORY'],['BattleDefeatJS',_0x48c17d(0x356)],['EscapeSuccessJS',_0x48c17d(0xa12)],[_0x48c17d(0x127),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS','JS\x20%1START\x20TURN'],[_0x48c17d(0x8e8),'JS\x20%1END\x20TURN'],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0x368b9b of _0x29e276){if(_0x48c17d(0x948)===_0x48c17d(0x948))for(const _0x2c8251 of _0x16f672){if('AVvHV'===_0x48c17d(0x5ce)){const _0x2a0513=_0x368b9b[0x0]['format'](_0x2c8251[0x0]),_0x2f7087=_0x368b9b[0x1][_0x48c17d(0x7d6)](_0x2c8251[0x1]),_0x10dcca=new RegExp(_0x45f5d9[_0x48c17d(0x7d6)](_0x2f7087),'i');_0xf9bacb[_0x2a0513]=_0x10dcca;}else{const _0x5810c7=this['result']();if(_0x5810c7['missed']||_0x5810c7['evaded']){const _0x2626e2=_0x5e2fe4[_0x48c17d(0xa9b)](_0x5810c7);_0x2626e2['hpAffected']=![],_0x2626e2[_0x48c17d(0x4a9)]=0x0,this['_damagePopupArray']['push'](_0x2626e2);}if(_0x5810c7[_0x48c17d(0x6bb)]){const _0xd18f3f=_0x3006a2[_0x48c17d(0xa9b)](_0x5810c7);_0xd18f3f[_0x48c17d(0x534)]=![],_0xd18f3f[_0x48c17d(0xad9)]=![],_0xd18f3f[_0x48c17d(0x4a9)]=0x0,this['_damagePopupArray'][_0x48c17d(0x510)](_0xd18f3f);}if(_0x5810c7[_0x48c17d(0x4a9)]!==0x0){const _0x1311ac=_0x6b9b4a['makeDeepCopy'](_0x5810c7);_0x1311ac[_0x48c17d(0x534)]=![],_0x1311ac[_0x48c17d(0xad9)]=![],_0x1311ac[_0x48c17d(0x6bb)]=![],this[_0x48c17d(0x45a)][_0x48c17d(0x510)](_0x1311ac);}}}else _0x265697[_0x48c17d(0xf4)]['x']=this['mainSpriteScaleX'](),_0x3d2d28['scale']['y']=this[_0x48c17d(0x1bb)]();}},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0x3fe)]=function(){const _0x455c55=_0x4a80d9,_0x627f85=$dataSkills[_0x455c55(0x179)]($dataItems);for(const _0x1f3531 of _0x627f85){if(_0x455c55(0x78e)!==_0x455c55(0xc66)){if(!_0x1f3531)continue;VisuMZ[_0x455c55(0xbe1)][_0x455c55(0xcb2)](_0x1f3531);}else{if(!_0x5d8e36['isPhysical']())return![];if(!_0x194350[_0x455c55(0x61a)]())return![];if(!_0x207d98[_0x455c55(0x559)]())return![];return _0x56650c[_0x455c55(0xbe1)][_0x455c55(0x668)][_0x455c55(0x8e0)][_0x455c55(0xc24)];}}},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0xa94)]=function(){const _0x415b95=_0x4a80d9,_0x5885c3=$dataActors[_0x415b95(0x179)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x3d83a8 of _0x5885c3){if(!_0x3d83a8)continue;VisuMZ[_0x415b95(0xbe1)][_0x415b95(0x196)](_0x3d83a8);}},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0x67a)]=function(){const _0x390242=_0x4a80d9,_0x5548c0=VisuMZ[_0x390242(0xbe1)]['Settings'][_0x390242(0x1c6)][_0x390242(0x248)],_0x2146fb=[];for(const _0x4dc4c3 of _0x5548c0){const _0x79af23=$dataTroops[_0x4dc4c3];if(_0x79af23)_0x2146fb[_0x390242(0x510)](JsonEx[_0x390242(0xa9b)](_0x79af23));}for(const _0x1fc8ea of $dataTroops){if(!_0x1fc8ea)continue;for(const _0x19e9f8 of _0x2146fb){if(_0x390242(0x344)===_0x390242(0x344)){if(_0x19e9f8['id']===_0x1fc8ea['id'])continue;_0x1fc8ea['pages']=_0x1fc8ea[_0x390242(0x725)][_0x390242(0x179)](_0x19e9f8[_0x390242(0x725)]);}else{const _0x4720c2=this[_0x390242(0xa38)]()[_0x390242(0x6e9)]||0x0,_0x5afa03=_0x3dab3c[_0x390242(0x562)][_0x4720c2];_0x5afa03&&this[_0x390242(0xbfd)](_0x5afa03[_0x390242(0x3ac)]);}}}},Scene_Boot['prototype'][_0x4a80d9(0x19d)]=function(){const _0x1d5f3f=_0x4a80d9,_0x5f3480=VisuMZ[_0x1d5f3f(0xbe1)]['Settings'][_0x1d5f3f(0x1c6)];if(_0x5f3480[_0x1d5f3f(0xc52)]>0x0&&$dataCommonEvents[_0x5f3480['BattleStartEvent']]){if(_0x1d5f3f(0xb28)===_0x1d5f3f(0xb28)){const _0x3d5e75=$dataCommonEvents[_0x5f3480[_0x1d5f3f(0xc52)]],_0x344e4a=_0x3d5e75['list'][_0x1d5f3f(0x6fc)]-0x2,_0x56df50=_0x3d5e75[_0x1d5f3f(0xa03)][_0x344e4a];if(_0x56df50&&_0x56df50['code']!==0xe6){if(_0x1d5f3f(0x769)==='vCUQm'){const _0x478565={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xb03136=_0x3d5e75['list'][_0x1d5f3f(0xa06)]();_0x3d5e75[_0x1d5f3f(0xa03)]['unshift'](_0x478565),_0x3d5e75[_0x1d5f3f(0xa03)]['unshift'](_0xb03136);}else return _0x17a569[_0x1d5f3f(0xbe1)]['Settings']['Enemy'][_0x1d5f3f(0x63d)]||_0x225722[_0x1d5f3f(0x552)]();}}else{if(!_0x14cb13[_0x1d5f3f(0x72a)])return;const _0x326cc3=_0x4dcd92[_0x1d5f3f(0xb97)][_0x1d5f3f(0x967)];if(!_0x326cc3)return;if(_0x236faf[_0x1d5f3f(0x689)][_0x1d5f3f(0xbdd)]<=1.04){_0x40a2eb('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x38b8f0[_0x1d5f3f(0x628)]();return;}_0x27b3c7[_0x1d5f3f(0xb1e)](_0x12d3c8,_0x12fa9f);const _0xcddd4b=_0x1b76ed['getLastPluginCommandInterpreter'](),_0x5afdab=_0x77ff32['max'](0.01,_0x5afcd2[_0x1d5f3f(0x8ed)]);_0x8e22d6['setBattleImpactTimeScale'](_0x5afdab,_0xcddd4b);}}},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0x617)]=function(){const _0x4ccb24=_0x4a80d9;VisuMZ['BattleCore'][_0x4ccb24(0xc00)](),VisuMZ[_0x4ccb24(0xbe1)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x4ccb24(0xbe1)][_0x4ccb24(0xb0b)]($dataItems);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc00)]=function(){const _0xb506e1=_0x4a80d9;VisuMZ['BattleCore'][_0xb506e1(0x74b)]={};for(const _0x204a56 of $dataCommonEvents){if(!_0x204a56)continue;if(_0x204a56[_0xb506e1(0x380)]['match'](/\[(.*)\]/i)){if('vLHFK'===_0xb506e1(0x18d)){let _0x26107c=String(RegExp['$1'])[_0xb506e1(0x220)](/,/g,'')[_0xb506e1(0x7ff)]()[_0xb506e1(0x893)]();VisuMZ[_0xb506e1(0xbe1)]['_commonEventKey'][_0x26107c]=_0x204a56['id'];}else return _0x34df7a(_0x3fb125['$1']);}}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb0b)]=function(_0x5d9684){const _0x57aac3=_0x4a80d9;for(const _0x443d86 of _0x5d9684){if(!_0x443d86)continue;VisuMZ['BattleCore'][_0x57aac3(0x352)](_0x443d86);}},VisuMZ['BattleCore'][_0x4a80d9(0x352)]=function(_0xd75216){const _0x5180c3=_0x4a80d9;if(!_0xd75216)return;if(!_0xd75216[_0x5180c3(0x451)])return;VisuMZ['BattleCore'][_0x5180c3(0x74b)]=VisuMZ['BattleCore'][_0x5180c3(0x74b)]||{};const _0x86a08f=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x1a6039=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3eefea=[];const _0x442288=_0xd75216[_0x5180c3(0x6c8)][_0x5180c3(0x605)](_0x86a08f);if(_0x442288){for(const _0x3ed2a4 of _0x442288){_0x3ed2a4[_0x5180c3(0x605)](_0x86a08f);const _0x572eb3=String(RegExp['$1'])[_0x5180c3(0x123)](',')[_0x5180c3(0xc3f)](_0xda1532=>String(_0xda1532)['toUpperCase']()[_0x5180c3(0x893)]());_0x3eefea=_0x3eefea[_0x5180c3(0x179)](_0x572eb3);}if(!_0xd75216[_0x5180c3(0x6c8)][_0x5180c3(0x605)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x5180c3(0x6dd)!=='fpuWT'){const _0x147952=this[_0x5180c3(0x46b)](_0x5180c3(0xafe),_0x4a83d8['id']);this[_0x5180c3(0x8b9)](_0x147952||0x0);}else _0xd75216[_0x5180c3(0x6c8)]+=_0x5180c3(0xc80);};}if(_0xd75216[_0x5180c3(0x6c8)][_0x5180c3(0x605)](_0x1a6039)){const _0x135497=String(RegExp['$1'])[_0x5180c3(0x123)](/[\r\n]+/)[_0x5180c3(0xc3f)](_0x1fdd04=>String(_0x1fdd04)[_0x5180c3(0x7ff)]()[_0x5180c3(0x893)]());_0x3eefea=_0x3eefea[_0x5180c3(0x179)](_0x135497);!_0xd75216['note'][_0x5180c3(0x605)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xd75216[_0x5180c3(0x6c8)]+=_0x5180c3(0xc80));;}for(const _0x1bb263 of _0x3eefea){if(_0x5180c3(0xaa1)!==_0x5180c3(0xaa1))this['_svBattlerSprite'][_0x5180c3(0x174)]['scale']['x']=-0x1/(this['scale']['x']||0.001),this[_0x5180c3(0x2ae)][_0x5180c3(0x174)][_0x5180c3(0xf4)]['y']=0x1/(this[_0x5180c3(0xf4)]['y']||0.001);else{if(VisuMZ[_0x5180c3(0xbe1)][_0x5180c3(0x74b)][_0x1bb263]){const _0x1b185a=VisuMZ[_0x5180c3(0xbe1)][_0x5180c3(0x74b)][_0x1bb263],_0x31f663={'code':0x2c,'dataId':_0x1b185a,'value1':0x1,'value2':0x0};_0xd75216[_0x5180c3(0x451)][_0x5180c3(0x510)](_0x31f663);}}}},Scene_Boot[_0x4a80d9(0xba6)][_0x4a80d9(0x816)]=function(){const _0x3b2ca9=_0x4a80d9,_0x1c7ad3=$dataSkills[_0x3b2ca9(0x179)]($dataItems);for(const _0x59557d of _0x1c7ad3){if(_0x3b2ca9(0xb6f)!=='deGIY'){if(!_0x59557d)continue;VisuMZ[_0x3b2ca9(0xbe1)][_0x3b2ca9(0x592)](_0x59557d);}else _0x23762b[_0x3b2ca9(0xba6)]['start'][_0x3b2ca9(0x432)](this),this[_0x3b2ca9(0x967)]&&this[_0x3b2ca9(0x967)]['update'](),_0x477e15[_0x3b2ca9(0x37c)]&&_0x40b7a3[_0x3b2ca9(0xc86)]();}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x338)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x4a80d9(0x338)]=function(_0xaa785f){const _0x2d80cf=_0x4a80d9;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ[_0x2d80cf(0xbe1)][_0x2d80cf(0x338)]['call'](this,_0xaa785f),VisuMZ[_0x2d80cf(0xbe1)][_0x2d80cf(0x196)](_0xaa785f);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x135)]=VisuMZ[_0x4a80d9(0x135)],VisuMZ['ParseClassNotetags']=function(_0x24d200){const _0x54db96=_0x4a80d9;VisuMZ[_0x54db96(0xbe1)][_0x54db96(0x135)]&&(_0x54db96(0xb24)!==_0x54db96(0xb24)?this[_0x54db96(0x3f0)]='':VisuMZ[_0x54db96(0xbe1)][_0x54db96(0x135)]['call'](this,_0x24d200)),VisuMZ[_0x54db96(0xbe1)]['Parse_Notetags_TraitObjects'](_0x24d200);},VisuMZ[_0x4a80d9(0xbe1)]['ParseSkillNotetags']=VisuMZ[_0x4a80d9(0x6b8)],VisuMZ[_0x4a80d9(0x6b8)]=function(_0x317366){const _0x30f5c1=_0x4a80d9;VisuMZ[_0x30f5c1(0xbe1)][_0x30f5c1(0x6b8)]&&(_0x30f5c1(0xa60)==='LOIBJ'?_0x1a3bf1[_0x30f5c1(0xa1a)]([this],_0x62ac7a):VisuMZ['BattleCore']['ParseSkillNotetags'][_0x30f5c1(0x432)](this,_0x317366)),VisuMZ[_0x30f5c1(0xbe1)][_0x30f5c1(0xcb2)](_0x317366),VisuMZ[_0x30f5c1(0xbe1)][_0x30f5c1(0x592)](_0x317366);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2b7)]=VisuMZ[_0x4a80d9(0x2b7)],VisuMZ['ParseItemNotetags']=function(_0x544d48){const _0x3cef5c=_0x4a80d9;VisuMZ[_0x3cef5c(0xbe1)][_0x3cef5c(0x2b7)]&&VisuMZ['BattleCore'][_0x3cef5c(0x2b7)][_0x3cef5c(0x432)](this,_0x544d48),VisuMZ[_0x3cef5c(0xbe1)][_0x3cef5c(0xcb2)](_0x544d48),VisuMZ[_0x3cef5c(0xbe1)]['Parse_Notetags_Targets'](_0x544d48);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbed)]=VisuMZ[_0x4a80d9(0xbed)],VisuMZ['ParseWeaponNotetags']=function(_0x255171){const _0x4d0dd7=_0x4a80d9;VisuMZ['BattleCore'][_0x4d0dd7(0xbed)]&&VisuMZ['BattleCore']['ParseWeaponNotetags']['call'](this,_0x255171),VisuMZ['BattleCore'][_0x4d0dd7(0x196)](_0x255171);},VisuMZ[_0x4a80d9(0xbe1)]['ParseArmorNotetags']=VisuMZ[_0x4a80d9(0xbee)],VisuMZ['ParseArmorNotetags']=function(_0x2d3158){const _0x495b60=_0x4a80d9;VisuMZ[_0x495b60(0xbe1)][_0x495b60(0xbee)]&&('vxcDt'!==_0x495b60(0x773)?(_0x49625d=_0x5a2f47(_0x1abab5['$1']),_0x2f84ff--):VisuMZ[_0x495b60(0xbe1)][_0x495b60(0xbee)][_0x495b60(0x432)](this,_0x2d3158)),VisuMZ[_0x495b60(0xbe1)]['Parse_Notetags_TraitObjects'](_0x2d3158);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x433)]=VisuMZ[_0x4a80d9(0x433)],VisuMZ[_0x4a80d9(0x433)]=function(_0xf71f03){const _0x1425e2=_0x4a80d9;VisuMZ[_0x1425e2(0xbe1)][_0x1425e2(0x433)]&&(_0x1425e2(0x2e8)===_0x1425e2(0x2e8)?VisuMZ[_0x1425e2(0xbe1)][_0x1425e2(0x433)][_0x1425e2(0x432)](this,_0xf71f03):this['drawTextEx'](_0x1029e0,_0x33ead2['x']+_0x24f39d[_0x1425e2(0x2ce)]-_0x3372f4,_0x39d144['y'],_0x1ca3cb)),VisuMZ[_0x1425e2(0xbe1)][_0x1425e2(0x196)](_0xf71f03);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x9d5)]=VisuMZ[_0x4a80d9(0x9d5)],VisuMZ[_0x4a80d9(0x9d5)]=function(_0x442d04){const _0x58208a=_0x4a80d9;if(VisuMZ[_0x58208a(0xbe1)]['ParseStateNotetags']){if(_0x58208a(0x489)===_0x58208a(0x489))VisuMZ[_0x58208a(0xbe1)]['ParseStateNotetags'][_0x58208a(0x432)](this,_0x442d04);else return this['_enemy'][_0x58208a(0x245)]();}VisuMZ[_0x58208a(0xbe1)]['Parse_Notetags_TraitObjects'](_0x442d04);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcb2)]=function(_0x37092f){const _0x2fb893=_0x4a80d9,_0x34c82f=[_0x2fb893(0x76d),_0x2fb893(0x952),_0x2fb893(0x41f),_0x2fb893(0x20a),_0x2fb893(0x858),_0x2fb893(0x903),_0x2fb893(0x815),_0x2fb893(0x548)];for(const _0x2e09f1 of _0x34c82f){VisuMZ[_0x2fb893(0xbe1)][_0x2fb893(0x68d)](_0x37092f,_0x2e09f1);}const _0x531671=_0x37092f['note'];_0x531671[_0x2fb893(0x605)](/<ALWAYS CRITICAL/i)&&(_0x2fb893(0x4f7)==='MBRSw'?_0x37092f[_0x2fb893(0x83e)][_0x2fb893(0x854)]=!![]:_0x2c3d8d[_0x2fb893(0x380)]=_0x41ff5b(_0x293147['$1']));if(_0x531671['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if(_0x2fb893(0xbf7)!==_0x2fb893(0xbf7)){_0x22def1=_0x30dd22[_0x2fb893(0xbe1)]['JS'][_0x4c1aec][_0x2fb893(0x432)](this,this['subject'](),_0x24e49d,_0x218c1d,_0x117eff);if(_0x228719)_0x3f6ff3=_0xf80f22;}else _0x37092f[_0x2fb893(0xc96)]=Math[_0x2fb893(0x78c)](0x1,Number(RegExp['$1']));}_0x531671[_0x2fb893(0x605)](/<TARGET:[ ](.*)>/i)&&(_0x37092f['scope']=String(RegExp['$1'])[_0x2fb893(0x7ff)]()[_0x2fb893(0x893)]());},VisuMZ['BattleCore'][_0x4a80d9(0x196)]=function(_0x3aadbf){const _0x3b3054=_0x4a80d9,_0x37a7fc=[_0x3b3054(0x12f),_0x3b3054(0x17a),'PreDamageAsUserJS',_0x3b3054(0xce3),_0x3b3054(0xce7),_0x3b3054(0x607),_0x3b3054(0xbbb),_0x3b3054(0x186),_0x3b3054(0x858),_0x3b3054(0x903),'PreEndActionJS',_0x3b3054(0x548),_0x3b3054(0x974),'PostStartBattleJS',_0x3b3054(0x6d8),_0x3b3054(0x684),_0x3b3054(0x52b),_0x3b3054(0xcb4),_0x3b3054(0x4cd),_0x3b3054(0x127),_0x3b3054(0x6f4),_0x3b3054(0x710),_0x3b3054(0x2fb),'PostEndTurnJS',_0x3b3054(0x132),_0x3b3054(0x869)];for(const _0x33c248 of _0x37a7fc){VisuMZ['BattleCore'][_0x3b3054(0x68d)](_0x3aadbf,_0x33c248);}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x592)]=function(_0x467912){const _0xaa5733=_0x4a80d9,_0x57f89d=_0x467912[_0xaa5733(0x6c8)];if(_0x57f89d[_0xaa5733(0x605)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x241f35=String(RegExp['$1']),_0x38fd7b=VisuMZ['BattleCore'][_0xaa5733(0x24f)](_0x467912,'Targets');VisuMZ[_0xaa5733(0xbe1)][_0xaa5733(0x421)](_0x241f35,_0x38fd7b);}if(_0x57f89d[_0xaa5733(0x605)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0xb7b51d=String(RegExp['$1']),_0x1927c4=VisuMZ[_0xaa5733(0xbe1)]['createKeyJS'](_0x467912,'CommandVisible');VisuMZ[_0xaa5733(0xbe1)][_0xaa5733(0xbc7)](_0xb7b51d,_0x1927c4);}},VisuMZ[_0x4a80d9(0xbe1)]['JS']={},VisuMZ['BattleCore'][_0x4a80d9(0x68d)]=function(_0x3ad902,_0x2d961c){const _0x5d9a1b=_0x4a80d9,_0x9015b9=_0x3ad902[_0x5d9a1b(0x6c8)];if(_0x9015b9[_0x5d9a1b(0x605)](VisuMZ['BattleCore'][_0x5d9a1b(0x4ef)][_0x2d961c])){const _0x43ea37=RegExp['$1'],_0x2d7ba0=_0x5d9a1b(0x2aa)[_0x5d9a1b(0x7d6)](_0x43ea37),_0xade5c2=VisuMZ[_0x5d9a1b(0xbe1)]['createKeyJS'](_0x3ad902,_0x2d961c);VisuMZ[_0x5d9a1b(0xbe1)]['JS'][_0xade5c2]=new Function(_0x2d7ba0);}},VisuMZ['BattleCore'][_0x4a80d9(0x24f)]=function(_0x3ffa69,_0x4555ca){const _0x4a1342=_0x4a80d9;if(VisuMZ[_0x4a1342(0x24f)])return VisuMZ[_0x4a1342(0x24f)](_0x3ffa69,_0x4555ca);let _0x205318='';if($dataActors[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0x5d9)['format'](_0x3ffa69['id'],_0x4555ca);if($dataClasses[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0xb86)[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);if($dataSkills[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318='Skill-%1-%2'[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);if($dataItems[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0xc3c)['format'](_0x3ffa69['id'],_0x4555ca);if($dataWeapons[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0x70f)[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);if($dataArmors[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0xc65)[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);if($dataEnemies[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318=_0x4a1342(0x579)[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);if($dataStates[_0x4a1342(0xcf9)](_0x3ffa69))_0x205318='State-%1-%2'[_0x4a1342(0x7d6)](_0x3ffa69['id'],_0x4555ca);return _0x205318;},VisuMZ[_0x4a80d9(0xbe1)]['createTargetsJS']=function(_0x1d3fe7,_0x497be5){const _0x26716f=_0x4a80d9,_0x50c185='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x26716f(0x7d6)](_0x1d3fe7);VisuMZ[_0x26716f(0xbe1)]['JS'][_0x497be5]=new Function(_0x50c185);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbc7)]=function(_0x58203c,_0x2537f0){const _0x1ef8b7=_0x4a80d9,_0x731543=_0x1ef8b7(0x624)[_0x1ef8b7(0x7d6)](_0x58203c);VisuMZ[_0x1ef8b7(0xbe1)]['JS'][_0x2537f0]=new Function(_0x731543);},TextManager[_0x4a80d9(0x7f7)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)][_0x4a80d9(0x24b)][_0x4a80d9(0x732)],TextManager[_0x4a80d9(0xc4a)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)][_0x4a80d9(0x51b)][_0x4a80d9(0x1b1)],TextManager[_0x4a80d9(0xb23)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)][_0x4a80d9(0x51b)][_0x4a80d9(0x290)],TextManager['visualHpGauge']=VisuMZ[_0x4a80d9(0xbe1)]['Settings'][_0x4a80d9(0x5f0)][_0x4a80d9(0xba4)],ColorManager[_0x4a80d9(0x714)]=function(_0x221576){const _0x3af215=_0x4a80d9;_0x221576=String(_0x221576);if(_0x221576[_0x3af215(0x605)](/#(.*)/i))return _0x3af215(0x8f5)[_0x3af215(0x7d6)](String(RegExp['$1']));else{if('OEdGM'!==_0x3af215(0xcdd))this[_0x3af215(0x4c7)](_0x534ba0);else return this[_0x3af215(0xbb3)](Number(_0x221576));}},DataManager[_0x4a80d9(0x872)]=function(_0x276a83){const _0x1725d3=_0x4a80d9;if(_0x276a83[_0x1725d3(0x6c8)][_0x1725d3(0x605)](/<DAMAGE STYLE:[ ](.*)>/i)){if('aVVzl'!==_0x1725d3(0xc14)){if(!_0x23a36c[_0x1725d3(0x1f8)]())return;_0x5a3c71[_0x1725d3(0xb1e)](_0xbde3e2,_0x5022bb),_0x11e3fb[_0x1725d3(0xb97)][_0x1725d3(0x984)](_0x332766[_0x1725d3(0xbfe)]);}else{const _0x49435c=String(RegExp['$1'])[_0x1725d3(0x7ff)]()['trim']();if(_0x49435c===_0x1725d3(0x860))return'MANUAL';if(VisuMZ[_0x1725d3(0x12e)][_0x49435c])return _0x49435c;}}const _0x2d2084=VisuMZ[_0x1725d3(0xbe1)][_0x1725d3(0x668)][_0x1725d3(0x6ea)][_0x1725d3(0xa05)][_0x1725d3(0x7ff)]()[_0x1725d3(0x893)]();if(VisuMZ[_0x1725d3(0x12e)][_0x2d2084])return _0x2d2084;return'MANUAL';},DataManager[_0x4a80d9(0x8ea)]=function(_0xde2157){const _0x593055=_0x4a80d9;_0xde2157=_0xde2157[_0x593055(0x7ff)]()['trim'](),this[_0x593055(0x9d2)]=this[_0x593055(0x9d2)]||{};if(this[_0x593055(0x9d2)][_0xde2157])return this[_0x593055(0x9d2)][_0xde2157];for(let _0x167c83=0x1;_0x167c83<0x64;_0x167c83++){if(!$dataSystem[_0x593055(0x438)][_0x167c83])continue;let _0xc8d3d3=$dataSystem[_0x593055(0x438)][_0x167c83][_0x593055(0x7ff)]()[_0x593055(0x893)]();_0xc8d3d3=_0xc8d3d3['replace'](/\x1I\[(\d+)\]/gi,''),_0xc8d3d3=_0xc8d3d3[_0x593055(0x220)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0xc8d3d3]=_0x167c83;}return this[_0x593055(0x9d2)][_0xde2157]||0x0;},DataManager[_0x4a80d9(0x751)]=function(_0x463248){const _0x231b03=_0x4a80d9;_0x463248=_0x463248['toUpperCase']()[_0x231b03(0x893)](),this[_0x231b03(0x7c1)]=this['_skillIDs']||{};if(this[_0x231b03(0x7c1)][_0x463248])return this[_0x231b03(0x7c1)][_0x463248];for(const _0x2dfa08 of $dataSkills){if(!_0x2dfa08)continue;this[_0x231b03(0x7c1)][_0x2dfa08[_0x231b03(0x380)][_0x231b03(0x7ff)]()[_0x231b03(0x893)]()]=_0x2dfa08['id'];}return this[_0x231b03(0x7c1)][_0x463248]||0x0;},DataManager[_0x4a80d9(0x320)]=function(_0x36f258){const _0x2014d3=_0x4a80d9;_0x36f258=_0x36f258[_0x2014d3(0x7ff)]()[_0x2014d3(0x893)](),this[_0x2014d3(0x368)]=this[_0x2014d3(0x368)]||{};if(this[_0x2014d3(0x368)][_0x36f258])return this[_0x2014d3(0x368)][_0x36f258];for(const _0x26b50b of $dataEnemies){if(!_0x26b50b)continue;this['_enemyIDs'][_0x26b50b[_0x2014d3(0x380)][_0x2014d3(0x7ff)]()[_0x2014d3(0x893)]()]=_0x26b50b['id'];}return this[_0x2014d3(0x368)][_0x36f258]||0x0;},DataManager[_0x4a80d9(0x706)]=function(_0x47507e){const _0x56af66=_0x4a80d9;_0x47507e=_0x47507e[_0x56af66(0x7ff)]()[_0x56af66(0x893)](),this['_wtypeIDs']=this['_wtypeIDs']||{};if(this[_0x56af66(0x7c9)][_0x47507e])return this['_wtypeIDs'][_0x47507e];for(let _0x297952=0x1;_0x297952<0x64;_0x297952++){if(!$dataSystem['weaponTypes'][_0x297952])continue;let _0x3b4d20=$dataSystem['weaponTypes'][_0x297952]['toUpperCase']()[_0x56af66(0x893)]();_0x3b4d20=_0x3b4d20[_0x56af66(0x220)](/\x1I\[(\d+)\]/gi,''),_0x3b4d20=_0x3b4d20[_0x56af66(0x220)](/\\I\[(\d+)\]/gi,''),this[_0x56af66(0x7c9)][_0x3b4d20]=_0x297952;}return this[_0x56af66(0x7c9)][_0x56af66(0x988)]=0x0,this[_0x56af66(0x7c9)][_0x47507e]||0x0;},DataManager[_0x4a80d9(0xc4b)]=function(_0x2b4944){const _0x31faa1=_0x4a80d9,_0x3a9fa0=_0x31faa1(0xb84);let _0x245ee3=_0x2b4944[_0x31faa1(0xb39)],_0x1ac144=_0x2b4944[_0x31faa1(0x380)];const _0x104266=_0x2b4944[_0x31faa1(0x6c8)];return _0x104266[_0x31faa1(0x605)](/<DISPLAY ICON: (\d+)>/i)&&(_0x245ee3=Number(RegExp['$1'])),_0x104266[_0x31faa1(0x605)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1ac144=String(RegExp['$1'])),_0x3a9fa0[_0x31faa1(0x7d6)](_0x245ee3,_0x1ac144);},DataManager[_0x4a80d9(0x9d8)]=function(_0x4dc61c){const _0xa5de87=_0x4a80d9;return _0x4dc61c[_0xa5de87(0x6c8)]['match'](/<COMMAND TEXT: (.*)>/i)?_0xa5de87(0x11d)===_0xa5de87(0x22d)?this[_0xa5de87(0x74f)]():String(RegExp['$1']):_0x4dc61c['name'];},DataManager[_0x4a80d9(0x3bb)]=function(_0x155c51){const _0x115b96=_0x4a80d9;if(_0x155c51[_0x115b96(0x6c8)][_0x115b96(0x605)](/<COMMAND ICON: (\d+)>/i)){if(_0x115b96(0x79e)===_0x115b96(0x79e))return Number(RegExp['$1']);else{const _0x4b6459=_0xfbdff5(_0x2ae5a0['$1']);this[_0x115b96(0x6b9)](_0x34ca59[_0x4b6459]);}}else return _0x155c51[_0x115b96(0xb39)];},DataManager[_0x4a80d9(0xa66)]=function(_0x379f38){const _0x4cbd95=_0x4a80d9,_0x153312=$dataEnemies[_0x379f38];if(_0x153312){if('OGplU'!==_0x4cbd95(0x3fa)){if(!_0x45a884['isSideView']())return;_0x3701df['BattleCore']['Window_BattleStatus_drawItemImage']['call'](this,_0x198ca9);}else{if(_0x153312[_0x4cbd95(0x6c8)][_0x4cbd95(0x605)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1dcd3c=String(RegExp['$1'])[_0x4cbd95(0x123)](/[\r\n]+/)[_0x4cbd95(0x249)](''),_0x36c6cd=this[_0x4cbd95(0xb0d)](_0x1dcd3c);_0x379f38=this[_0x4cbd95(0x320)](_0x36c6cd)||_0x379f38,_0x379f38=DataManager[_0x4cbd95(0xa66)](_0x379f38);}}}return _0x379f38;},DataManager['processRandomizedData']=function(_0x61720f){const _0x51c9d3=_0x4a80d9;let _0x26b503=0x0;const _0x10508b={};for(const _0x57a4c0 of _0x61720f){if(_0x51c9d3(0x9e4)!=='gsHZb'){if(_0x57a4c0['match'](/(.*):[ ](\d+)/i)){if(_0x51c9d3(0x67e)===_0x51c9d3(0x20e)){_0x52dbbc['prototype']['refresh']['call'](this),this[_0x51c9d3(0x28f)][_0x51c9d3(0x2b9)]();if(!this[_0x51c9d3(0x378)]())return;this[_0x51c9d3(0xac5)]();}else{const _0xe5f383=String(RegExp['$1'])[_0x51c9d3(0x893)](),_0x3f09a6=Number(RegExp['$2']);_0x10508b[_0xe5f383]=_0x3f09a6,_0x26b503+=_0x3f09a6;}}else{if(_0x57a4c0[_0x51c9d3(0x605)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x51c9d3(0x41e)!==_0x51c9d3(0x41e))return _0x326189[_0x51c9d3(0xbe1)][_0x51c9d3(0x1d3)][_0x51c9d3(0x432)](this);else{const _0x4caa6a=String(RegExp['$1'])[_0x51c9d3(0x893)](),_0x40b852=Number(RegExp['$2']);_0x10508b[_0x4caa6a]=_0x40b852,_0x26b503+=_0x40b852;}}else _0x57a4c0!==''&&(_0x10508b[_0x57a4c0]=0x1,_0x26b503++);}}else return _0x22a1ac[_0x51c9d3(0x8a5)][_0x51c9d3(0x432)](this);}if(_0x26b503<=0x0)return'';let _0x33a817=Math[_0x51c9d3(0xa62)]()*_0x26b503;for(const _0x38ee45 in _0x10508b){_0x33a817-=_0x10508b[_0x38ee45];if(_0x33a817<=0x0)return _0x38ee45;}return'';},DataManager[_0x4a80d9(0x9e1)]=function(_0x2bd497){const _0x5bee6d=_0x4a80d9;if(!_0x2bd497)return![];if(!VisuMZ[_0x5bee6d(0xbe1)][_0x5bee6d(0x668)][_0x5bee6d(0x8e0)][_0x5bee6d(0xac8)])return![];if(_0x2bd497['note'][_0x5bee6d(0x605)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x2bd497[_0x5bee6d(0x6c8)][_0x5bee6d(0x605)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x1daa4e of _0x2bd497['effects']){if(!_0x1daa4e)continue;if(_0x1daa4e[_0x5bee6d(0x923)]===Game_Action[_0x5bee6d(0xa99)])return!![];}return![];},DataManager[_0x4a80d9(0xa04)]=function(_0x3c9d93){const _0x35a1af=_0x4a80d9,_0x460e52=$dataTroops[_0x3c9d93];if(!_0x460e52)return'';let _0x299241='';_0x299241+=_0x460e52[_0x35a1af(0x380)];for(const _0x527f62 of _0x460e52[_0x35a1af(0x725)]){for(const _0x23c006 of _0x527f62[_0x35a1af(0xa03)]){if(_0x35a1af(0x833)!=='eVgsE'){if([0x6c,0x198][_0x35a1af(0xcf9)](_0x23c006['code'])){if(_0x35a1af(0x237)!=='ezARY')_0x299241+='\x0a',_0x299241+=_0x23c006['parameters'][0x0];else return 0x0;}}else{const _0x4621ae=_0x2b400e['format'](_0x68a0e6[_0x35a1af(0x380)](),_0xc376ab[_0x35a1af(0x340)](_0x36231c));this[_0x35a1af(0x510)](_0x35a1af(0xcdc)),this['push']('pushBaseLine'),this[_0x35a1af(0x510)](_0x35a1af(0x496),_0x4621ae),this[_0x35a1af(0x510)]('wait');}}}return _0x299241;},ConfigManager[_0x4a80d9(0x29e)]=ConfigManager[_0x4a80d9(0x29e)]??![],ConfigManager[_0x4a80d9(0x49d)]=ConfigManager[_0x4a80d9(0x49d)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x4a80d9(0x105)]??!![],VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcaf)]=ConfigManager['makeData'],ConfigManager[_0x4a80d9(0x265)]=function(){const _0x33d1e2=_0x4a80d9,_0x5c9445=VisuMZ[_0x33d1e2(0xbe1)][_0x33d1e2(0xcaf)]['call'](this);return _0x5c9445[_0x33d1e2(0x29e)]=this[_0x33d1e2(0x29e)],_0x5c9445[_0x33d1e2(0x49d)]=this[_0x33d1e2(0x49d)],_0x5c9445[_0x33d1e2(0x105)]=this[_0x33d1e2(0x105)],_0x5c9445;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x786)]=ConfigManager[_0x4a80d9(0x8a2)],ConfigManager[_0x4a80d9(0x8a2)]=function(_0x329a31){const _0x398884=_0x4a80d9;VisuMZ['BattleCore']['ConfigManager_applyData'][_0x398884(0x432)](this,_0x329a31);_0x398884(0x29e)in _0x329a31?this[_0x398884(0x29e)]=_0x329a31[_0x398884(0x29e)]:this['autoBattleAtStart']=![];'autoBattleUseSkills'in _0x329a31?this['autoBattleUseSkills']=_0x329a31[_0x398884(0x49d)]:_0x398884(0xa14)!==_0x398884(0xa14)?(_0x9e6f56*=-0x1,_0x4cf95a*=-0x1):this['autoBattleUseSkills']=![];if(_0x398884(0x105)in _0x329a31)this['visualHpGauge']=_0x329a31['visualHpGauge'];else{if('dTWkk'==='GXPFo'){this[_0x398884(0x8c0)]=!![];const _0x5a9654=this[_0x398884(0x141)]();for(let _0x53bb63=0x0;_0x53bb63<_0x5a9654[_0x398884(0x6fc)];_0x53bb63++){_0x5a9654[_0x53bb63]===0x1&&this[_0x398884(0x24c)]!==_0x53bb63&&(_0x333ee1[_0x53bb63]=null);}this['_tempEquipCheck']=_0x5cadc4;}else this[_0x398884(0x105)]=!![];}},ImageManager['svActorHorzCells']=ImageManager[_0x4a80d9(0xbec)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x4a80d9(0xb6d)]||0x6,VisuMZ['BattleCore']['BattleManager_setup']=BattleManager[_0x4a80d9(0x622)],BattleManager[_0x4a80d9(0x622)]=function(_0x338467,_0x162e6a,_0x1f089a){const _0x274f41=_0x4a80d9;VisuMZ['BattleCore'][_0x274f41(0x106)]['call'](this,_0x338467,_0x162e6a,_0x1f089a),this[_0x274f41(0x3a8)]={};},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_initMembers']=BattleManager[_0x4a80d9(0x8f0)],BattleManager[_0x4a80d9(0x8f0)]=function(){const _0x4c7534=_0x4a80d9;VisuMZ[_0x4c7534(0xbe1)]['BattleManager_initMembers']['call'](this),this[_0x4c7534(0x299)]=[];},BattleManager[_0x4a80d9(0xb14)]=function(){const _0x1c3cfb=_0x4a80d9;if(!SceneManager[_0x1c3cfb(0x1f8)]())return;const _0x5f0a29=SceneManager['_scene']['_statusWindow'];if(_0x5f0a29)_0x5f0a29[_0x1c3cfb(0x6de)]();},BattleManager[_0x4a80d9(0xa44)]=function(){if(BattleManager['isTpb']())return'TPB';return'DTB';},BattleManager['isBattleSys']=function(_0x5e291e){const _0x3a1880=_0x4a80d9;return _0x5e291e=_0x5e291e[_0x3a1880(0x7ff)]()[_0x3a1880(0x893)](),this[_0x3a1880(0xa44)]()===_0x5e291e;},BattleManager[_0x4a80d9(0x8a6)]=function(){const _0xd4401a=_0x4a80d9;return this[_0xd4401a(0xb33)](_0xd4401a(0xb5b));},BattleManager[_0x4a80d9(0x68e)]=function(){const _0x38bb1c=_0x4a80d9;return this[_0x38bb1c(0x8a6)]();},BattleManager['isTickBased']=function(){const _0x582209=_0x4a80d9;return!this[_0x582209(0x68e)]();},BattleManager[_0x4a80d9(0xafc)]=function(){const _0x145496=_0x4a80d9;return!this[_0x145496(0x68e)]()&&!this[_0x145496(0xc13)]();},BattleManager[_0x4a80d9(0x766)]=function(_0x4c1be5){const _0x5b6cb4=_0x4a80d9;this['_battlerKeyCache']=this[_0x5b6cb4(0x3a8)]||{};if(this[_0x5b6cb4(0x3a8)][_0x4c1be5]!==undefined)return this[_0x5b6cb4(0x3a8)][_0x4c1be5];this[_0x5b6cb4(0x3a8)][_0x4c1be5]=null;const _0x282c2f=this[_0x5b6cb4(0x39f)](),_0x44ea8c=_0x282c2f['find'](_0x4fe4b3=>_0x4fe4b3[_0x5b6cb4(0x286)]()===_0x4c1be5);if(_0x44ea8c)this[_0x5b6cb4(0x3a8)][_0x4c1be5]=_0x44ea8c;return this[_0x5b6cb4(0x3a8)][_0x4c1be5];},Game_BattlerBase['prototype'][_0x4a80d9(0x286)]=function(){const _0x5a2e29=_0x4a80d9;return _0x5a2e29(0x260)[_0x5a2e29(0x7d6)](this[_0x5a2e29(0x172)]()?_0x5a2e29(0x442):'enemy',this[_0x5a2e29(0x380)]());},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xa64)]=function(_0x1dbd68){const _0xb0866c=_0x4a80d9;if(this[_0xb0866c(0x5eb)]!=='')return;typeof _0x1dbd68==='string'?_0xb0866c(0xc4f)==='DkNRc'?this[_0xb0866c(0x5eb)]=_0x1dbd68[_0xb0866c(0x303)]()[_0xb0866c(0x893)]():(_0x439859[_0xb0866c(0xbe1)][_0xb0866c(0xc81)][_0xb0866c(0x432)](this),_0x34a00c[_0xb0866c(0x192)]()):this[_0xb0866c(0x5eb)]=_0x1dbd68['battlerKey']();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x353)]=function(){const _0x45e08d=_0x4a80d9;return[this[_0x45e08d(0x370)]()];},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x370)]=function(){const _0x2be62e=_0x4a80d9,_0x66a6cd=this[_0x2be62e(0x5eb)]||'',_0x18bbe4=BattleManager[_0x2be62e(0x766)](_0x66a6cd);if(!_0x18bbe4)return this['getBattlerKeyTargetReplacement']();if(!_0x18bbe4[_0x2be62e(0x431)]())return this['getBattlerKeyTargetReplacement']();return _0x18bbe4;},Game_Action['prototype'][_0x4a80d9(0x529)]=function(){const _0x1f0d7a=_0x4a80d9,_0x5ecec3=this[_0x1f0d7a(0x5eb)];if(_0x5ecec3[_0x1f0d7a(0x605)](/ACTOR/i)){if(_0x1f0d7a(0x31f)===_0x1f0d7a(0x31f))return this[_0x1f0d7a(0x6f9)]()['trueRandomTarget']();else _0x1d02b6-=_0x4398f2[_0x1f0d7a(0x33e)]()/0x2;}else return _0x1f0d7a(0x739)==='ukHnk'?this[_0x1f0d7a(0x404)]()[_0x1f0d7a(0x501)]():_0x2f239e[_0x1f0d7a(0xbe1)][_0x1f0d7a(0x668)]['Actor'][_0x1f0d7a(0x73e)];},BattleManager['selectedBattlers']=function(){const _0x578e2d=_0x4a80d9;return this[_0x578e2d(0x39f)]()[_0x578e2d(0x435)](_0x15e9cb=>_0x15e9cb[_0x578e2d(0x904)]());},BattleManager[_0x4a80d9(0x63c)]=function(_0x442b83){const _0x521b28=_0x4a80d9;_0x442b83===_0x521b28(0x52b)&&(this['_endingBattle']=!![]),$gameParty['processBattleCoreJS'](_0x442b83),$gameTroop[_0x521b28(0x63c)](_0x442b83);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x837)]=BattleManager[_0x4a80d9(0x549)],BattleManager['startBattle']=function(){const _0x203588=_0x4a80d9;this['_endBattle']=![],this[_0x203588(0x8fb)]=ConfigManager[_0x203588(0x29e)],this[_0x203588(0x22a)]=![],this['processBattleCoreJS']('PreStartBattleJS'),VisuMZ[_0x203588(0xbe1)][_0x203588(0x837)]['call'](this),this['processBattleCoreJS'](_0x203588(0xbf2));},BattleManager['processPostBattleCommonEvents']=function(_0x31e168){const _0x37a0a2=_0x4a80d9,_0x461609=VisuMZ[_0x37a0a2(0xbe1)]['Settings'][_0x37a0a2(0x1c6)];if(_0x31e168!==_0x37a0a2(0x807)&&_0x461609['BattleEndEvent']&&VisuMZ[_0x37a0a2(0xbe1)]['CheckMapBattleEventValid'](_0x461609['BattleEndEvent'])){if(_0x37a0a2(0xc42)===_0x37a0a2(0xcab)){if(_0x58e562['isSceneBattle']()){const _0x3af28e=this[_0x37a0a2(0x997)]();_0x3af28e&&(_0x3af28e[_0x37a0a2(0x889)](_0x3d2bca),['swing',_0x37a0a2(0x89a),_0x37a0a2(0x581)][_0x37a0a2(0xcf9)](_0x543762)&&this[_0x37a0a2(0x4f9)]());}this[_0x37a0a2(0xa8a)]();}else $gameTemp[_0x37a0a2(0x3a2)](_0x461609[_0x37a0a2(0x57c)]);}const _0x290291=_0x37a0a2(0xbd9)[_0x37a0a2(0x7d6)](_0x31e168);_0x461609[_0x290291]&&VisuMZ['BattleCore'][_0x37a0a2(0x922)](_0x461609[_0x290291])&&('BrSwO'===_0x37a0a2(0x13e)?(_0x561832=(_0x22d653+_0x543917)/0x2,_0x3b6534=-0x1):$gameTemp[_0x37a0a2(0x3a2)](_0x461609[_0x290291]));},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_checkBattleEnd']=BattleManager[_0x4a80d9(0xbda)],BattleManager[_0x4a80d9(0xbda)]=function(){const _0x12ee83=_0x4a80d9;if(this[_0x12ee83(0xfa)]==='turn'){if($gameTemp[_0x12ee83(0x731)]())return![];}return VisuMZ[_0x12ee83(0xbe1)][_0x12ee83(0xab3)][_0x12ee83(0x432)](this);},VisuMZ['BattleCore'][_0x4a80d9(0xcad)]=BattleManager[_0x4a80d9(0x702)],BattleManager[_0x4a80d9(0x702)]=function(){const _0x2ee040=_0x4a80d9;this[_0x2ee040(0x22a)]=!![],this[_0x2ee040(0x63c)](_0x2ee040(0x52b)),VisuMZ[_0x2ee040(0xbe1)][_0x2ee040(0xcad)]['call'](this),this['processPostBattleCommonEvents'](_0x2ee040(0x1af));},VisuMZ['BattleCore'][_0x4a80d9(0x178)]=BattleManager[_0x4a80d9(0x703)],BattleManager[_0x4a80d9(0x703)]=function(){const _0x14e028=_0x4a80d9;this[_0x14e028(0x22a)]=!![],VisuMZ[_0x14e028(0xbe1)]['BattleManager_processAbort'][_0x14e028(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x1d8)]=BattleManager['processDefeat'],BattleManager[_0x4a80d9(0xa4e)]=function(){const _0x4b1491=_0x4a80d9;this[_0x4b1491(0x22a)]=!![],this['processBattleCoreJS'](_0x4b1491(0xcb4)),VisuMZ[_0x4b1491(0xbe1)][_0x4b1491(0x1d8)]['call'](this),this[_0x4b1491(0x960)](_0x4b1491(0xc3d));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x740)]=BattleManager[_0x4a80d9(0x8a0)],BattleManager[_0x4a80d9(0x8a0)]=function(_0x49fba9){const _0x333952=_0x4a80d9;this['_endBattle']=!![],this[_0x333952(0x8fb)]=![],this[_0x333952(0x63c)]('PreEndBattleJS'),VisuMZ['BattleCore'][_0x333952(0x740)][_0x333952(0x432)](this,_0x49fba9),this[_0x333952(0x63c)]('PostEndBattleJS');},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager[_0x4a80d9(0x86e)],BattleManager[_0x4a80d9(0x86e)]=function(){const _0x4dab7e=_0x4a80d9;if(this['isTurnBased']())this[_0x4dab7e(0x63c)]('PreStartTurnJS');VisuMZ[_0x4dab7e(0xbe1)][_0x4dab7e(0xb6b)]['call'](this);if(this[_0x4dab7e(0x68e)]())this['processBattleCoreJS'](_0x4dab7e(0x710));},BattleManager[_0x4a80d9(0x64a)]=function(){const _0x39f10d=_0x4a80d9,_0x42a765=this[_0x39f10d(0x139)],_0x342d9f=_0x42a765[_0x39f10d(0x51c)]();if(_0x342d9f){if(_0x39f10d(0xb19)===_0x39f10d(0x976)){if(!_0x14248b[_0x39f10d(0x638)](_0x1f6f08))return![];}else _0x342d9f[_0x39f10d(0x686)](),_0x342d9f[_0x39f10d(0x1ac)]()?(this['startAction'](),_0x42a765[_0x39f10d(0x3b1)]()):(_0x42a765['removeCurrentAction'](),this[_0x39f10d(0xb7f)]());}else this[_0x39f10d(0xb7f)](),this[_0x39f10d(0x139)]=null;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3da)]=BattleManager[_0x4a80d9(0x693)],BattleManager[_0x4a80d9(0x693)]=function(){const _0x5e904c=_0x4a80d9,_0x384dad=this[_0x5e904c(0x139)][_0x5e904c(0x51c)](),_0x3364d1=this[_0x5e904c(0x139)];if(_0x384dad&&_0x384dad[_0x5e904c(0x1e3)]()===_0x3364d1){if('BRawS'===_0x5e904c(0x2df))_0x384dad[_0x5e904c(0x498)](_0x5e904c(0x858));else{if(_0x499cff[_0x5e904c(0x2f7)]()[_0x5e904c(0x98e)]>0x0)return!![];this['_waitMode']='';}}VisuMZ[_0x5e904c(0xbe1)][_0x5e904c(0x3da)][_0x5e904c(0x432)](this),_0x384dad&&_0x384dad['subject']()===_0x3364d1&&_0x384dad['actionBattleCoreJS'](_0x5e904c(0x903));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x7d1)]=BattleManager[_0x4a80d9(0xb7f)],BattleManager[_0x4a80d9(0xb7f)]=function(){const _0x3a3199=_0x4a80d9,_0x5c1d54=this['_action'],_0x57b89b=this[_0x3a3199(0x139)];_0x5c1d54&&_0x5c1d54!==this[_0x3a3199(0x6d6)]&&_0x5c1d54[_0x3a3199(0x1e3)]()===_0x57b89b&&_0x5c1d54['actionBattleCoreJS'](_0x3a3199(0x815));if(this[_0x3a3199(0x139)]){if(_0x3a3199(0x865)!==_0x3a3199(0x865)){if(!_0x3a3541[_0x3a3199(0x1f8)]())return;const _0x40d666=_0x4faa4[_0x3a3199(0xc05)]();if(!_0x40d666)return;_0x40d666['setWaitMode']('battleSpin');}else VisuMZ[_0x3a3199(0xbe1)]['BattleManager_endAction'][_0x3a3199(0x432)](this);}else _0x3a3199(0xc9f)===_0x3a3199(0xc9f)?this[_0x3a3199(0xfa)]=_0x3a3199(0x2bf):(this[_0x3a3199(0x748)](),this['requestMotionRefresh']());_0x5c1d54&&_0x5c1d54!==this[_0x3a3199(0x6d6)]&&_0x5c1d54[_0x3a3199(0x1e3)]()===_0x57b89b&&(_0x3a3199(0x203)===_0x3a3199(0xbf6)?(this[_0x3a3199(0x909)](),_0x583b67['BattleCore'][_0x3a3199(0x379)][_0x3a3199(0x432)](this)):_0x5c1d54[_0x3a3199(0x498)](_0x3a3199(0x548))),this[_0x3a3199(0xa79)](this[_0x3a3199(0x39f)]()),this[_0x3a3199(0x6d6)]=this[_0x3a3199(0x287)];},BattleManager['refreshBattlerMotions']=function(_0x57c62b){const _0x58694c=_0x4a80d9;for(const _0x2df5f9 of _0x57c62b){if(!_0x2df5f9)continue;if(!_0x2df5f9[_0x58694c(0x997)]())continue;_0x2df5f9[_0x58694c(0x997)]()[_0x58694c(0x7b7)]();}},BattleManager['updateAction']=function(){const _0x18288e=_0x4a80d9;!this[_0x18288e(0x2d4)][_0x18288e(0xb2f)]()&&(_0x18288e(0x81d)!==_0x18288e(0x81d)?this['setHandler'](_0x18288e(0x23c),this['selectAllActors']['bind'](this)):this[_0x18288e(0xb7f)]());},Game_Battler['prototype'][_0x4a80d9(0x54e)]=function(){const _0x4748ea=_0x4a80d9;this[_0x4748ea(0x540)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x5175a9=VisuMZ[_0x4748ea(0x596)][_0x4748ea(0x668)]['States'];_0x5175a9&&_0x5175a9[_0x4748ea(0x4f3)]===![]&&this['removeStatesAuto'](0x1);}else this[_0x4748ea(0xcf4)](0x1);this[_0x4748ea(0x999)]();},BattleManager['makeEscapeRatio']=function(){const _0x425f6f=_0x4a80d9;this[_0x425f6f(0x1e5)]=VisuMZ['BattleCore'][_0x425f6f(0x668)][_0x425f6f(0x1c6)][_0x425f6f(0x3e0)][_0x425f6f(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_onEscapeSuccess']=BattleManager[_0x4a80d9(0x565)],BattleManager[_0x4a80d9(0x565)]=function(){const _0x1aad8a=_0x4a80d9;this[_0x1aad8a(0x63c)](_0x1aad8a(0x4cd)),BattleManager['_spriteset'][_0x1aad8a(0x8ef)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x1aad8a(0x432)](this),this[_0x1aad8a(0x960)](_0x1aad8a(0x284));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5b1)]=BattleManager[_0x4a80d9(0x735)],BattleManager[_0x4a80d9(0x735)]=function(){const _0x4a2526=_0x4a80d9;this['processBattleCoreJS'](_0x4a2526(0x127));const _0x586c60=this[_0x4a2526(0x1e5)];VisuMZ[_0x4a2526(0xbe1)][_0x4a2526(0x5b1)][_0x4a2526(0x432)](this),this[_0x4a2526(0x1e5)]=_0x586c60+VisuMZ[_0x4a2526(0xbe1)][_0x4a2526(0x668)][_0x4a2526(0x1c6)][_0x4a2526(0x583)]['call'](this),this[_0x4a2526(0x2a6)]=![],this[_0x4a2526(0x960)]('EscapeFail');},BattleManager[_0x4a80d9(0x753)]=function(){const _0x5a517d=_0x4a80d9;let _0x267eac=![];if(this[_0x5a517d(0xb05)]())for(const _0x274204 of $gameTroop['enemyNames']()){this[_0x5a517d(0x2d4)]['push'](_0x5a517d(0x496),TextManager[_0x5a517d(0xacd)][_0x5a517d(0x7d6)](_0x274204)),this[_0x5a517d(0x2d4)]['push']('wait'),_0x267eac=!![];}if(this['_preemptive'])this[_0x5a517d(0x2d4)][_0x5a517d(0x510)](_0x5a517d(0x496),TextManager[_0x5a517d(0x16d)]['format']($gameParty['name']())),this['_logWindow'][_0x5a517d(0x510)](_0x5a517d(0xca3));else this[_0x5a517d(0x204)]&&(this[_0x5a517d(0x2d4)][_0x5a517d(0x510)](_0x5a517d(0x496),TextManager[_0x5a517d(0x6d3)][_0x5a517d(0x7d6)]($gameParty[_0x5a517d(0x380)]())),this[_0x5a517d(0x2d4)][_0x5a517d(0x510)]('wait'));_0x267eac&&(this[_0x5a517d(0x2d4)][_0x5a517d(0x510)](_0x5a517d(0xca3)),this['_logWindow'][_0x5a517d(0x510)](_0x5a517d(0x2b9))),this['isTpb']()&&this['isSkipPartyCommandWindow']()&&(this[_0x5a517d(0xccc)]=![]);},BattleManager[_0x4a80d9(0xb05)]=function(){const _0x2eac2c=_0x4a80d9;if(BattleManager[_0x2eac2c(0x8fb)])return![];return VisuMZ['BattleCore'][_0x2eac2c(0x668)][_0x2eac2c(0x916)][_0x2eac2c(0x1c7)];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xa09)]=BattleManager[_0x4a80d9(0x777)],BattleManager[_0x4a80d9(0x777)]=function(){const _0x56bfbc=_0x4a80d9;VisuMZ['BattleCore'][_0x56bfbc(0xa09)]['call'](this),this[_0x56bfbc(0x8a6)]()&&this[_0x56bfbc(0x72e)]()&&!this[_0x56bfbc(0x204)]&&$gameParty[_0x56bfbc(0xb3c)]()&&this[_0x56bfbc(0x75b)]();},BattleManager[_0x4a80d9(0x72e)]=function(){const _0x4bd69a=_0x4a80d9;return VisuMZ[_0x4bd69a(0xbe1)][_0x4bd69a(0x668)][_0x4bd69a(0x24b)][_0x4bd69a(0x96c)];},BattleManager[_0x4a80d9(0xb60)]=function(){this['isPartyTpbInputtable']()&&this['selectNextCommand']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc0d)]=Scene_Battle[_0x4a80d9(0xba6)]['startActorCommandSelection'],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xc2f)]=function(){const _0x1bb6d4=_0x4a80d9;VisuMZ[_0x1bb6d4(0xbe1)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager['isTpb']()&&BattleManager[_0x1bb6d4(0xccc)]&&(_0x1bb6d4(0x7c6)===_0x1bb6d4(0x711)?(_0x12739c[_0x1bb6d4(0xbe1)][_0x1bb6d4(0xc3e)][_0x1bb6d4(0x432)](this),this['processRefresh'](),this[_0x1bb6d4(0xcf7)]()):(BattleManager[_0x1bb6d4(0xccc)]=![],this[_0x1bb6d4(0x1f2)]()));},BattleManager[_0x4a80d9(0xa1e)]=function(_0x27a01c,_0x4d07e5){const _0x4278f1=_0x4a80d9;this[_0x4278f1(0x287)][_0x4278f1(0xaba)]=_0x4d07e5,this[_0x4278f1(0x2d4)][_0x4278f1(0x381)](_0x4d07e5),this['_logWindow'][_0x4278f1(0xa9f)](_0x27a01c,this[_0x4278f1(0x287)]),this[_0x4278f1(0x287)][_0x4278f1(0x71a)](_0x27a01c),this[_0x4278f1(0x2d4)]['displayActionResults'](_0x27a01c,_0x27a01c);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x285)]=BattleManager[_0x4a80d9(0xcf5)],BattleManager['makeActionOrders']=function(){const _0x2601d1=_0x4a80d9;VisuMZ[_0x2601d1(0xbe1)][_0x2601d1(0x285)]['call'](this),this['_actionBattlers']=this[_0x2601d1(0x4e2)][_0x2601d1(0x435)](_0x5a139d=>_0x5a139d&&_0x5a139d[_0x2601d1(0x662)]());},VisuMZ['BattleCore'][_0x4a80d9(0x2af)]=BattleManager[_0x4a80d9(0x3ee)],BattleManager[_0x4a80d9(0x3ee)]=function(_0x10b5ff){const _0x4d01e2=_0x4a80d9;if(this[_0x4d01e2(0xfa)]===_0x4d01e2(0x258))this[_0x4d01e2(0x373)]();else this[_0x4d01e2(0xfa)]===_0x4d01e2(0xc33)?this[_0x4d01e2(0xaf4)]():_0x4d01e2(0xcea)!==_0x4d01e2(0xcea)?_0x521fa1=_0x4d01e2(0x413):VisuMZ[_0x4d01e2(0xbe1)][_0x4d01e2(0x2af)][_0x4d01e2(0x432)](this,_0x10b5ff);},BattleManager[_0x4a80d9(0x9f0)]=function(){const _0x11788f=_0x4a80d9;this[_0x11788f(0x92c)]=this[_0x11788f(0x447)][_0x11788f(0x8d8)](0x0),this[_0x11788f(0xb0f)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this['_phase']='custom';},BattleManager[_0x4a80d9(0x373)]=function(){const _0x228271=_0x4a80d9;!this[_0x228271(0x14b)]()&&!this[_0x228271(0x2d4)]['isBusy']()&&(this['_phase']=_0x228271(0x4c9));},BattleManager[_0x4a80d9(0xc33)]=function(_0x36fc7e){const _0x18b9a8=_0x4a80d9;this['_actionBattlers'][_0x18b9a8(0x249)](_0x36fc7e);if(_0x36fc7e===this[_0x18b9a8(0x139)])return;const _0x5a8daf=JsonEx[_0x18b9a8(0xa9b)](_0x36fc7e[_0x18b9a8(0x51c)]());this['_forcedBattlers'][_0x18b9a8(0x510)]([_0x36fc7e,_0x5a8daf]);},BattleManager[_0x4a80d9(0xcb8)]=function(){},BattleManager[_0x4a80d9(0x22f)]=function(){const _0x1b7ba1=_0x4a80d9;if(this['isTpb']())this[_0x1b7ba1(0xfa)]='turn';else this[_0x1b7ba1(0x299)][_0x1b7ba1(0x6fc)]>0x0?this['_phase']=_0x1b7ba1(0x2bf):this['startInput']();},BattleManager[_0x4a80d9(0x471)]=function(){const _0x261097=_0x4a80d9,_0x1638f8=this[_0x261097(0x139)];_0x1638f8&&this[_0x261097(0x800)]()&&_0x1638f8[_0x261097(0x308)](_0x261097(0x6e0));for(;;){const _0xf2e70e=this[_0x261097(0x418)]();if(!_0xf2e70e)return null;if(_0xf2e70e[_0x261097(0x27a)]()&&_0xf2e70e['isAlive']())return _0xf2e70e;}},BattleManager['getNextSubjectFromPool']=function(){const _0x22cc1e=_0x4a80d9;if(this['_forcedBattlers'][_0x22cc1e(0x6fc)]>0x0){if(_0x22cc1e(0xaf3)===_0x22cc1e(0xb4b))this[_0x22cc1e(0x25e)]++,this[_0x22cc1e(0x7c0)]=!![];else{const _0x1be9a9=this[_0x22cc1e(0x299)][_0x22cc1e(0xae3)](),_0x459c22=_0x1be9a9[0x0];return _0x459c22[_0x22cc1e(0x77d)]=_0x459c22[_0x22cc1e(0x77d)]||[],_0x459c22[_0x22cc1e(0x77d)][0x0]=_0x1be9a9[0x1],_0x459c22;}}else{if(_0x22cc1e(0xa2d)===_0x22cc1e(0x761)){if(!_0x3cd8df[_0x22cc1e(0x1f8)]())return;if(!_0x209a32[_0x22cc1e(0x392)])return;const _0x3fc570=_0x502c85['_action'];if(!_0x3fc570)return;_0x3fc570[_0x22cc1e(0x112)]=!![];}else return this[_0x22cc1e(0x4e2)][_0x22cc1e(0xae3)]();}},VisuMZ['BattleCore'][_0x4a80d9(0x3a4)]=Game_Battler['prototype'][_0x4a80d9(0xc33)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xc33)]=function(_0x34bcb3,_0x538616){const _0x18f132=_0x4a80d9;VisuMZ[_0x18f132(0xbe1)][_0x18f132(0x3a4)][_0x18f132(0x432)](this,_0x34bcb3,_0x538616),this['_actions'][this['_actions'][_0x18f132(0x6fc)]-0x1][_0x18f132(0x827)]=!![];},Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x546)]=function(_0x365446){const _0x27148e=_0x4a80d9;return this[_0x27148e(0x429)](_0x365446[0x0],_0x365446[0x1],_0x6f55df=>{const _0x5bb0a9=_0x27148e;if(_0x5bb0a9(0x42a)!==_0x5bb0a9(0x42a)){const _0xbc768e=_0x4b332a['parse']('['+_0x415c3b['$1'][_0x5bb0a9(0x605)](/\d+/g)+']');for(const _0x1b8f26 of _0xbc768e){if(_0x4f34d5[_0x5bb0a9(0x638)](_0x1b8f26))return![];}return!![];}else!_0x6f55df[_0x5bb0a9(0x66e)]()&&(_0x6f55df[_0x5bb0a9(0xc33)](_0x365446[0x2],_0x365446[0x3]),BattleManager['forceAction'](_0x6f55df));}),!![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x309)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x59d)],Game_Battler[_0x4a80d9(0xba6)]['makeSpeed']=function(){const _0x5de755=_0x4a80d9;VisuMZ[_0x5de755(0xbe1)]['Game_Battler_makeSpeed'][_0x5de755(0x432)](this),this[_0x5de755(0x77d)][_0x5de755(0x6fc)]<=0x0&&(this[_0x5de755(0x744)]=Number['MIN_SAFE_INTEGER']);},BattleManager[_0x4a80d9(0x288)]=function(){const _0x20e912=_0x4a80d9;if(VisuMZ[_0x20e912(0xbe1)]['Settings']['Damage']['EndBattlePopups']??!![])return![];return SceneManager[_0x20e912(0x1f8)]()&&this[_0x20e912(0x22a)];},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_selectNextCommand']=BattleManager['selectNextCommand'],BattleManager[_0x4a80d9(0x75b)]=function(){const _0x36145d=_0x4a80d9;if(this[_0x36145d(0x800)]()){if(_0x36145d(0x82d)==='sRiaq')this[_0x36145d(0xaf9)]();else return _0x481860;}else VisuMZ[_0x36145d(0xbe1)][_0x36145d(0x5a2)][_0x36145d(0x432)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x4f58b0=_0x4a80d9;if(this[_0x4f58b0(0x9e0)]){if(this[_0x4f58b0(0x9e0)][_0x4f58b0(0x75b)]()){if(_0x4f58b0(0x57b)===_0x4f58b0(0x2e6)){if(!_0x4c5b9d)return![];return _0x2b0f9e[_0x4f58b0(0x404)]()===this['friendsUnit']();}else return;}this[_0x4f58b0(0x9cf)](),this[_0x4f58b0(0x3d9)](),!this[_0x4f58b0(0x139)]&&!this[_0x4f58b0(0x9e0)]&&SceneManager[_0x4f58b0(0xb97)][_0x4f58b0(0xb09)]();}else!this[_0x4f58b0(0x139)]&&this[_0x4f58b0(0x3eb)]();},BattleManager[_0x4a80d9(0x3d9)]=function(){const _0x2ff759=_0x4a80d9;(!this[_0x2ff759(0x8f2)]()||this['needsActorInputCancel']())&&(this[_0x2ff759(0x37c)]&&(_0x2ff759(0x40c)==='ifAgk'?this[_0x2ff759(0x93f)]=_0x2ff759(0xa03):!$gameParty[_0x2ff759(0x58d)]()[_0x2ff759(0xcf9)](this[_0x2ff759(0x37c)])&&(this[_0x2ff759(0x37c)]=null)),!this['_tpbSceneChangeCacheActor']?(this[_0x2ff759(0x7ba)](),this[_0x2ff759(0x9e0)]=null,this[_0x2ff759(0x2a6)]=![]):this[_0x2ff759(0xc86)]());},BattleManager[_0x4a80d9(0xc86)]=function(){const _0x56c05b=_0x4a80d9;if(!$gameParty[_0x56c05b(0x58d)]()['includes'](this[_0x56c05b(0x37c)])){if(_0x56c05b(0x43a)==='DaDEc')this['_tpbSceneChangeCacheActor']=null;else{this['battler']()['refreshMotion'](),this[_0x56c05b(0xa8a)]();return;}}this[_0x56c05b(0x37c)]?(this['_currentActor']=this[_0x56c05b(0x37c)],this[_0x56c05b(0x9e0)][_0x56c05b(0x6ac)]=_0x56c05b(0xb4d),this[_0x56c05b(0x2a6)]=!![],this['_tpbSceneChangeCacheActor']=null):(this[_0x56c05b(0x7ba)](),this[_0x56c05b(0x9e0)]=null,this[_0x56c05b(0x2a6)]=![]);},VisuMZ['BattleCore'][_0x4a80d9(0x3f4)]=BattleManager[_0x4a80d9(0x110)],BattleManager[_0x4a80d9(0x110)]=function(){const _0x1cb79b=_0x4a80d9;if(this[_0x1cb79b(0xfa)]==='custom'){if(_0x1cb79b(0x23e)!==_0x1cb79b(0x23e))_0x5bd445[_0x1cb79b(0xa2c)](_0xcf7633,_0x48281d,_0x135e4e,_0x22579f,_0x5afa05,-0x1),this['callNextMethod']();else return this[_0x1cb79b(0x10e)]();}else{if(_0x1cb79b(0xf3)!==_0x1cb79b(0x31a))return VisuMZ[_0x1cb79b(0xbe1)][_0x1cb79b(0x3f4)]['call'](this);else this[_0x1cb79b(0x517)]=!![];}},BattleManager[_0x4a80d9(0x10e)]=function(){const _0x3e5aae=_0x4a80d9;return this[_0x3e5aae(0x58e)]();},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_cancelActorInput']=BattleManager[_0x4a80d9(0x7ba)],BattleManager[_0x4a80d9(0x7ba)]=function(){const _0x312e82=_0x4a80d9;this['isTpb']()&&this['_phase']===_0x312e82(0x69d)&&(this[_0x312e82(0x9e0)]=null),VisuMZ[_0x312e82(0xbe1)]['BattleManager_cancelActorInput'][_0x312e82(0x432)](this);},VisuMZ['BattleCore'][_0x4a80d9(0x401)]=BattleManager['inputtingAction'],BattleManager[_0x4a80d9(0x642)]=function(){const _0x146d05=_0x4a80d9,_0x4372fb=this[_0x146d05(0x9e0)];if(_0x4372fb&&!_0x4372fb['inputtingAction']()){const _0x4620ba=_0x4372fb[_0x146d05(0x95e)];_0x4372fb[_0x146d05(0x77d)][_0x4620ba]=new Game_Action(_0x4372fb);}return VisuMZ[_0x146d05(0xbe1)][_0x146d05(0x401)]['call'](this);},VisuMZ[_0x4a80d9(0xbe1)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x4a80d9(0x2f3)]=function(_0x53ce4e){const _0xedd50f=_0x4a80d9;if(this[_0xedd50f(0x287)][_0xedd50f(0x182)]())return![];return VisuMZ[_0xedd50f(0xbe1)][_0xedd50f(0x7b0)][_0xedd50f(0x432)](this,_0x53ce4e);},SceneManager[_0x4a80d9(0x1f8)]=function(){const _0x326e79=_0x4a80d9;return this[_0x326e79(0xb97)]&&this['_scene']['constructor']===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x4e54b8=_0x4a80d9;return Spriteset_Battle[_0x4e54b8(0xba6)]['isFlipped']();},SceneManager[_0x4a80d9(0xa39)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x1cd471=_0x4a80d9;if(SceneManager[_0x1cd471(0x2c9)](Scene_Options))return!![];return![];},SceneManager[_0x4a80d9(0x4fc)]=function(_0x4b41e9){const _0x24e0f1=_0x4a80d9;if(!SceneManager['isSceneBattle']())return!![];const _0x596304=[_0x24e0f1(0x75a),_0x24e0f1(0xc26)];return _0x596304['includes'](_0x4b41e9[_0x24e0f1(0x380)]);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2a4)]=SceneManager[_0x4a80d9(0x510)],SceneManager[_0x4a80d9(0x510)]=function(_0xcd99bf){const _0x429f2b=_0x4a80d9;if(!SceneManager['checkSceneBattleTransitionable'](_0xcd99bf)){if(_0x429f2b(0xbad)==='hKzXC'){_0x11707d+=_0xa227c1['x']-this[_0x429f2b(0x8b2)]();const _0xd5dcc4=_0x540ccc[_0x429f2b(0x4da)]()*0x3/0x4;_0x456e32=_0x405f26['y']+_0xd5dcc4,_0x43715f=_0x1f164a[_0x429f2b(0x834)](_0x5b51ec,_0x5c1efe['y']+this['y']-this['height']+_0xd5dcc4);}else return this['displayBattleCoreTransitionErrorMsg'](_0xcd99bf);}VisuMZ[_0x429f2b(0xbe1)][_0x429f2b(0x2a4)][_0x429f2b(0x432)](this,_0xcd99bf);},SceneManager[_0x4a80d9(0x9e6)]=function(_0x32a0fa){const _0x5f0b4b=_0x4a80d9;if(!$gameTemp['isPlaytest']())return;if(this[_0x5f0b4b(0x9a2)])return;this[_0x5f0b4b(0x9a2)]=!![];let _0x3a6ab8='';_0x3a6ab8+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x3a6ab8+=_0x5f0b4b(0x41d)[_0x5f0b4b(0x7d6)](_0x32a0fa['name']),alert(_0x3a6ab8);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x615)]=Game_Temp['prototype']['requestAnimation'],Game_Temp['prototype'][_0x4a80d9(0xb38)]=function(_0x4de053,_0x309f35,_0x1eff91){const _0x357bad=_0x4a80d9;_0x4de053=_0x4de053[_0x357bad(0x435)]((_0x281ed2,_0x4a6931,_0x32c229)=>_0x32c229[_0x357bad(0x699)](_0x281ed2)===_0x4a6931);if(SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()){if(_0x357bad(0x613)===_0x357bad(0x613))_0x1eff91=!_0x1eff91;else{const _0xc11fd8=this[_0x357bad(0x7e2)]()?this[_0x357bad(0xac9)]:0x0,_0x5e8768=_0x31b390[_0x357bad(0xa03)];this[_0x357bad(0x6ee)](_0x5e8768,_0xc11fd8),this['_list']=_0x5e1d37[_0x357bad(0xa9b)](this[_0x357bad(0x653)]);const _0xdbb8c6={'code':0xbc3,'indent':this[_0x357bad(0x2ee)],'parameters':_0x451a27[_0x357bad(0xa9b)](_0x318883)};return this[_0x357bad(0x653)][_0x357bad(0x576)](this['_index']+0x1,0x0,_0xdbb8c6),!![];}}VisuMZ[_0x357bad(0xbe1)][_0x357bad(0x615)][_0x357bad(0x432)](this,_0x4de053,_0x309f35,_0x1eff91);if(SceneManager[_0x357bad(0x1f8)]()){if(_0x357bad(0x5ba)!=='IbbYi'){if(!_0x471855[_0x357bad(0x1f8)]())return null;if(!_0x5cc7f3['_scene'][_0x357bad(0x967)])return null;return _0x31c2be[_0x357bad(0xb97)]['_spriteset']['findTargetSprite'](this);}else BattleManager[_0x357bad(0x967)][_0x357bad(0x3b3)]();}},Game_Temp[_0x4a80d9(0xba6)][_0x4a80d9(0x1a6)]=function(_0x8a8ca7){this['_lastPluginCommandInterpreter']=_0x8a8ca7;},Game_Temp['prototype'][_0x4a80d9(0xc05)]=function(){const _0x5d6454=_0x4a80d9;return this[_0x5d6454(0x469)];},Game_Temp[_0x4a80d9(0xba6)]['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x4a80d9(0xba6)]['applyForcedGameTroopSettingsBattleCore']=function(_0x3cdfd4){const _0x17df67=_0x4a80d9;if($gameMap&&$dataMap&&$dataMap[_0x17df67(0x6c8)]){if(_0x17df67(0x244)===_0x17df67(0x244))this[_0x17df67(0x9c1)]($dataMap['note']);else return this[_0x17df67(0xad3)]();}const _0x185143=$dataTroops[_0x3cdfd4];if(_0x185143){let _0x588f76=DataManager[_0x17df67(0xa04)](_0x185143['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x588f76);}},Game_Temp[_0x4a80d9(0xba6)][_0x4a80d9(0x9c1)]=function(_0x5569a8){const _0x3b48bb=_0x4a80d9;if(!_0x5569a8)return;if(_0x5569a8[_0x3b48bb(0x605)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x1a470d=String(RegExp['$1']);if(_0x1a470d[_0x3b48bb(0x605)](/DEFAULT/i))this[_0x3b48bb(0x93f)]='default';else{if(_0x1a470d[_0x3b48bb(0x605)](/LIST/i)){if(_0x3b48bb(0x262)!=='nkaZb')this['_forcedBattleLayout']='list';else return!![];}else{if(_0x1a470d['match'](/XP/i))this[_0x3b48bb(0x93f)]='xp';else{if(_0x1a470d[_0x3b48bb(0x605)](/PORTRAIT/i)){if('hfvDa'==='mMZAA'){const _0x428311=this[_0x3b48bb(0x229)]();this[_0x3b48bb(0x69a)]=new _0x42eae9(_0x428311),this[_0x3b48bb(0x69a)][_0x3b48bb(0x670)](),this['addChild'](this[_0x3b48bb(0x69a)]);}else this['_forcedBattleLayout']='portrait';}else{if(_0x1a470d[_0x3b48bb(0x605)](/BORDER/i))this[_0x3b48bb(0x93f)]=_0x3b48bb(0x33a);else{if(_0x1a470d['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x3b48bb(0x847)]?this['_forcedBattleLayout']='sideview_ui':this[_0x3b48bb(0x93f)]=_0x3b48bb(0x7e5);else{if(_0x1a470d[_0x3b48bb(0x605)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported[_0x3b48bb(0x11b)]){if(_0x3b48bb(0x6a4)!==_0x3b48bb(0x6a4)){this[_0x3b48bb(0xb3b)]=0x14,this[_0x3b48bb(0x690)][_0x3b48bb(0xc0b)]=_0x54fad0;_0x23d2c2['_scene'][_0x3b48bb(0x23a)]()?(this[_0x3b48bb(0x690)]['x']=0x0,this['_borderPortraitTargetX']=_0x4ccb37['ceil'](_0x5d7b60['width']/0x2)):(this[_0x3b48bb(0x690)]['x']=this[_0x3b48bb(0x2ce)],this['_borderPortraitTargetX']=this[_0x3b48bb(0x2ce)]*0x3/0x4);this[_0x3b48bb(0x690)]['opacity']=0x0,this[_0x3b48bb(0x690)]['y']=this['y']+this[_0x3b48bb(0x8dc)];const _0x542b2a=_0x379d9b[_0x3b48bb(0x442)]();_0x542b2a&&(this[_0x3b48bb(0x83b)]+=_0x542b2a[_0x3b48bb(0x1be)](),this[_0x3b48bb(0x690)]['y']+=_0x542b2a[_0x3b48bb(0xc94)]());}else this[_0x3b48bb(0x93f)]=_0x3b48bb(0x812);}else this[_0x3b48bb(0x93f)]=_0x3b48bb(0x7e5);}}}}}}}}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2cb)]=Game_System[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)],Game_System['prototype']['initialize']=function(){const _0x3cdece=_0x4a80d9;VisuMZ['BattleCore'][_0x3cdece(0x2cb)][_0x3cdece(0x432)](this),this[_0x3cdece(0x763)]();},Game_System[_0x4a80d9(0xba6)][_0x4a80d9(0x763)]=function(){const _0x6e0330=_0x4a80d9;this['_defeatedEnemies']=this[_0x6e0330(0x959)]||[];},Game_System[_0x4a80d9(0xba6)][_0x4a80d9(0x114)]=function(){const _0x4d6f1e=_0x4a80d9;if(this[_0x4d6f1e(0x959)]===undefined)this['initBattleCore']();return this['_defeatedEnemies'];},Game_System[_0x4a80d9(0xba6)][_0x4a80d9(0xc25)]=function(_0x1e59b1){const _0x2b0474=_0x4a80d9;if(this[_0x2b0474(0x959)]===undefined)this[_0x2b0474(0x763)]();if(!_0x1e59b1)return;if(this['_defeatedEnemies'][_0x2b0474(0xcf9)](_0x1e59b1))return;this[_0x2b0474(0x959)][_0x2b0474(0x510)](_0x1e59b1),this[_0x2b0474(0x959)][_0x2b0474(0x915)]((_0x4d6d79,_0x4af243)=>_0x4d6d79-_0x4af243);},VisuMZ[_0x4a80d9(0xbe1)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x50a)],Game_BattlerBase['prototype'][_0x4a80d9(0x50a)]=function(_0x5504f7){const _0x2e6550=_0x4a80d9,_0x266c99=this['isAlive'](),_0x579806=this[_0x2e6550(0x2fd)]();VisuMZ[_0x2e6550(0xbe1)][_0x2e6550(0x8c5)]['call'](this,_0x5504f7);this[_0x2e6550(0x494)]()&&_0x266c99&&this[_0x2e6550(0x50b)]()&&(this[_0x2e6550(0x49e)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x2e6550(0xc25)](this[_0x2e6550(0xaf6)]()));if(SceneManager[_0x2e6550(0x1f8)]()&&_0x579806!==this[_0x2e6550(0x2fd)]()){if(this[_0x2e6550(0x997)]()){if(_0x2e6550(0x358)===_0x2e6550(0x358))this['battler']()[_0x2e6550(0x7b7)]();else{this[_0x2e6550(0x3a8)]=this['_battlerKeyCache']||{};if(this[_0x2e6550(0x3a8)][_0x1faa92]!==_0x202559)return this['_battlerKeyCache'][_0x44ffb3];this['_battlerKeyCache'][_0x47f0cc]=null;const _0x5934b6=this[_0x2e6550(0x39f)](),_0x2246e9=_0x5934b6[_0x2e6550(0xabc)](_0x566061=>_0x566061['battlerKey']()===_0x5a6e81);if(_0x2246e9)this[_0x2e6550(0x3a8)][_0x3a7bf5]=_0x2246e9;return this[_0x2e6550(0x3a8)][_0x3458d2];}}}},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x5f4f33=_0x4a80d9;return $gameSystem[_0x5f4f33(0x114)]()[_0x5f4f33(0xcf9)](this['_enemyId']);},VisuMZ[_0x4a80d9(0xbe1)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x844)],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x844)]=function(_0x4e32e8){const _0x242af6=_0x4a80d9;VisuMZ['BattleCore'][_0x242af6(0xc11)][_0x242af6(0x432)](this,_0x4e32e8),this[_0x242af6(0x494)]()&&_0x4e32e8===this[_0x242af6(0x3c3)]()&&this['isAlive']()&&(this[_0x242af6(0x49e)]=![]),!this[_0x242af6(0x85d)]&&!this[_0x242af6(0x99e)]&&SceneManager[_0x242af6(0x1f8)]()&&(_0x242af6(0x792)!=='PBmOZ'?this['requestMotionRefresh']():_0x5d2187['push'](_0x242af6(0x3b8),_0x2c1d8d));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x1b6)]=Game_Action['prototype'][_0x4a80d9(0x2b9)],Game_Action[_0x4a80d9(0xba6)]['clear']=function(){const _0x1d8f11=_0x4a80d9;VisuMZ[_0x1d8f11(0xbe1)][_0x1d8f11(0x1b6)]['call'](this),this[_0x1d8f11(0x440)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1d8f11(0x2e0)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1d8f11(0x664)]=_0x1d8f11(0x7e5),this[_0x1d8f11(0xbb5)]();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xbb5)]=function(){const _0x24d51c=_0x4a80d9;this[_0x24d51c(0x5eb)]='';},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb15)]=Game_Action[_0x4a80d9(0xba6)]['setSubject'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xa82)]=function(_0x301731){const _0x1e0f58=_0x4a80d9;VisuMZ[_0x1e0f58(0xbe1)][_0x1e0f58(0xb15)][_0x1e0f58(0x432)](this,_0x301731),this[_0x1e0f58(0xbb5)]();},VisuMZ['BattleCore'][_0x4a80d9(0x7f8)]=Game_Action[_0x4a80d9(0xba6)]['setSkill'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xa84)]=function(_0x2c9762){const _0x1ce95f=_0x4a80d9;VisuMZ[_0x1ce95f(0xbe1)][_0x1ce95f(0x7f8)]['call'](this,_0x2c9762),this[_0x1ce95f(0xbb5)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x7b8)]=Game_Action['prototype']['setItem'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x20c)]=function(_0x512206){const _0x2b9305=_0x4a80d9;VisuMZ[_0x2b9305(0xbe1)][_0x2b9305(0x7b8)][_0x2b9305(0x432)](this,_0x512206),this[_0x2b9305(0xbb5)]();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xbde)]=function(_0x48f7de,_0x37100e){const _0x21f8b3=_0x4a80d9;return VisuMZ[_0x21f8b3(0xbe1)][_0x21f8b3(0x668)][_0x21f8b3(0x6ea)][_0x21f8b3(0xf8)]['call'](this,_0x48f7de,_0x37100e);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xab0)]=function(_0x23bebf,_0x8c115){const _0x165247=_0x4a80d9;return VisuMZ[_0x165247(0xbe1)]['Settings'][_0x165247(0x6ea)][_0x165247(0xbac)][_0x165247(0x432)](this,_0x23bebf,_0x8c115);},Game_Action['prototype'][_0x4a80d9(0xb1b)]=function(_0x102cd3,_0x210c18){const _0x25e073=_0x4a80d9;return VisuMZ['BattleCore']['Settings'][_0x25e073(0x6ea)][_0x25e073(0xcdf)][_0x25e073(0x432)](this,_0x102cd3,_0x210c18);},VisuMZ[_0x4a80d9(0xbe1)]['Game_Action_itemHit']=Game_Action['prototype'][_0x4a80d9(0x1b0)],Game_Action[_0x4a80d9(0xba6)]['itemHit']=function(_0x2ace0a){const _0x4a87e1=_0x4a80d9,_0x1e0081=this[_0x4a87e1(0x6af)]()['note'];if(_0x1e0081['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1e0081[_0x4a87e1(0x605)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if('KlmMW'!=='KlmMW'){if(!_0x1baa3b[_0x4a87e1(0x1f8)]())return;const _0x5b2f92=_0x443d82[_0x4a87e1(0x2d4)];_0x5b2f92['pushBaseLine']();}else return Number(RegExp['$1'])/0x64;}else{if('GHrTm'==='GHrTm'){let _0x3deeb7=VisuMZ[_0x4a87e1(0xbe1)][_0x4a87e1(0x2f2)][_0x4a87e1(0x432)](this,_0x2ace0a);return _0x3deeb7=this[_0x4a87e1(0x2e0)][_0x4a87e1(0xad2)]*_0x3deeb7+this['_multipliers']['hitFlat'],_0x3deeb7;}else{const _0xb7e9e9=this[_0x4a87e1(0xc45)](),_0xaa1829=_0xb7e9e9[0x0]?_0xb7e9e9[0x0][_0x4a87e1(0x6e9)]:0x0;return _0x77f820[_0x4a87e1(0x562)][_0xaa1829];}}}},Game_Action[_0x4a80d9(0xba6)]['itemCri']=function(_0x2e4845){const _0x57da4e=_0x4a80d9;if(!this[_0x57da4e(0x6af)]()[_0x57da4e(0x83e)][_0x57da4e(0x854)])return 0x0;let _0x4e96a8=VisuMZ['BattleCore'][_0x57da4e(0x668)][_0x57da4e(0x6ea)][_0x57da4e(0x83c)]['call'](this,_0x2e4845);return _0x4e96a8=this[_0x57da4e(0x2e0)][_0x57da4e(0x780)]*_0x4e96a8+this[_0x57da4e(0x2e0)][_0x57da4e(0x2f0)],_0x4e96a8;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xccb)]=function(_0x3eb3d7){const _0x5d32de=_0x4a80d9;return _0x3eb3d7=VisuMZ[_0x5d32de(0xbe1)][_0x5d32de(0x668)]['Damage'][_0x5d32de(0xc95)]['call'](this,_0x3eb3d7),_0x3eb3d7=this[_0x5d32de(0x2e0)][_0x5d32de(0x60f)]*_0x3eb3d7+this[_0x5d32de(0x2e0)][_0x5d32de(0x897)],_0x3eb3d7;},VisuMZ[_0x4a80d9(0xbe1)]['Game_Action_evalDamageFormula']=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x7b9)],Game_Action[_0x4a80d9(0xba6)]['evalDamageFormula']=function(_0x54ae9d){const _0x1806f8=_0x4a80d9;if(this['_customDamageFormula']!==_0x1806f8(0x7e5))return this[_0x1806f8(0x3bf)](_0x54ae9d);else return DataManager[_0x1806f8(0x872)](this['item']())===_0x1806f8(0x860)?VisuMZ['BattleCore'][_0x1806f8(0xa4b)]['call'](this,_0x54ae9d):this['evalDamageFormulaBattleCore'](_0x54ae9d);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x4df)]=function(_0x546715){const _0x29a1ca=_0x4a80d9;this[_0x29a1ca(0x664)]=_0x546715;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x3bf)]=function(_0xe1cecc){const _0x21f01b=_0x4a80d9,_0x1bfe13=this[_0x21f01b(0x6af)](),_0x167b11=_0x1bfe13[_0x21f01b(0x83e)][_0x21f01b(0x512)];_0x1bfe13[_0x21f01b(0x83e)][_0x21f01b(0x512)]=this[_0x21f01b(0x664)];let _0x36d6ff=VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x21f01b(0x432)](this,_0xe1cecc);return _0x1bfe13['damage'][_0x21f01b(0x512)]=_0x167b11,_0x36d6ff;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x25b)]=function(){const _0x3c0797=_0x4a80d9;if(this[_0x3c0797(0x6af)]()['note'][_0x3c0797(0x605)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x52e8e6=String(RegExp['$1'])[_0x3c0797(0x7ff)]()[_0x3c0797(0x893)]();return _0x52e8e6;}return _0x3c0797(0x860);},Game_Action[_0x4a80d9(0xba6)]['evalDamageFormulaBattleCore']=function(_0x2957fd){const _0x254ed7=_0x4a80d9,_0xb80600=DataManager[_0x254ed7(0x872)](this['item']()),_0x4b7d73=VisuMZ[_0x254ed7(0x12e)][_0xb80600];try{return _0x254ed7(0xa3a)!=='kOqdt'?_0x4b7d73[_0x254ed7(0x30d)][_0x254ed7(0x432)](this,_0x2957fd):_0x16138d[_0x254ed7(0xbe1)][_0x254ed7(0x668)][_0x254ed7(0x24b)][_0x254ed7(0x9b7)];}catch(_0x347289){if($gameTemp[_0x254ed7(0x69e)]())console[_0x254ed7(0x7bd)](_0x347289);return VisuMZ[_0x254ed7(0xbe1)]['Game_Action_evalDamageFormula'][_0x254ed7(0x432)](this);}},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x879)]=function(_0xeca199,_0x52867d){const _0x4d322b=_0x4a80d9;if(this[_0x4d322b(0x1d2)]())return _0x52867d;const _0xd00218=this['subject'](),_0x105410=_0xeca199;let _0x21aa20=[],_0x1944c4=[];_0x21aa20[_0x4d322b(0x510)](this[_0x4d322b(0x440)][_0x4d322b(0x147)],this[_0x4d322b(0x440)][_0x4d322b(0x3b7)]),_0x1944c4[_0x4d322b(0x510)](this[_0x4d322b(0x440)][_0x4d322b(0x9a6)],this['_armorPenetration'][_0x4d322b(0x701)]);const _0x59559a=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5c3387=this[_0x4d322b(0x673)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3dfda2=this[_0x4d322b(0x673)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x5c457e=this[_0x4d322b(0x673)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x21aa20=_0x21aa20[_0x4d322b(0x179)](_0x105410[_0x4d322b(0xc03)]()[_0x4d322b(0xc3f)](_0x580033=>_0x580033&&_0x580033[_0x4d322b(0x6c8)]['match'](_0x59559a)?Number(RegExp['$1']):0x0)),_0x1944c4=_0x1944c4[_0x4d322b(0x179)](_0x105410[_0x4d322b(0xc03)]()['map'](_0x8e3278=>_0x8e3278&&_0x8e3278[_0x4d322b(0x6c8)][_0x4d322b(0x605)](_0x5c3387)?Number(RegExp['$1'])/0x64:0x0)),_0x21aa20=_0x21aa20[_0x4d322b(0x179)](_0xd00218[_0x4d322b(0xc03)]()[_0x4d322b(0xc3f)](_0x23395f=>_0x23395f&&_0x23395f[_0x4d322b(0x6c8)][_0x4d322b(0x605)](_0x3dfda2)?Number(RegExp['$1']):0x0)),_0x1944c4=_0x1944c4[_0x4d322b(0x179)](_0xd00218[_0x4d322b(0xc03)]()[_0x4d322b(0xc3f)](_0x1192b7=>_0x1192b7&&_0x1192b7[_0x4d322b(0x6c8)]['match'](_0x5c457e)?Number(RegExp['$1'])/0x64:0x0)),this[_0x4d322b(0x6af)]()[_0x4d322b(0x6c8)]['match'](_0x3dfda2)&&_0x21aa20[_0x4d322b(0x510)](Number(RegExp['$1'])),this['item']()[_0x4d322b(0x6c8)][_0x4d322b(0x605)](_0x5c457e)&&(_0x4d322b(0x58a)==='RlOSj'?(_0x38c929['BattleCore']['Window_BattleLog_clear'][_0x4d322b(0x432)](this),this[_0x4d322b(0xcf7)]()):_0x1944c4[_0x4d322b(0x510)](Number(RegExp['$1']))),_0x52867d=_0x21aa20[_0x4d322b(0xca6)]((_0x46d47b,_0x19b9c4)=>_0x46d47b-_0x19b9c4,_0x52867d),_0x52867d>0x0&&(_0x52867d=_0x1944c4[_0x4d322b(0xca6)]((_0x1e3777,_0xbb67b2)=>_0x1e3777*(0x1-_0xbb67b2),_0x52867d)),_0x52867d;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2b2)]=Game_Action[_0x4a80d9(0xba6)]['executeDamage'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x926)]=function(_0x545a4c,_0x46f7e2){const _0x1c24c6=_0x4a80d9;_0x46f7e2=_0x46f7e2*this[_0x1c24c6(0x2e0)][_0x1c24c6(0x2bc)],_0x46f7e2+=this['_multipliers'][_0x1c24c6(0xca1)]*(_0x46f7e2>=0x0?0x1:-0x1),_0x46f7e2=this[_0x1c24c6(0x2d7)](_0x1c24c6(0x238),_0x545a4c,_0x46f7e2,![]),_0x46f7e2=this[_0x1c24c6(0x472)](_0x46f7e2),_0x46f7e2=Math[_0x1c24c6(0x961)](_0x46f7e2),this[_0x1c24c6(0xbbe)]=_0x46f7e2,this[_0x1c24c6(0x4b3)]=this[_0x1c24c6(0x4b3)]||0x0,this[_0x1c24c6(0x4b3)]+=_0x46f7e2,VisuMZ[_0x1c24c6(0xbe1)][_0x1c24c6(0x2b2)][_0x1c24c6(0x432)](this,_0x545a4c,_0x46f7e2),this[_0x1c24c6(0x2d7)](_0x1c24c6(0x474),_0x545a4c,_0x46f7e2,!![]);},Game_Action['prototype']['applyDamageCaps']=function(_0x5f59fa){const _0x3cf1df=_0x4a80d9;if(this[_0x3cf1df(0xcfa)]())return _0x5f59fa;return _0x5f59fa=this[_0x3cf1df(0x48a)](_0x5f59fa),_0x5f59fa=this[_0x3cf1df(0x9b3)](_0x5f59fa),_0x5f59fa;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xcfa)]=function(){const _0x345f24=_0x4a80d9,_0x28fa97=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x345f24(0x6c8)][_0x345f24(0x605)](_0x28fa97))return!![];if(this[_0x345f24(0x1e3)]()[_0x345f24(0xc03)]()['some'](_0x27ef40=>_0x27ef40&&_0x27ef40['note']['match'](_0x28fa97)))return!![];return!VisuMZ[_0x345f24(0xbe1)][_0x345f24(0x668)]['Damage']['EnableDamageCap'];},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x48a)]=function(_0x2dbe1c){const _0x28eaa3=_0x4a80d9;if(!VisuMZ[_0x28eaa3(0xbe1)]['Settings'][_0x28eaa3(0x6ea)][_0x28eaa3(0x73c)])return _0x2dbe1c;const _0x282503=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x28eaa3(0x6af)]()[_0x28eaa3(0x6c8)][_0x28eaa3(0x605)](_0x282503))return _0x2dbe1c;if(this[_0x28eaa3(0x1e3)]()[_0x28eaa3(0xc03)]()['some'](_0xd506c8=>_0xd506c8&&_0xd506c8[_0x28eaa3(0x6c8)][_0x28eaa3(0x605)](_0x282503))){if('DQvSE'==='DQvSE')return _0x2dbe1c;else _0x58752d['BattleCore'][_0x28eaa3(0x3a4)][_0x28eaa3(0x432)](this,_0x1772e4,_0x137b7d),this[_0x28eaa3(0x77d)][this[_0x28eaa3(0x77d)]['length']-0x1][_0x28eaa3(0x827)]=!![];}const _0x3a07d3=_0x2dbe1c<0x0?-0x1:0x1;_0x2dbe1c=Math[_0x28eaa3(0x630)](_0x2dbe1c);let _0x16bbe2=this['subject']()[_0x28eaa3(0x14f)]();this[_0x28eaa3(0x6af)]()['note'][_0x28eaa3(0x605)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x28eaa3(0xb77)!=='ehZJF'?_0x16bbe2+=Number(RegExp['$1'])/0x64:(_0x275cdf+=_0x44b8ff,_0x422f66+=_0x111b4d['isActor']()?-_0x3ad35c:_0x19cb63));_0x16bbe2=_0x16bbe2[_0x28eaa3(0xb4e)](0.01,0x1);const _0x1fa3e1=this['getHardDamageCap'](),_0x4b06cf=_0x16bbe2*_0x1fa3e1;if(_0x2dbe1c>_0x4b06cf&&_0x1fa3e1>_0x4b06cf){_0x2dbe1c-=_0x4b06cf;const _0x528425=VisuMZ[_0x28eaa3(0xbe1)]['Settings'][_0x28eaa3(0x6ea)][_0x28eaa3(0xc15)],_0x28a9d1=Math[_0x28eaa3(0x78c)](0x1-_0x2dbe1c/((_0x1fa3e1-_0x4b06cf)*_0x528425+_0x2dbe1c),0.01);_0x2dbe1c*=_0x28a9d1,_0x2dbe1c+=_0x4b06cf;}return _0x2dbe1c*_0x3a07d3;},Game_Action['prototype']['getHardDamageCap']=function(){const _0xd5ce68=_0x4a80d9;return this['item']()[_0xd5ce68(0x6c8)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0xd5ce68(0x1e3)]()['hardDamageCap']();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x9b3)]=function(_0x4130d1){const _0x2541ed=_0x4a80d9;console[_0x2541ed(0x7bd)](_0x4130d1);let _0x26ef3f=this[_0x2541ed(0x764)]();return _0x4130d1[_0x2541ed(0xb4e)](-_0x26ef3f,_0x26ef3f);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x66f)]=function(){const _0x3eea0a=_0x4a80d9;if(!this[_0x3eea0a(0x6af)]())return![];return(this['item']()[_0x3eea0a(0x6c8)]||'')[_0x3eea0a(0x605)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x39a)]=function(_0x50260c){const _0x75e8f7=_0x4a80d9;if(this[_0x75e8f7(0x66f)]()){if(_0x75e8f7(0x595)!==_0x75e8f7(0x595)){const _0x22c762=this[_0x75e8f7(0x8b4)](_0x23a29f);this[_0x75e8f7(0x737)](_0xccfba8,_0x22c762['x'],_0x22c762['y'],_0x22c762['width'],_0x22c762[_0x75e8f7(0x8dc)]);}else{let _0x2f56b2=BattleManager[_0x75e8f7(0x447)];_0x50260c/=_0x2f56b2[_0x75e8f7(0x6fc)],this[_0x75e8f7(0x720)]()&&(_0x75e8f7(0x293)===_0x75e8f7(0x79f)?_0x5bd388=(_0x42551a+_0x507a35)/0x2:_0x50260c*=this[_0x75e8f7(0x1e3)]()['attackTimesAdd']()+0x1),_0x50260c=_0x50260c>0x0?Math[_0x75e8f7(0xbf1)](_0x50260c):Math[_0x75e8f7(0x506)](_0x50260c);}}return _0x50260c;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x7c2)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xbde)],Game_Action['prototype'][_0x4a80d9(0xbde)]=function(_0x2afc17,_0x1bcf2e){const _0x2a3bd4=_0x4a80d9;let _0x307724=VisuMZ['BattleCore'][_0x2a3bd4(0x7c2)][_0x2a3bd4(0x432)](this,_0x2afc17,_0x1bcf2e);return this[_0x2a3bd4(0x39a)](_0x307724);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x16c)]=function(_0x109306,_0x1d5289){const _0x5f32a4=_0x4a80d9;let _0x1c772b=(_0x109306[_0x5f32a4(0x772)]*_0x1d5289[_0x5f32a4(0x2f9)]+_0x1d5289[_0x5f32a4(0x289)])*_0x109306[_0x5f32a4(0x6ec)];_0x1c772b=this[_0x5f32a4(0x39a)](_0x1c772b),this[_0x5f32a4(0x119)]()&&(_0x1c772b*=this[_0x5f32a4(0x1e3)]()['pha']),_0x1c772b=Math['floor'](_0x1c772b),_0x1c772b!==0x0&&(_0x5f32a4(0x6c0)==='PbNFo'?_0x5d7bc3=_0x46ba1[this['_actor'][_0x5f32a4(0xcd0)]()]:(_0x109306[_0x5f32a4(0x65a)](_0x1c772b),this['makeSuccess'](_0x109306)));},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x2e7)]=function(_0x505c91,_0xbace00){const _0x54bb5d=_0x4a80d9;let _0x441b9d=(_0x505c91['mmp']*_0xbace00[_0x54bb5d(0x2f9)]+_0xbace00[_0x54bb5d(0x289)])*_0x505c91[_0x54bb5d(0x6ec)];_0x441b9d=this[_0x54bb5d(0x39a)](_0x441b9d),this[_0x54bb5d(0x119)]()&&(_0x441b9d*=this[_0x54bb5d(0x1e3)]()[_0x54bb5d(0xcc9)]),_0x441b9d=Math[_0x54bb5d(0x506)](_0x441b9d),_0x441b9d!==0x0&&(_0x505c91[_0x54bb5d(0x554)](_0x441b9d),this[_0x54bb5d(0x882)](_0x505c91));},Game_Action[_0x4a80d9(0xba6)]['itemEffectGainTp']=function(_0x3347cc,_0x5f1cf4){const _0xb363a2=_0x4a80d9;let _0x15cc9d=Math['floor'](_0x5f1cf4[_0xb363a2(0x2f9)]);_0x15cc9d=this[_0xb363a2(0x39a)](_0x15cc9d),_0x15cc9d!==0x0&&(_0x3347cc[_0xb363a2(0x389)](_0x15cc9d),this[_0xb363a2(0x882)](_0x3347cc));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x342)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x71a)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x71a)]=function(_0x3b21ed){const _0x345946=_0x4a80d9;this['applyBattleCoreJS']('PreApply%1JS',_0x3b21ed,0x0,!![]),VisuMZ['BattleCore']['Game_Action_apply'][_0x345946(0x432)](this,_0x3b21ed),this[_0x345946(0x2d7)](_0x345946(0x573),_0x3b21ed,this[_0x345946(0xbbe)]||0x0,!![]),this[_0x345946(0x535)](_0x3b21ed);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x2d7)]=function(_0x4efdf4,_0x4499a9,_0x59ff10,_0x13015f){const _0x4c6ff3=_0x4a80d9;if(this['_tempBattler']||this[_0x4c6ff3(0x85d)])return;_0x59ff10=_0x59ff10||0x0;const _0x440d5a=_0x59ff10,_0x4e1b4b=VisuMZ[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x668)]['Mechanics'],_0x1389b7=_0x4efdf4[_0x4c6ff3(0x7d6)]('');if(_0x4e1b4b[_0x1389b7]){_0x59ff10=_0x4e1b4b[_0x1389b7][_0x4c6ff3(0x432)](this,_0x59ff10,_0x4499a9);if(_0x13015f)_0x59ff10=_0x440d5a;}let _0x95a0f0=VisuMZ[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x24f)](this[_0x4c6ff3(0x6af)](),_0x4efdf4['format'](''));if(VisuMZ['BattleCore']['JS'][_0x95a0f0]){if('vbLDq'===_0x4c6ff3(0x10c))this['addItemCommand']();else{_0x59ff10=VisuMZ[_0x4c6ff3(0xbe1)]['JS'][_0x95a0f0]['call'](this,this['subject'](),_0x4499a9,this[_0x4c6ff3(0x6af)](),_0x59ff10);if(_0x13015f)_0x59ff10=_0x440d5a;}}for(const _0x35aa0b of this[_0x4c6ff3(0x1e3)]()['traitObjects']()){if(!_0x35aa0b)continue;_0x95a0f0=VisuMZ[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x24f)](_0x35aa0b,_0x4efdf4['format'](_0x4c6ff3(0x214)));if(VisuMZ['BattleCore']['JS'][_0x95a0f0]){if('uqUpH'!==_0x4c6ff3(0x1c8)){_0x59ff10=VisuMZ[_0x4c6ff3(0xbe1)]['JS'][_0x95a0f0][_0x4c6ff3(0x432)](this,this['subject'](),_0x4499a9,_0x35aa0b,_0x59ff10);if(_0x13015f)_0x59ff10=_0x440d5a;}else{if(!_0x5e1b48['BattleCore'][_0x4c6ff3(0x668)][_0x4c6ff3(0x6ea)][_0x4c6ff3(0x73c)])return _0xca9b17;const _0x34e29c=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4c6ff3(0x6af)]()['note'][_0x4c6ff3(0x605)](_0x34e29c))return _0x560c4d;if(this[_0x4c6ff3(0x1e3)]()[_0x4c6ff3(0xc03)]()[_0x4c6ff3(0x458)](_0xb00519=>_0xb00519&&_0xb00519[_0x4c6ff3(0x6c8)]['match'](_0x34e29c)))return _0x4f1189;const _0x30316a=_0x3fd719<0x0?-0x1:0x1;_0x3ff7c3=_0x2dd9c7[_0x4c6ff3(0x630)](_0x29ab03);let _0x5f328f=this[_0x4c6ff3(0x1e3)]()[_0x4c6ff3(0x14f)]();this[_0x4c6ff3(0x6af)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x5f328f+=_0x21e3db(_0x9eee19['$1'])/0x64);_0x5f328f=_0x5f328f['clamp'](0.01,0x1);const _0x1dd61d=this['getHardDamageCap'](),_0x3c5c30=_0x5f328f*_0x1dd61d;if(_0x2f26e8>_0x3c5c30&&_0x1dd61d>_0x3c5c30){_0x123411-=_0x3c5c30;const _0x2d497a=_0x4f0478[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x668)][_0x4c6ff3(0x6ea)][_0x4c6ff3(0xc15)],_0x6a6eb=_0x322ace[_0x4c6ff3(0x78c)](0x1-_0x4bb717/((_0x1dd61d-_0x3c5c30)*_0x2d497a+_0x518dbc),0.01);_0x2714e4*=_0x6a6eb,_0x3c50eb+=_0x3c5c30;}return _0x22158b*_0x30316a;}}}for(const _0x136675 of _0x4499a9[_0x4c6ff3(0xc03)]()){if(!_0x136675)continue;_0x95a0f0=VisuMZ[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x24f)](_0x136675,_0x4efdf4[_0x4c6ff3(0x7d6)]('AsTarget'));if(VisuMZ[_0x4c6ff3(0xbe1)]['JS'][_0x95a0f0]){if('orWSP'!==_0x4c6ff3(0xa1c)){const _0x388c6e=this[_0x4c6ff3(0x139)]['currentAction'](),_0x56be1b=this[_0x4c6ff3(0x139)];_0x388c6e&&_0x388c6e[_0x4c6ff3(0x1e3)]()===_0x56be1b&&_0x388c6e[_0x4c6ff3(0x498)](_0x4c6ff3(0x858)),_0x304a7f[_0x4c6ff3(0xbe1)][_0x4c6ff3(0x3da)][_0x4c6ff3(0x432)](this),_0x388c6e&&_0x388c6e[_0x4c6ff3(0x1e3)]()===_0x56be1b&&_0x388c6e[_0x4c6ff3(0x498)]('PostStartActionJS');}else{_0x59ff10=VisuMZ[_0x4c6ff3(0xbe1)]['JS'][_0x95a0f0][_0x4c6ff3(0x432)](this,this[_0x4c6ff3(0x1e3)](),_0x4499a9,_0x136675,_0x59ff10);if(_0x13015f)_0x59ff10=_0x440d5a;}}}return _0x59ff10;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x498)]=function(_0x796faa){const _0x381a8a=_0x4a80d9,_0x17442b=this[_0x381a8a(0x4b3)]||0x0,_0x513037=VisuMZ[_0x381a8a(0xbe1)][_0x381a8a(0x668)][_0x381a8a(0x1c6)],_0x513c9e=_0x796faa[_0x381a8a(0x7d6)]('');_0x513037[_0x513c9e]&&(_0x381a8a(0x56e)===_0x381a8a(0x29b)?(_0xf5498e(_0x381a8a(0xae0)[_0x381a8a(0x7d6)](_0x2e95d5,_0x547146)),_0x3d929f[_0x381a8a(0x628)]()):_0x513037[_0x513c9e][_0x381a8a(0x432)](this,_0x17442b));let _0x474d7e=VisuMZ[_0x381a8a(0xbe1)][_0x381a8a(0x24f)](this['item'](),_0x796faa);VisuMZ[_0x381a8a(0xbe1)]['JS'][_0x474d7e]&&VisuMZ[_0x381a8a(0xbe1)]['JS'][_0x474d7e]['call'](this,this[_0x381a8a(0x1e3)](),this[_0x381a8a(0x1e3)](),this['item'](),_0x17442b);for(const _0x988133 of this[_0x381a8a(0x1e3)]()[_0x381a8a(0xc03)]()){if(!_0x988133)continue;_0x474d7e=VisuMZ['BattleCore']['createKeyJS'](_0x988133,_0x796faa);if(VisuMZ[_0x381a8a(0xbe1)]['JS'][_0x474d7e]){if(_0x381a8a(0x4d2)!==_0x381a8a(0x269))VisuMZ[_0x381a8a(0xbe1)]['JS'][_0x474d7e][_0x381a8a(0x432)](this,this[_0x381a8a(0x1e3)](),this[_0x381a8a(0x1e3)](),_0x988133,_0x17442b);else{if(!_0x27662[_0x381a8a(0x1f8)]())return;const _0x2ce378=_0x2a8337['getLastPluginCommandInterpreter']();if(!_0x2ce378)return;_0x2ce378['setWaitMode']('battleEffect');}}}},Game_Action['prototype'][_0x4a80d9(0xb1d)]=function(){const _0x544ef1=_0x4a80d9;return VisuMZ[_0x544ef1(0xbe1)][_0x544ef1(0x668)]['Mechanics'][_0x544ef1(0x277)][_0x544ef1(0x432)](this);},Game_Action['prototype'][_0x4a80d9(0x160)]=function(){const _0x2692bd=_0x4a80d9;return VisuMZ[_0x2692bd(0xbe1)][_0x2692bd(0x668)][_0x2692bd(0x1c6)][_0x2692bd(0x20b)];},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x3ae)]=function(){const _0x142013=_0x4a80d9;if(this[_0x142013(0x5eb)]===_0x142013(0xa98))return![];if(this[_0x142013(0x5eb)]==='all\x20enemies')return![];if(!this[_0x142013(0x6af)]())return![];return this['item']()[_0x142013(0x6c8)][_0x142013(0x605)](/<JS TARGETS>/i);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x137)]=function(){const _0x383e1b=_0x4a80d9;if(this[_0x383e1b(0x5eb)]===_0x383e1b(0xa98))return![];if(this['_targetBattlerKey']===_0x383e1b(0xbf0))return![];if(!this[_0x383e1b(0x899)]&&this[_0x383e1b(0x1e3)]()[_0x383e1b(0x9e8)]())return![];if(this[_0x383e1b(0x3ae)]())return!![];if(!this[_0x383e1b(0x6af)]())return![];return typeof this[_0x383e1b(0x6af)]()['scope']===_0x383e1b(0xcbf);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xca8)]=Game_Action['prototype'][_0x4a80d9(0x559)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x559)]=function(){const _0x465005=_0x4a80d9;if(this[_0x465005(0x5eb)]==='all\x20actors')return![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];if(this['isBattleCoreTargetScope']()&&!this[_0x465005(0x3ae)]()){if(_0x465005(0x836)===_0x465005(0x836))return this[_0x465005(0x9f1)]();else _0x5d356a['BattleCore']['ParseClassNotetags']&&_0x27bc50['BattleCore']['ParseClassNotetags'][_0x465005(0x432)](this,_0x32ea8c),_0x394d08['BattleCore'][_0x465005(0x196)](_0x33acad);}else{if(_0x465005(0xc50)!==_0x465005(0xc50))for(const _0x3fc870 of _0x3aca00[_0x465005(0x767)]){if(_0xa5b4a7[_0x3fc870[_0x465005(0xaf6)]]){const _0x52f159=_0x3fc870[_0x465005(0xaf6)],_0x596503=_0x3fc870['x'],_0x5b26d1=_0x3fc870['y'],_0x4740ee=new _0x51d9ee(_0x52f159,_0x596503,_0x5b26d1);_0x3fc870[_0x465005(0xb8f)]&&_0x4740ee['hide'](),this[_0x465005(0x441)][_0x465005(0x510)](_0x4740ee);}}else return VisuMZ['BattleCore'][_0x465005(0xca8)][_0x465005(0x432)](this);}},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x9f1)]=function(){const _0x431d9d=_0x4a80d9,_0x694df8=this[_0x431d9d(0x6af)]()['scope'];if(_0x694df8['match'](/ANY/i))return!![];return _0x694df8[_0x431d9d(0x605)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x1d3)]=Game_Action[_0x4a80d9(0xba6)]['isForFriend'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x182)]=function(){const _0x459b47=_0x4a80d9;if(this[_0x459b47(0x5eb)]===_0x459b47(0xa98))return!![];if(this[_0x459b47(0x5eb)]===_0x459b47(0xbf0))return![];return this[_0x459b47(0x137)]()&&!this[_0x459b47(0x3ae)]()?this['isForFriendBattleCore']():VisuMZ[_0x459b47(0xbe1)][_0x459b47(0x1d3)][_0x459b47(0x432)](this);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x5d6)]=function(){const _0x2d16fa=_0x4a80d9,_0x50489e=this[_0x2d16fa(0x6af)]()[_0x2d16fa(0x37f)];return _0x50489e['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x16f)]=function(){const _0x5ddd5e=_0x4a80d9;if(this[_0x5ddd5e(0x137)]()&&!this[_0x5ddd5e(0x3ae)]()){const _0x163c09=this[_0x5ddd5e(0x6af)]()[_0x5ddd5e(0x37f)];return _0x163c09['match'](/(?:ENEMY|FOE)/i)&&_0x163c09[_0x5ddd5e(0x605)](/OR/i)&&_0x163c09[_0x5ddd5e(0x605)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action['prototype'][_0x4a80d9(0x89c)]=function(){const _0x5013a8=_0x4a80d9;if(this['isForAnyone']()){if('kVCMV'===_0x5013a8(0x5ee)){const _0x5e7b37=_0x5013a8(0x4c3)[_0x5013a8(0x7d6)](_0xc0cbec[_0x5013a8(0xb8e)]()),_0x15e134=this['createInnerPortrait'](_0x5e7b37,_0x2f5a28),_0x8bbace=_0x17a64d[_0x5013a8(0x794)]();_0x8bbace!==''?_0x15e134[_0x5013a8(0xc0b)]=_0xd0d4f[_0x5013a8(0x707)](_0x8bbace):_0x15e134['bitmap']=_0x42461b[_0x5013a8(0xc6b)];const _0x42fbfb=this[_0x5013a8(0xaa8)](_0xaa5698);_0x15e134[_0x5013a8(0x2dd)]['x']=0.5,_0x15e134[_0x5013a8(0x2dd)]['y']=0x1;let _0x1eaac8=_0x43eb09['round'](_0x42fbfb['x']+_0x42fbfb['width']/0x2)+this['padding'];_0x1eaac8+=_0x5ca3d9['getBattlePortraitOffsetX']();let _0x480a28=_0x28d863[_0x5013a8(0x961)](this[_0x5013a8(0x8dc)]);_0x480a28+=_0x45b763[_0x5013a8(0xc94)](),_0x15e134['move'](_0x1eaac8,_0x480a28);const _0x3ad1a3=_0x3220c1[_0x5013a8(0xbe1)][_0x5013a8(0x668)][_0x5013a8(0x7c4)]['PortraitScale'];_0x15e134['scale']['x']=_0x3ad1a3,_0x15e134[_0x5013a8(0xf4)]['y']=_0x3ad1a3,_0x15e134[_0x5013a8(0x3a5)]();}else{const _0x1bfacb=this[_0x5013a8(0x6af)]()[_0x5013a8(0x37f)];if(_0x1bfacb[_0x5013a8(0x605)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}}return![];},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x52f)]=function(){const _0x1abb5f=_0x4a80d9;if(this[_0x1abb5f(0x16f)]()){if('bxpgv'===_0x1abb5f(0x1de)){const _0x12267c=this['item']()[_0x1abb5f(0x37f)];if(_0x12267c[_0x1abb5f(0x605)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else _0x5930e8[_0x1abb5f(0x442)]()[_0x1abb5f(0x533)](),_0x593b96[_0x1abb5f(0x9cf)](),_0x51a4e0[_0x1abb5f(0x3eb)](),this['changeInputWindow']();}return![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3c1)]=Game_Action['prototype'][_0x4a80d9(0x975)],Game_Action['prototype'][_0x4a80d9(0x975)]=function(){const _0x5a9c10=_0x4a80d9;if(this['_targetBattlerKey']===_0x5a9c10(0xa98))return!![];return this[_0x5a9c10(0x137)]()&&!this[_0x5a9c10(0x3ae)]()?this[_0x5a9c10(0x227)]():VisuMZ[_0x5a9c10(0xbe1)][_0x5a9c10(0x3c1)][_0x5a9c10(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2e9)]=Game_Action['prototype'][_0x4a80d9(0x48e)],Game_Action['prototype'][_0x4a80d9(0x48e)]=function(){const _0x232774=_0x4a80d9;if(this[_0x232774(0x5eb)]==='all\x20actors'){if(_0x232774(0xc23)===_0x232774(0xc23))return VisuMZ['BattleCore'][_0x232774(0x2e9)][_0x232774(0x432)](this);else{if(_0x204359[_0x232774(0x6cc)])return;_0x31ea08['BattleCore'][_0x232774(0x45f)][_0x232774(0x432)](this);}}return VisuMZ[_0x232774(0xbe1)]['Game_Action_isForDeadFriend'][_0x232774(0x432)](this);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x227)]=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xa8c)]=function(){const _0x343125=_0x4a80d9;return this[_0x343125(0x6af)]()&&this[_0x343125(0x6af)]()['note'][_0x343125(0x605)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x4a80d9(0xbe1)]['Game_Action_isForOne']=Game_Action['prototype'][_0x4a80d9(0x61a)],Game_Action[_0x4a80d9(0xba6)]['isForOne']=function(){const _0x3fdd9d=_0x4a80d9;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x3fdd9d(0x5eb)]===_0x3fdd9d(0xbf0))return![];if(this[_0x3fdd9d(0x137)]()&&!this[_0x3fdd9d(0x3ae)]()){if(_0x3fdd9d(0x9dd)!==_0x3fdd9d(0x9dd))this[_0x3fdd9d(0x9ec)]=0x0,this[_0x3fdd9d(0x1d5)]=0x0,this[_0x3fdd9d(0xc59)]=0x0,this[_0x3fdd9d(0x355)]=0x0,this[_0x3fdd9d(0x140)]=0x0,this[_0x3fdd9d(0x31b)]=0x0,this['_floatEasing']='Linear',this[_0x3fdd9d(0x920)]=0x0,this[_0x3fdd9d(0x7d3)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this[_0x3fdd9d(0x525)]=0xff,this[_0x3fdd9d(0x8f9)]=0x0,this[_0x3fdd9d(0x41a)]=0x0,this[_0x3fdd9d(0xb52)]='Linear',this[_0x3fdd9d(0xb85)]=0x0,this[_0x3fdd9d(0x8ba)]=0x0,this[_0x3fdd9d(0xb31)]=0x0,this[_0x3fdd9d(0x8de)]=0x0,this[_0x3fdd9d(0x97c)]=_0x3fdd9d(0xa70),this[_0x3fdd9d(0x8b0)]=!![],this[_0x3fdd9d(0x803)]=0x0,this[_0x3fdd9d(0x1cc)]=0x0,this[_0x3fdd9d(0xcee)]=0x0,this[_0x3fdd9d(0x2a2)]=0x0,this[_0x3fdd9d(0x5a3)]=0x0,this[_0x3fdd9d(0x557)]=0x0,this['_skewEasing']=_0x3fdd9d(0xa70),this[_0x3fdd9d(0x337)]=0x1,this[_0x3fdd9d(0xc0f)]=0x1,this[_0x3fdd9d(0xb9c)]=0x1,this[_0x3fdd9d(0x726)]=0x1,this['_growDuration']=0x0,this[_0x3fdd9d(0x971)]=0x0,this[_0x3fdd9d(0x150)]=_0x3fdd9d(0xa70),this[_0x3fdd9d(0x8ac)]=0x1,this[_0x3fdd9d(0x194)]=0x0,this[_0x3fdd9d(0x19a)]=0x0,this[_0x3fdd9d(0xc8d)]=0x0,this[_0x3fdd9d(0x2b6)]=0x0,this[_0x3fdd9d(0x359)]='Linear',this[_0x3fdd9d(0x81c)]=0x0,this[_0x3fdd9d(0x66c)]=0x0;else return this[_0x3fdd9d(0xad3)]();}else return VisuMZ[_0x3fdd9d(0xbe1)][_0x3fdd9d(0xa6e)][_0x3fdd9d(0x432)](this);},Game_Action['prototype'][_0x4a80d9(0xad3)]=function(){const _0x16836a=_0x4a80d9;if(this[_0x16836a(0x16f)]())return!![];return![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x919)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x968)],Game_Action['prototype'][_0x4a80d9(0x968)]=function(){const _0x2ff1bf=_0x4a80d9;if(this[_0x2ff1bf(0x5eb)]==='all\x20actors')return![];if(this[_0x2ff1bf(0x5eb)]===_0x2ff1bf(0xbf0))return![];if(this[_0x2ff1bf(0x137)]()&&!this[_0x2ff1bf(0x3ae)]()){if(_0x2ff1bf(0xbb4)===_0x2ff1bf(0xbb4))return this['isForRandomBattleCore']();else{const _0x448e77=_0x47855b['parse']('['+_0x546f6c['$1'][_0x2ff1bf(0x605)](/\d+/g)+']');for(const _0x3fdd83 of _0x448e77){if(!_0x3b161f[_0x2ff1bf(0x638)](_0x3fdd83))return!![];}return![];}}else return VisuMZ[_0x2ff1bf(0xbe1)][_0x2ff1bf(0x919)]['call'](this);},Game_Action['prototype'][_0x4a80d9(0x784)]=function(){const _0x56b33a=_0x4a80d9,_0xddc834=this[_0x56b33a(0x6af)]()[_0x56b33a(0x37f)];return _0xddc834[_0x56b33a(0x605)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore']['Game_Action_isForAll']=Game_Action['prototype'][_0x4a80d9(0x9d6)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x9d6)]=function(){const _0x1720a3=_0x4a80d9;if(this[_0x1720a3(0x5eb)]===_0x1720a3(0xa98))return!![];if(this[_0x1720a3(0x5eb)]===_0x1720a3(0xbf0))return!![];return VisuMZ[_0x1720a3(0xbe1)][_0x1720a3(0x423)]['call'](this);},Game_Action['prototype'][_0x4a80d9(0x323)]=function(){const _0x5b85af=_0x4a80d9;if(!this[_0x5b85af(0x6af)]())return![];if(this[_0x5b85af(0x48e)]())return![];return(this[_0x5b85af(0x6af)]()['note']||'')[_0x5b85af(0x605)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x4a80d9(0xbe1)]['Game_Action_testApply']=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x107)],Game_Action['prototype']['testApply']=function(_0x3bd807){const _0x4e8a7d=_0x4a80d9;if(this[_0x4e8a7d(0xa8c)]()&&_0x3bd807===this[_0x4e8a7d(0x1e3)]())return![];return VisuMZ[_0x4e8a7d(0xbe1)][_0x4e8a7d(0x1e7)][_0x4e8a7d(0x432)](this,_0x3bd807);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5c9)]=Game_Action['prototype']['itemTargetCandidates'],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x749)]=function(){const _0x2e338c=_0x4a80d9,_0x45f8ac=VisuMZ[_0x2e338c(0xbe1)]['Game_Action_itemTargetCandidates'][_0x2e338c(0x432)](this);if(this[_0x2e338c(0xa8c)]())_0x45f8ac[_0x2e338c(0x249)](this[_0x2e338c(0x1e3)]());return _0x45f8ac;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x59b)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x864)],Game_Action[_0x4a80d9(0xba6)]['needsSelection']=function(){const _0x2faca6=_0x4a80d9;return this[_0x2faca6(0x137)]()&&!this['isCustomBattleScope']()?this[_0x2faca6(0xb29)]():_0x2faca6(0x934)!=='slptK'?this[_0x2faca6(0x22b)]:VisuMZ['BattleCore'][_0x2faca6(0x59b)][_0x2faca6(0x432)](this);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xb29)]=function(){const _0x598bf0=_0x4a80d9,_0x45fd13=this['item']()[_0x598bf0(0x37f)];if(_0x45fd13[_0x598bf0(0x605)](/RANDOM/i))return![];if(_0x45fd13[_0x598bf0(0x605)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x45fd13[_0x598bf0(0x605)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x45fd13[_0x598bf0(0x605)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x45fd13[_0x598bf0(0x605)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x598bf0(0xbe1)][_0x598bf0(0x59b)][_0x598bf0(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcb5)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x86b)],Game_Action['prototype'][_0x4a80d9(0x86b)]=function(){const _0x379756=_0x4a80d9;let _0x5ebf89=[];return this[_0x379756(0x137)]()?this[_0x379756(0x3ae)]()?_0x379756(0x7e3)===_0x379756(0x7e3)?_0x5ebf89=this['makeTargetsBattleCoreJS']():this['startMotion']('dead'):_0x5ebf89=this['makeTargetsBattleCore']():_0x379756(0x957)!==_0x379756(0x5a1)?_0x5ebf89=VisuMZ['BattleCore'][_0x379756(0xcb5)][_0x379756(0x432)](this):(_0x29107e[_0x379756(0xba6)]['_updateFilterArea'][_0x379756(0x432)](this),this['_updateCursorFilterArea']()),_0x5ebf89=this[_0x379756(0x49b)](_0x5ebf89),_0x5ebf89;},Game_Action['prototype']['isSubjectValidForAnyoneSelect']=function(){const _0x411e2a=_0x4a80d9;return this[_0x411e2a(0x1e3)]()[_0x411e2a(0x172)]()&&!this[_0x411e2a(0x1e3)]()[_0x411e2a(0xc9c)]();},Game_Action['prototype'][_0x4a80d9(0xb87)]=function(){const _0x4444bb=_0x4a80d9,_0x57ffcf=VisuMZ[_0x4444bb(0xbe1)][_0x4444bb(0x24f)](this['item'](),'Targets');if(VisuMZ[_0x4444bb(0xbe1)]['JS'][_0x57ffcf]){targets=VisuMZ['BattleCore'][_0x4444bb(0xcb5)][_0x4444bb(0x432)](this);const _0x3c6b6e=VisuMZ[_0x4444bb(0xbe1)][_0x4444bb(0x24f)](this['item'](),_0x4444bb(0x302));return targets=VisuMZ['BattleCore']['JS'][_0x3c6b6e]['call'](this,this[_0x4444bb(0x1e3)](),targets),this[_0x4444bb(0x295)](targets);}return this[_0x4444bb(0x582)]();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x582)]=function(){const _0x10cd85=_0x4a80d9;let _0x1762c6=[];const _0x1ab6ed=String(this[_0x10cd85(0x6af)]()[_0x10cd85(0x37f)]);if(this['isForAnyoneFocusOpponents']()){if(this[_0x10cd85(0x4e0)]()){if('VJGLN'===_0x10cd85(0x502))return _0x1762c6=this[_0x10cd85(0x353)](),this['repeatTargets'](_0x1762c6);else{if(_0x3683a6[_0x10cd85(0x6c8)][_0x10cd85(0x605)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xfa1c8e=_0x17e62b(_0x38b031['$1'])[_0x10cd85(0x7ff)]()[_0x10cd85(0x893)]();if(_0xfa1c8e===_0x10cd85(0x860))return _0x10cd85(0x860);if(_0x3fff80[_0x10cd85(0x12e)][_0xfa1c8e])return _0xfa1c8e;}const _0x3de529=_0x1a534b['BattleCore']['Settings'][_0x10cd85(0x6ea)]['DefaultDamageStyle'][_0x10cd85(0x7ff)]()[_0x10cd85(0x893)]();if(_0x2b4ef3[_0x10cd85(0x12e)][_0x3de529])return _0x3de529;return _0x10cd85(0x860);}}else return this['_targetIndex']=-0x1,_0x1762c6[_0x10cd85(0x510)](...this[_0x10cd85(0xb54)]()),this[_0x10cd85(0x295)](_0x1762c6);}if(this[_0x10cd85(0x89c)]()){if('SKXYG'===_0x10cd85(0x3b0)){if(_0x57fd5f[_0x10cd85(0x8a6)]())this['selectNextCommand']();else _0x5de1fb[_0x10cd85(0x800)]()&&_0x5a9c9f[_0x10cd85(0xbe1)][_0x10cd85(0x11a)]['call'](this);}else{if(this['isSubjectValidForAnyoneSelect']()){if('GEZeH'!=='GEZeH')_0x55743f[_0x10cd85(0xbe1)][_0x10cd85(0x839)][_0x10cd85(0x432)](this),this['updateShadowBattleCore']();else return _0x1762c6=this['getBattlerKeyTargets'](),this[_0x10cd85(0x295)](_0x1762c6);}else{if(_0x10cd85(0x567)==='QMnII')_0x509b44[_0x10cd85(0x2f5)](this[_0x10cd85(0x503)]);else{if(Imported[_0x10cd85(0x9f4)]){if(_0x10cd85(0xa2f)===_0x10cd85(0xa2f)){if(VisuMZ[_0x10cd85(0x46e)][_0x10cd85(0xbdd)]<1.19){let _0x1fe404='';_0x1fe404+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x1fe404+=_0x10cd85(0x768),_0x1fe404+=_0x10cd85(0x8bc),alert(_0x1fe404),SceneManager[_0x10cd85(0x628)]();}}else this[_0x10cd85(0x853)]();}return this[_0x10cd85(0xb0f)]=-0x1,_0x1762c6[_0x10cd85(0x510)](...this[_0x10cd85(0x1d4)]()),this[_0x10cd85(0x295)](_0x1762c6);}}}}if(_0x1ab6ed[_0x10cd85(0x605)](/(\d+) RANDOM ANY/i)){let _0x1debc5=Number(RegExp['$1']);while(_0x1debc5--){const _0x33bfb6=Math['randomInt'](0x2)===0x0?this[_0x10cd85(0x404)]():this[_0x10cd85(0x6f9)]();_0x1762c6[_0x10cd85(0x510)](_0x33bfb6[_0x10cd85(0x501)]());}return this['repeatTargets'](_0x1762c6);}if(_0x1ab6ed[_0x10cd85(0x605)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x3a9ecc=Number(RegExp['$1']);while(_0x3a9ecc--){_0x1762c6[_0x10cd85(0x510)](this[_0x10cd85(0x404)]()[_0x10cd85(0x501)]());}return this[_0x10cd85(0x295)](_0x1762c6);}if(_0x1ab6ed[_0x10cd85(0x605)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x1948ef=Number(RegExp['$1']);while(_0x1948ef--){_0x1762c6['push'](this[_0x10cd85(0x6f9)]()['trueRandomTarget']());}return this[_0x10cd85(0x295)](_0x1762c6);}if(_0x1ab6ed[_0x10cd85(0x605)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x1762c6[_0x10cd85(0x510)](...this[_0x10cd85(0x6f9)]()['aliveMembers']()[_0x10cd85(0x435)](_0x159818=>_0x159818!==this[_0x10cd85(0x1e3)]())),this[_0x10cd85(0x295)](_0x1762c6);return VisuMZ[_0x10cd85(0xbe1)]['Game_Action_makeTargets'][_0x10cd85(0x432)](this);},Game_Action['prototype'][_0x4a80d9(0x278)]=function(_0x56bc09){const _0x507025=_0x4a80d9,_0x27afb4=[];for(let _0x51d27a=0x0;_0x51d27a<this[_0x507025(0x219)]();_0x51d27a++){if('ymJSD'!==_0x507025(0x97e))for(const _0x38ca75 of this[_0x507025(0x767)]()){if(_0x38ca75)_0x38ca75['processBattleCoreJS'](_0x337853);}else _0x27afb4[_0x507025(0x510)](_0x56bc09[_0x507025(0x501)]());}return _0x27afb4;},Game_Action['prototype'][_0x4a80d9(0x49b)]=function(_0x479651){const _0x40daf4=_0x4a80d9;if(!this[_0x40daf4(0x6af)]())return _0x479651;const _0x2f4806=this['item']()[_0x40daf4(0x6c8)];if(this[_0x40daf4(0xa8c)]()){if('JGxMK'!==_0x40daf4(0xc06))_0x45e16b[_0x40daf4(0x686)](),_0xa57e97[_0x40daf4(0x1ac)]()?(this[_0x40daf4(0x693)](),_0x44619d[_0x40daf4(0x3b1)]()):(_0x161a73[_0x40daf4(0x3b1)](),this[_0x40daf4(0xb7f)]());else{this[_0x40daf4(0x9d6)]()&&(_0x40daf4(0xb82)===_0x40daf4(0x4cb)?(this[_0x40daf4(0x337)]=this[_0x40daf4(0xb9c)],this[_0x40daf4(0xc0f)]=this[_0x40daf4(0x726)]):_0x479651[_0x40daf4(0x249)](this[_0x40daf4(0x1e3)]()));if(_0x479651[_0x40daf4(0xcf9)](this['subject']())){const _0x474f58=this[_0x40daf4(0x6f9)]()[_0x40daf4(0x564)]()[_0x40daf4(0x249)](this[_0x40daf4(0x1e3)]());if(_0x474f58[_0x40daf4(0x6fc)]>0x0){_0x474f58[_0x40daf4(0x915)]((_0x542289,_0x210802)=>_0x542289[_0x40daf4(0x31d)]()-_0x210802[_0x40daf4(0x31d)]());while(_0x479651[_0x40daf4(0xcf9)](this['subject']())){const _0x2dc1d6=_0x479651[_0x40daf4(0x699)](this['subject']());_0x479651[_0x2dc1d6]=_0x474f58[Math['randomInt'](_0x474f58[_0x40daf4(0x6fc)])];}}else _0x479651[_0x40daf4(0x249)](this['subject']());}}}return _0x479651;},VisuMZ['BattleCore'][_0x4a80d9(0x34f)]=Game_Action['prototype'][_0x4a80d9(0x7ef)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x7ef)]=function(_0xac3532,_0x5ec476){const _0x1fb56e=_0x4a80d9;VisuMZ[_0x1fb56e(0xbe1)][_0x1fb56e(0x34f)]['call'](this,_0xac3532,_0x5ec476);if(!_0xac3532[_0x1fb56e(0x556)]())return;for(const _0x3e445b of this[_0x1fb56e(0x1e3)]()['attackStates']()){if('zbPqr'===_0x1fb56e(0x8e9)){if(_0x3e445b===_0xac3532[_0x1fb56e(0x3c3)]()){let _0xae25b3=_0x5ec476[_0x1fb56e(0x2f9)];_0xae25b3*=_0xac3532[_0x1fb56e(0x804)](_0x3e445b),_0xae25b3*=this['subject']()[_0x1fb56e(0x390)](_0x3e445b),_0xae25b3*=this['lukEffectRate'](_0xac3532),Math[_0x1fb56e(0xa62)]()<_0xae25b3&&(_0xac3532[_0x1fb56e(0x526)]=!![],this[_0x1fb56e(0x882)](_0xac3532));}}else this[_0x1fb56e(0x245)]()?_0x51f9ec['BattleCore'][_0x1fb56e(0x4dc)][_0x1fb56e(0x432)](this):(this['_appeared']=!this[_0x1fb56e(0x808)][_0x1fb56e(0x9b1)](),!this['_appeared']&&(this[_0x1fb56e(0x2ff)]=0x0));}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x614)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xbbd)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0xbbd)]=function(_0x1133f6,_0x165281){const _0x3560f3=_0x4a80d9;VisuMZ['BattleCore'][_0x3560f3(0x614)][_0x3560f3(0x432)](this,_0x1133f6,_0x165281);if(!_0x1133f6['isImmortal']())return;if(_0x165281[_0x3560f3(0xbd7)]!==_0x1133f6[_0x3560f3(0x3c3)]())return;let _0x5f44ee=_0x165281[_0x3560f3(0x2f9)];!this['isCertainHit']()&&(_0x5f44ee*=_0x1133f6[_0x3560f3(0x804)](_0x165281[_0x3560f3(0xbd7)]),_0x5f44ee*=this[_0x3560f3(0x315)](_0x1133f6)),Math[_0x3560f3(0xa62)]()<_0x5f44ee&&(_0x1133f6[_0x3560f3(0x526)]=!![],this[_0x3560f3(0x882)](_0x1133f6));},VisuMZ['BattleCore'][_0x4a80d9(0x3df)]=Game_Action[_0x4a80d9(0xba6)]['applyGlobal'],Game_Action[_0x4a80d9(0xba6)]['applyGlobal']=function(){const _0x3322fc=_0x4a80d9;VisuMZ[_0x3322fc(0xbe1)][_0x3322fc(0x3df)][_0x3322fc(0x432)](this),this[_0x3322fc(0x6c9)](),this['resetResultSwitches']();},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x6c9)]=function(){const _0x13cf2c=_0x4a80d9;if(!SceneManager[_0x13cf2c(0x1f8)]())return;const _0xa433dd=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x361446=this[_0x13cf2c(0x6af)]()[_0x13cf2c(0x6c8)][_0x13cf2c(0x605)](_0xa433dd);if(_0x361446)for(const _0x1ae331 of _0x361446){if(!_0x1ae331)continue;_0x1ae331[_0x13cf2c(0x605)](_0xa433dd);const _0x4d2de3=String(RegExp['$1'])[_0x13cf2c(0x123)](',')[_0x13cf2c(0xc3f)](_0x12016e=>String(_0x12016e)['trim']()),_0x5e38cd=_0x4d2de3['map'](_0x57fa28=>DataManager[_0x13cf2c(0x56c)](_0x57fa28));for(const _0x1c718b of _0x5e38cd){if(_0x13cf2c(0x553)===_0x13cf2c(0x782))_0x408af1+=_0x5ea4c4;else{const _0x1d2b8b=$dataCommonEvents[_0x1c718b];_0x1d2b8b&&$gameTemp[_0x13cf2c(0x3a2)](_0x1c718b);}}}},DataManager[_0x4a80d9(0x56c)]=function(_0x3a1041){const _0x599592=_0x4a80d9;_0x3a1041=_0x3a1041[_0x599592(0x7ff)]()[_0x599592(0x893)](),this[_0x599592(0x253)]=this[_0x599592(0x253)]||{};if(this[_0x599592(0x253)][_0x3a1041])return this[_0x599592(0x253)][_0x3a1041];for(const _0x5d4787 of $dataCommonEvents){if(!_0x5d4787)continue;let _0x2bf763=_0x5d4787[_0x599592(0x380)];_0x2bf763=_0x2bf763[_0x599592(0x220)](/\x1I\[(\d+)\]/gi,''),_0x2bf763=_0x2bf763[_0x599592(0x220)](/\\I\[(\d+)\]/gi,''),this[_0x599592(0x253)][_0x2bf763[_0x599592(0x7ff)]()[_0x599592(0x893)]()]=_0x5d4787['id'];}return this[_0x599592(0x253)][_0x3a1041]||0x0;},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x9d1)]=function(){const _0x4c0475=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;const _0x10c98a=VisuMZ['BattleCore'][_0x4c0475(0x668)]['Mechanics'];if(_0x10c98a[_0x4c0475(0x67c)]){if(_0x4c0475(0xa80)==='VWozG')$gameSwitches[_0x4c0475(0x362)](_0x10c98a[_0x4c0475(0x67c)],![]);else{if(!_0x5fec29[_0x4c0475(0x6e5)]())return;const _0x4b9eec=this[_0x4c0475(0x997)]();if(!_0x4b9eec)return;if(_0x180b2d===_0x4b9eec[_0x4c0475(0x9ec)])return;let _0x4798e8=![];if(this[_0x4c0475(0x172)]()){if(_0x287dfb>_0x4b9eec['_baseX'])_0x4798e8=!![];if(_0x164d9a<_0x4b9eec[_0x4c0475(0x9ec)])_0x4798e8=![];}else{if(this[_0x4c0475(0x494)]()){if(_0x573c70>_0x4b9eec[_0x4c0475(0x9ec)])_0x4798e8=![];if(_0x220340<_0x4b9eec[_0x4c0475(0x9ec)])_0x4798e8=!![];}};this[_0x4c0475(0x3ba)](_0x3f47c2?!_0x4798e8:_0x4798e8),_0x4b9eec[_0x4c0475(0x271)]();}}_0x10c98a[_0x4c0475(0xcd1)]&&$gameSwitches[_0x4c0475(0x362)](_0x10c98a[_0x4c0475(0xcd1)],![]),_0x10c98a[_0x4c0475(0x4e3)]&&$gameVariables[_0x4c0475(0x362)](_0x10c98a[_0x4c0475(0x4e3)],0x0),_0x10c98a[_0x4c0475(0x945)]&&$gameVariables[_0x4c0475(0x362)](_0x10c98a[_0x4c0475(0x945)],0x0);},Game_Action[_0x4a80d9(0xba6)]['applyResultSwitches']=function(_0x564292){const _0x50a848=_0x4a80d9;if(!SceneManager[_0x50a848(0x1f8)]())return;if(!_0x564292)return;const _0x4a6225=_0x564292['result'](),_0x1227ed=VisuMZ[_0x50a848(0xbe1)][_0x50a848(0x668)]['Mechanics'];_0x1227ed['SwitchCritical']&&_0x4a6225['critical']&&$gameSwitches[_0x50a848(0x362)](_0x1227ed[_0x50a848(0x67c)],!![]);_0x1227ed['SwitchMissEvade']&&(_0x4a6225[_0x50a848(0x534)]||_0x4a6225[_0x50a848(0xad9)])&&(_0x50a848(0x76f)===_0x50a848(0x76f)?$gameSwitches[_0x50a848(0x362)](_0x1227ed[_0x50a848(0xcd1)],!![]):(this[_0x50a848(0x92c)]=this[_0x50a848(0x447)][_0x50a848(0x8d8)](0x0),this[_0x50a848(0xb0f)]=0x0,this[_0x50a848(0xcca)]=this[_0x50a848(0x92c)][0x0]||null,this[_0x50a848(0xfa)]=_0x50a848(0x258)));if(_0x1227ed[_0x50a848(0x4e3)]){if(_0x50a848(0x2c1)===_0x50a848(0x8c4)){if(_0x1aaaa0[_0x50a848(0x9f4)]){if(_0x2f8aed[_0x50a848(0x46e)]['version']<1.19){let _0x4e1c75='';_0x4e1c75+=_0x50a848(0x774),_0x4e1c75+=_0x50a848(0x768),_0x4e1c75+=_0x50a848(0x8bc),_0x400955(_0x4e1c75),_0x55db9d['exit']();}}return this[_0x50a848(0xb0f)]=-0x1,_0x52b0be[_0x50a848(0x510)](...this[_0x50a848(0x1d4)]()),this['repeatTargets'](_0x373200);}else{let _0x4099ae=$gameVariables[_0x50a848(0x638)](_0x1227ed['VariableDmg']);_0x4a6225[_0x50a848(0x9c0)]>0x0&&(_0x4099ae+=Math[_0x50a848(0x630)](_0x4a6225[_0x50a848(0x9c0)])),$gameVariables[_0x50a848(0x362)](_0x1227ed['VariableDmg'],_0x4099ae);}}if(_0x1227ed[_0x50a848(0x945)]){let _0x403f5f=$gameVariables[_0x50a848(0x638)](_0x1227ed[_0x50a848(0x945)]);_0x4a6225['hpDamage']<0x0&&(_0x403f5f+=Math[_0x50a848(0x630)](_0x4a6225[_0x50a848(0x9c0)])),$gameVariables[_0x50a848(0x362)](_0x1227ed[_0x50a848(0x945)],_0x403f5f);}},VisuMZ['BattleCore']['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore'][_0x4a80d9(0x6a3)]=Game_Action['prototype'][_0x4a80d9(0x470)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x470)]=function(_0x11a14c,_0xec552){const _0x5acfd7=_0x4a80d9;VisuMZ[_0x5acfd7(0xbe1)]['Game_Action_executeHpDamage'][_0x5acfd7(0x432)](this,_0x11a14c,_0xec552);!this['isDrain']()&&_0x11a14c&&_0x11a14c[_0x5acfd7(0x4ac)]()[_0x5acfd7(0x9c0)]>0x0&&this['performLifeSteal']('HP',_0x11a14c,_0x11a14c[_0x5acfd7(0x4ac)]()['hpDamage']);if(_0x11a14c){this[_0x5acfd7(0x2bb)]=this[_0x5acfd7(0x2bb)]||{};const _0x1f8169=_0x11a14c[_0x5acfd7(0x286)]();this[_0x5acfd7(0x2bb)][_0x1f8169]=_0xec552;}},Game_Action[_0x4a80d9(0xba6)]['getLastHpDamage']=function(_0x4f67e3){const _0x4dd658=_0x4a80d9;this[_0x4dd658(0x2bb)]=this[_0x4dd658(0x2bb)]||{};const _0x274f4f=_0x4f67e3[_0x4dd658(0x286)]();return this['_executeHpDamage'][_0x274f4f]||0x0;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x468)]=Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x9cc)],Game_Action[_0x4a80d9(0xba6)]['executeMpDamage']=function(_0x1c985b,_0x216e32){const _0x511f41=_0x4a80d9;VisuMZ['BattleCore'][_0x511f41(0x468)]['call'](this,_0x1c985b,_0x216e32),!this[_0x511f41(0xa63)]()&&_0x1c985b&&_0x1c985b[_0x511f41(0x4ac)]()[_0x511f41(0x4a9)]>0x0&&('JnKHG'!==_0x511f41(0xb6e)?this[_0x511f41(0x5a9)]('MP',_0x1c985b,_0x1c985b[_0x511f41(0x4ac)]()[_0x511f41(0x4a9)]):(this[_0x511f41(0xb48)]=new _0x4c7cd0(),this[_0x511f41(0x783)][_0x511f41(0xd02)](this[_0x511f41(0xb48)])));},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x5a9)]=function(_0x3a9b29,_0x23ec10,_0x26ad74){const _0x2a974b=_0x4a80d9;_0x3a9b29=_0x3a9b29[_0x2a974b(0x7ff)]()[_0x2a974b(0x893)]();const _0x16344e=this[_0x2a974b(0x599)](_0x3a9b29,_0x23ec10);if(_0x16344e<=0x0)return;const _0x3ffb19=Math[_0x2a974b(0x961)](_0x26ad74*_0x16344e);if(_0x3ffb19<=0x0)return;let _0x25fda1=this[_0x2a974b(0x1e3)]();if(this[_0x2a974b(0xaba)])_0x25fda1=this[_0x2a974b(0xaba)];const _0x58feee=_0x23ec10['isNegativeLifeSteal'](_0x3a9b29)?-0x1:0x1;if(_0x3a9b29==='HP')_0x25fda1['gainHp'](_0x58feee*_0x3ffb19);if(_0x3a9b29==='MP')_0x25fda1[_0x2a974b(0x554)](_0x58feee*_0x3ffb19);},Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x599)]=function(_0x1c6630,_0x399dab){const _0x84b77c=_0x4a80d9;if(this[_0x84b77c(0xc98)](_0x1c6630))return 0x0;if(this['subject']()[_0x84b77c(0xc18)](_0x1c6630))return 0x0;if(_0x399dab[_0x84b77c(0x36b)](_0x1c6630))return 0x0;let _0x679158=0x0;return _0x679158+=this[_0x84b77c(0xb7b)](_0x1c6630),_0x679158+=this['subject']()[_0x84b77c(0x599)](_0x1c6630,this['item']()['hitType']),_0x679158[_0x84b77c(0xb4e)](0x0,0x1);},Game_Action['prototype'][_0x4a80d9(0xc98)]=function(_0x2678cc){const _0x4faecd=_0x4a80d9;_0x2678cc=_0x2678cc['toUpperCase']()[_0x4faecd(0x893)]();const _0x599ff7=VisuMZ[_0x4faecd(0xbe1)][_0x4faecd(0x39e)],_0x375102=this[_0x4faecd(0x6af)]()[_0x4faecd(0x6c8)]||'';if(_0x375102['match'](_0x599ff7[_0x4faecd(0x3bc)])){if(_0x4faecd(0x6dc)==='MCHpG')return!![];else this[_0x4faecd(0x669)]=_0x419eed,this[_0x4faecd(0x25e)]=-0x1,this['_pattern']=0x0,this[_0x4faecd(0x9c9)](),this[_0x4faecd(0xa5f)]();}if(_0x2678cc==='HP'&&_0x375102[_0x4faecd(0x605)](_0x599ff7[_0x4faecd(0x48c)]))return!![];if(_0x2678cc==='MP'&&_0x375102['match'](_0x599ff7['cancelMpLifeSteal']))return!![];return![];},Game_Action['prototype'][_0x4a80d9(0xb7b)]=function(_0x5329da){const _0x354789=_0x4a80d9,_0x3fe43c=VisuMZ[_0x354789(0xbe1)]['LifeStealRegExp'],_0x201abf=this[_0x354789(0x6af)]()['note']||'';_0x5329da=_0x5329da[_0x354789(0x7ff)]()[_0x354789(0x893)]();const _0x3d445c=_0x201abf[_0x354789(0x605)](_0x3fe43c[_0x354789(0x3ca)]);if(_0x3d445c){if(_0x354789(0xb62)===_0x354789(0xb62))for(const _0x356eea of _0x3d445c){_0x356eea[_0x354789(0x605)](_0x3fe43c[_0x354789(0x3ca)]);const _0x4457bc=String(RegExp['$1'])['toUpperCase']()[_0x354789(0x893)](),_0x517a7e=Number(RegExp['$2'])*0.01;if(_0x4457bc!==_0x5329da)continue;return _0x517a7e;}else{return _0x502d15[_0x354789(0xba6)][_0x354789(0x23a)][_0x354789(0x432)](this);;}}return 0x0;},Game_BattlerBase['prototype'][_0x4a80d9(0x599)]=function(_0x1729b3,_0x5d49c2){const _0x5f30a0=_0x4a80d9,_0xf9ae1c=VisuMZ['BattleCore'][_0x5f30a0(0x39e)];let _0x3b7351=0x0;_0x1729b3=_0x1729b3['toUpperCase']()[_0x5f30a0(0x893)]();for(const _0x2a6102 of this[_0x5f30a0(0xc03)]()){if(!_0x2a6102)continue;const _0x22c9e6=_0x2a6102[_0x5f30a0(0x6c8)]||'',_0x1a31a5=_0x22c9e6[_0x5f30a0(0x605)](_0xf9ae1c[_0x5f30a0(0x632)]);if(_0x1a31a5)for(const _0x5c177d of _0x1a31a5){_0x5c177d[_0x5f30a0(0x605)](_0xf9ae1c[_0x5f30a0(0x632)]);const _0xd02e58=String(RegExp['$1'])['toUpperCase']()[_0x5f30a0(0x893)](),_0x360a36=String(RegExp['$2']),_0x1163c3=Number(RegExp['$3'])*0.01;if(_0xd02e58!==_0x1729b3)continue;if(_0x5d49c2===Game_Action[_0x5f30a0(0x843)]&&_0x360a36[_0x5f30a0(0x605)](/CERTAIN/i))_0x3b7351+=_0x1163c3;else{if(_0x5d49c2===Game_Action[_0x5f30a0(0xc08)]&&_0x360a36['match'](/PHYS/i))_0x3b7351+=_0x1163c3;else{if(_0x5d49c2===Game_Action[_0x5f30a0(0x532)]&&_0x360a36[_0x5f30a0(0x605)](/MAGIC/i)){if(_0x5f30a0(0x672)!==_0x5f30a0(0xd01))_0x3b7351+=_0x1163c3;else return _0x121c31[_0x5f30a0(0x404)]()[_0x5f30a0(0x564)]()[_0x5f30a0(0x435)](_0x594bb2=>_0x594bb2!==_0xfa3bae);}}}}}return _0x3b7351;},Game_BattlerBase[_0x4a80d9(0xba6)]['isDisarmLifeSteal']=function(_0x4b131a){const _0x1a5974=_0x4a80d9;_0x4b131a=_0x4b131a[_0x1a5974(0x7ff)]()[_0x1a5974(0x893)]();const _0x3a5843=VisuMZ['BattleCore'][_0x1a5974(0x39e)];for(const _0x3e8c72 of this[_0x1a5974(0xc03)]()){if('HHOfl'!==_0x1a5974(0x7e1)){if(!_0x3e8c72)continue;const _0x11c3ab=_0x3e8c72[_0x1a5974(0x6c8)]||'';if(_0x11c3ab[_0x1a5974(0x605)](_0x3a5843['disarmLifeSteal']))return!![];if(_0x4b131a==='HP'&&_0x11c3ab[_0x1a5974(0x605)](_0x3a5843[_0x1a5974(0x3aa)])){if(_0x1a5974(0x9a1)==='DNPUl')_0x5b259f[_0x1a5974(0xbe1)][_0x1a5974(0x94d)][_0x1a5974(0x432)](this),this[_0x1a5974(0x7f3)]();else return!![];}if(_0x4b131a==='MP'&&_0x11c3ab[_0x1a5974(0x605)](_0x3a5843[_0x1a5974(0xcec)])){if('bvLgk'===_0x1a5974(0x65f))return!![];else _0x3bab36[_0x1a5974(0xbe1)][_0x1a5974(0x42e)][_0x1a5974(0x432)](this),this[_0x1a5974(0x845)]();}}else _0x3a33a8[_0x1a5974(0xba6)][_0x1a5974(0x6ed)][_0x1a5974(0x432)](this);}return![];},Game_BattlerBase['prototype']['isNegativeLifeSteal']=function(_0x1317d2){const _0x41d291=_0x4a80d9;_0x1317d2=_0x1317d2[_0x41d291(0x7ff)]()[_0x41d291(0x893)]();const _0x10c25a=VisuMZ[_0x41d291(0xbe1)][_0x41d291(0x39e)];for(const _0x2c4a3c of this['traitObjects']()){if(!_0x2c4a3c)continue;const _0x4d1a50=_0x2c4a3c[_0x41d291(0x6c8)]||'';if(_0x4d1a50[_0x41d291(0x605)](_0x10c25a['negativeLifeSteal'])){if('YQOjE'===_0x41d291(0xf5))_0xf418a0[_0x41d291(0x510)](this[_0x41d291(0x6f9)]()['trueRandomTarget']());else return!![];}if(_0x1317d2==='HP'&&_0x4d1a50['match'](_0x10c25a['negativeHpLifeSteal'])){if(_0x41d291(0x78a)!==_0x41d291(0x78a))_0x11d69d[_0x41d291(0xbe1)][_0x41d291(0x5ca)]['call'](this),this[_0x41d291(0x547)]&&(this[_0x41d291(0x953)](),this[_0x41d291(0x77b)]());else return!![];}if(_0x1317d2==='MP'&&_0x4d1a50[_0x41d291(0x605)](_0x10c25a['negativeMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x4a80d9(0xba6)]['isGuardLifeSteal']=function(_0x5724b7){const _0x100441=_0x4a80d9;_0x5724b7=_0x5724b7[_0x100441(0x7ff)]()['trim']();const _0x12a379=VisuMZ['BattleCore'][_0x100441(0x39e)];for(const _0x19dada of this[_0x100441(0xc03)]()){if(_0x100441(0xb49)!=='hCEyO'){if(!_0x19dada)continue;const _0x175766=_0x19dada[_0x100441(0x6c8)]||'';if(_0x175766[_0x100441(0x605)](_0x12a379[_0x100441(0x995)])){if('aYONj'!==_0x100441(0x5db)){const _0x17df0f=_0x344308[_0x100441(0xb97)][_0x100441(0xcc2)];this[_0x100441(0x378)]()[_0x100441(0x172)]()?_0x17df0f['select'](this[_0x100441(0x378)]()['index']()):_0x17df0f[_0x100441(0x1c4)]();}else return!![];}if(_0x5724b7==='HP'&&_0x175766[_0x100441(0x605)](_0x12a379[_0x100441(0x795)]))return!![];if(_0x5724b7==='MP'&&_0x175766['match'](_0x12a379['guardMpLifeSteal'])){if(_0x100441(0xa2b)===_0x100441(0xa2b))return!![];else _0x184675+=_0x3ec5b0[_0x100441(0x172)]()?-_0x507b89:_0x42e58c,_0x4f6496+=_0x4cb05a;}}else _0x50bcf0[_0x100441(0x83d)](_0x291bd3);}return![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x8da)]=Game_BattlerBase['prototype'][_0x4a80d9(0x8f0)],Game_BattlerBase['prototype']['initMembers']=function(){const _0x5e21e3=_0x4a80d9;VisuMZ[_0x5e21e3(0xbe1)][_0x5e21e3(0x8da)][_0x5e21e3(0x432)](this),this[_0x5e21e3(0xcfc)]();},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xcfc)]=function(){const _0x190e13=_0x4a80d9;this[_0x190e13(0x22b)]=![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x4d7)]=Game_BattlerBase[_0x4a80d9(0xba6)]['refresh'],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x1d6)]=function(){const _0xc07f16=_0x4a80d9;this['_cache']={},VisuMZ[_0xc07f16(0xbe1)]['Game_BattlerBase_refresh'][_0xc07f16(0x432)](this);},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xa3e)]=function(_0x512f74){const _0x2eda0=_0x4a80d9;return this[_0x2eda0(0x9cd)]=this[_0x2eda0(0x9cd)]||{},this[_0x2eda0(0x9cd)][_0x512f74]!==undefined;},Game_BattlerBase[_0x4a80d9(0xba6)]['hardDamageCap']=function(){const _0x2cc4ca=_0x4a80d9;if(this[_0x2cc4ca(0x9cd)]['hardDamageCap']!==undefined)return this[_0x2cc4ca(0x9cd)][_0x2cc4ca(0xce6)];const _0x31562c=/<DAMAGE CAP:[ ](\d+)>/i,_0x19b5b1=this[_0x2cc4ca(0xc03)]()[_0x2cc4ca(0xc3f)](_0x120ae0=>_0x120ae0&&_0x120ae0['note'][_0x2cc4ca(0x605)](_0x31562c)?Number(RegExp['$1']):0x0);let _0x1c1eb9=_0x19b5b1[_0x2cc4ca(0x6fc)]>0x0?Math[_0x2cc4ca(0x78c)](..._0x19b5b1):0x0;if(_0x1c1eb9<=0x0)_0x1c1eb9=VisuMZ[_0x2cc4ca(0xbe1)]['Settings'][_0x2cc4ca(0x6ea)][_0x2cc4ca(0xbc8)];return this[_0x2cc4ca(0x9cd)][_0x2cc4ca(0xce6)]=_0x1c1eb9,this[_0x2cc4ca(0x9cd)][_0x2cc4ca(0xce6)];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x14f)]=function(){const _0x1f652a=_0x4a80d9;if(this['_cache'][_0x1f652a(0x5fb)]!==undefined)return this[_0x1f652a(0x9cd)][_0x1f652a(0x5fb)];let _0x267c01=VisuMZ[_0x1f652a(0xbe1)]['Settings'][_0x1f652a(0x6ea)][_0x1f652a(0xc55)];const _0x21c096=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x413281=this[_0x1f652a(0xc03)]()[_0x1f652a(0xc3f)](_0x35cefe=>_0x35cefe&&_0x35cefe[_0x1f652a(0x6c8)][_0x1f652a(0x605)](_0x21c096)?Number(RegExp['$1'])/0x64:0x0);return _0x267c01=_0x413281[_0x1f652a(0xca6)]((_0x156515,_0x6b6415)=>_0x156515+_0x6b6415,_0x267c01),this[_0x1f652a(0x9cd)][_0x1f652a(0x5fb)]=_0x267c01,this['_cache'][_0x1f652a(0x5fb)][_0x1f652a(0xb4e)](0.01,0x1);},VisuMZ[_0x4a80d9(0xbe1)]['Game_BattlerBase_die']=Game_BattlerBase['prototype']['die'],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xce5)]=function(){const _0x44d833=_0x4a80d9;VisuMZ[_0x44d833(0xbe1)][_0x44d833(0xceb)][_0x44d833(0x432)](this),SceneManager[_0x44d833(0x1f8)]()&&this[_0x44d833(0x1f3)](_0x44d833(0xc84));},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x997)]=function(){const _0x49ff6d=_0x4a80d9;if(!SceneManager[_0x49ff6d(0x1f8)]())return null;if(!SceneManager[_0x49ff6d(0xb97)][_0x49ff6d(0x967)])return null;return SceneManager[_0x49ff6d(0xb97)][_0x49ff6d(0x967)][_0x49ff6d(0x679)](this);},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x9d9)]=function(){const _0x1189d4=_0x4a80d9;return VisuMZ[_0x1189d4(0xbe1)]['Settings']['Actor'][_0x1189d4(0x6ae)];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x396)]=function(){const _0x529715=_0x4a80d9;return VisuMZ[_0x529715(0xbe1)]['Settings']['Actor'][_0x529715(0x3e1)];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x76a)]=function(){const _0x480675=_0x4a80d9;return this[_0x480675(0x172)]&&this[_0x480675(0x172)]()?VisuMZ[_0x480675(0xbe1)][_0x480675(0x668)][_0x480675(0x490)][_0x480675(0x7d4)]:VisuMZ['BattleCore'][_0x480675(0x668)][_0x480675(0x916)][_0x480675(0x7d4)];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x647)]=function(){return!![];},Game_BattlerBase[_0x4a80d9(0xba6)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xb18)]=function(){return 0x0;},Game_BattlerBase[_0x4a80d9(0xba6)]['createBattleUIOffsetX']=function(_0x13b4f5){const _0x3ca273=_0x4a80d9;if(!_0x13b4f5)return 0x0;let _0x20287f=0x0;const _0x1d3e4b=_0x13b4f5[_0x3ca273(0x6c8)];_0x1d3e4b[_0x3ca273(0x605)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&('VwzMm'===_0x3ca273(0x8a9)?(_0x56be8f=_0x374409[_0x3ca273(0x506)](_0x3331a6[_0x3ca273(0xa62)]()*(_0x179044+0x1)),_0x506925=_0x40243c[_0x4e5f87],_0x485812[_0x26ab64]=_0x4c465e[_0x3e5201],_0x167e57[_0x3e22de]=_0x1ddebb):_0x20287f+=Number(RegExp['$1']));if(_0x1d3e4b['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3ca273(0x606)!==_0x3ca273(0x1d1))_0x20287f+=Number(RegExp['$1']);else{const _0x50def1=this[_0x3ca273(0xcf8)](_0x3ab539),_0x51cb7a=this[_0x3ca273(0x641)](_0x2fb9cc),_0x145ac3=this[_0x3ca273(0x475)](_0x51cb7a)[_0x3ca273(0x2ce)];this[_0x3ca273(0x15a)](this['isCommandEnabled'](_0x2b0443));const _0x1a52e2=this[_0x3ca273(0xa7d)]();if(_0x1a52e2===_0x3ca273(0x413))this[_0x3ca273(0x1cf)](_0x51cb7a,_0x50def1['x']+_0x50def1['width']-_0x145ac3,_0x50def1['y'],_0x145ac3);else{if(_0x1a52e2==='center'){const _0x29043c=_0x50def1['x']+_0xd50895['floor']((_0x50def1[_0x3ca273(0x2ce)]-_0x145ac3)/0x2);this[_0x3ca273(0x1cf)](_0x51cb7a,_0x29043c,_0x50def1['y'],_0x145ac3);}else this[_0x3ca273(0x1cf)](_0x51cb7a,_0x50def1['x'],_0x50def1['y'],_0x145ac3);}}}return _0x20287f;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0x4f2ac7){const _0x3cf404=_0x4a80d9;if(!_0x4f2ac7)return 0x0;let _0x1c262b=0x0;const _0x379888=_0x4f2ac7['note'];if(_0x379888[_0x3cf404(0x605)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x3cf404(0x2cc)!==_0x3cf404(0x4ae))_0x1c262b+=Number(RegExp['$1']);else return this[_0x3cf404(0x5a3)]>0x0;}return _0x379888['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1c262b+=Number(RegExp['$2'])),_0x1c262b;},VisuMZ['BattleCore'][_0x4a80d9(0x9d0)]=Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x230)],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x230)]=function(_0x2fab0e){const _0x10ad4a=_0x4a80d9;if(_0x2fab0e===this[_0x10ad4a(0x3c3)]()&&this[_0x10ad4a(0x556)]())return!![];return VisuMZ[_0x10ad4a(0xbe1)][_0x10ad4a(0x9d0)][_0x10ad4a(0x432)](this,_0x2fab0e);},Game_BattlerBase['prototype'][_0x4a80d9(0x556)]=function(){return this['_immortal'];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x349)]=function(_0x393852){const _0x12d891=_0x4a80d9;_0x393852?this[_0x12d891(0x304)]():this[_0x12d891(0x445)]();},Game_BattlerBase[_0x4a80d9(0xba6)]['addImmortal']=function(){const _0x4e9b89=_0x4a80d9;if(this['isDead']())return;this['_immortal']=!![],this[_0x4e9b89(0x526)]=![];},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x445)]=function(){const _0x3fe67d=_0x4a80d9,_0x55e04d=this[_0x3fe67d(0x431)]();this[_0x3fe67d(0x22b)]=![],_0x55e04d&&this['_deathStateApplied']&&(_0x3fe67d(0x4c6)==='fHXpJ'?(_0x322ac6[_0x3fe67d(0xba6)][_0x3fe67d(0x8f0)][_0x3fe67d(0x432)](this),this[_0x3fe67d(0x2ff)]=0x0,this[_0x3fe67d(0x26b)]=null,this[_0x3fe67d(0x2dd)]['x']=0.5,this[_0x3fe67d(0x2dd)]['y']=0x0):this[_0x3fe67d(0xce5)]()),this[_0x3fe67d(0x526)]=![],this[_0x3fe67d(0x1d6)](),this['isDead']()&&_0x55e04d&&(this[_0x3fe67d(0x748)](),this[_0x3fe67d(0x1e1)]());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x823)]=Game_Action['prototype'][_0x4a80d9(0x10a)],Game_Action[_0x4a80d9(0xba6)]['numRepeats']=function(){const _0x9cbdff=_0x4a80d9;return this['item']()?VisuMZ[_0x9cbdff(0xbe1)][_0x9cbdff(0x823)][_0x9cbdff(0x432)](this):0x0;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x38f)]=Game_Action['prototype'][_0x4a80d9(0x159)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x159)]=function(){const _0x4e7607=_0x4a80d9;this[_0x4e7607(0x1e3)]()&&this[_0x4e7607(0x1e3)]()[_0x4e7607(0xb2b)]()?_0x4e7607(0x9f2)===_0x4e7607(0x306)?(_0x29d941+=_0x35c2d9[_0x4e7607(0x916)]['OffsetX']||0x0,_0x36dfe3+=_0x2f99eb[_0x4e7607(0x916)][_0x4e7607(0x21f)]||0x0):VisuMZ['BattleCore'][_0x4e7607(0x38f)][_0x4e7607(0x432)](this):this[_0x4e7607(0x2b9)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x1a2)]=Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xb2b)],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xb2b)]=function(){const _0x277aed=_0x4a80d9;if(!this['canAttackBattleCore']())return![];return VisuMZ['BattleCore'][_0x277aed(0x1a2)]['call'](this);},Game_BattlerBase['prototype'][_0x4a80d9(0xa00)]=function(){const _0x214a1d=_0x4a80d9;for(const _0x1d4b2c of this[_0x214a1d(0xc03)]()){if(_0x214a1d(0x395)===_0x214a1d(0x395)){if(!_0x1d4b2c)continue;if(_0x1d4b2c['note'][_0x214a1d(0x605)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else this['_branch'][this[_0x214a1d(0x2ee)]]=_0xa8d00c;}return!![];},VisuMZ[_0x4a80d9(0xbe1)]['Game_Action_setGuard']=Game_Action['prototype'][_0x4a80d9(0x1f7)],Game_Action[_0x4a80d9(0xba6)][_0x4a80d9(0x1f7)]=function(){const _0x5b322f=_0x4a80d9;if(this[_0x5b322f(0x1e3)]()[_0x5b322f(0xa57)]()){if('RWioN'!==_0x5b322f(0xab6))VisuMZ[_0x5b322f(0xbe1)][_0x5b322f(0x1ef)][_0x5b322f(0x432)](this);else{if(this[_0x5b322f(0x5eb)]===_0x5b322f(0xa98))return![];if(this['_targetBattlerKey']===_0x5b322f(0xbf0))return![];return this[_0x5b322f(0x137)]()&&!this[_0x5b322f(0x3ae)]()?this[_0x5b322f(0xad3)]():_0x1bf0b3['BattleCore'][_0x5b322f(0xa6e)]['call'](this);}}},VisuMZ[_0x4a80d9(0xbe1)]['Game_BattlerBase_canGuard']=Game_BattlerBase['prototype']['canGuard'],Game_BattlerBase['prototype']['canGuard']=function(){const _0x52cab6=_0x4a80d9;if(!this[_0x52cab6(0x588)]())return![];return VisuMZ['BattleCore'][_0x52cab6(0x965)][_0x52cab6(0x432)](this);},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x588)]=function(){const _0x19c00c=_0x4a80d9;for(const _0x332f90 of this[_0x19c00c(0xc03)]()){if(_0x19c00c(0x90a)===_0x19c00c(0x90a)){if(!_0x332f90)continue;if(_0x332f90[_0x19c00c(0x6c8)][_0x19c00c(0x605)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else{if(this[_0x19c00c(0x1d2)]())return _0x2edfa7;const _0x304c10=this['subject'](),_0x169d16=_0x3928ac;let _0xa0fce5=[],_0x7554a4=[];_0xa0fce5[_0x19c00c(0x510)](this['_armorPenetration']['arPenFlat'],this[_0x19c00c(0x440)][_0x19c00c(0x3b7)]),_0x7554a4[_0x19c00c(0x510)](this[_0x19c00c(0x440)][_0x19c00c(0x9a6)],this[_0x19c00c(0x440)][_0x19c00c(0x701)]);const _0x492f80=this[_0x19c00c(0x673)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x209a72=this[_0x19c00c(0x673)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x85cbbd=this[_0x19c00c(0x673)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x29e2ab=this[_0x19c00c(0x673)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xa0fce5=_0xa0fce5[_0x19c00c(0x179)](_0x169d16[_0x19c00c(0xc03)]()[_0x19c00c(0xc3f)](_0x4fc186=>_0x4fc186&&_0x4fc186[_0x19c00c(0x6c8)][_0x19c00c(0x605)](_0x492f80)?_0x421ae2(_0x480fb0['$1']):0x0)),_0x7554a4=_0x7554a4[_0x19c00c(0x179)](_0x169d16['traitObjects']()[_0x19c00c(0xc3f)](_0x499df7=>_0x499df7&&_0x499df7['note'][_0x19c00c(0x605)](_0x209a72)?_0x10b616(_0x8ce54['$1'])/0x64:0x0)),_0xa0fce5=_0xa0fce5[_0x19c00c(0x179)](_0x304c10['traitObjects']()['map'](_0x418821=>_0x418821&&_0x418821[_0x19c00c(0x6c8)][_0x19c00c(0x605)](_0x85cbbd)?_0x31477c(_0xb764ee['$1']):0x0)),_0x7554a4=_0x7554a4[_0x19c00c(0x179)](_0x304c10[_0x19c00c(0xc03)]()[_0x19c00c(0xc3f)](_0x5aee98=>_0x5aee98&&_0x5aee98[_0x19c00c(0x6c8)]['match'](_0x29e2ab)?_0x5f2991(_0x55a195['$1'])/0x64:0x0)),this[_0x19c00c(0x6af)]()[_0x19c00c(0x6c8)]['match'](_0x85cbbd)&&_0xa0fce5[_0x19c00c(0x510)](_0x4e41ee(_0x54c114['$1'])),this[_0x19c00c(0x6af)]()[_0x19c00c(0x6c8)][_0x19c00c(0x605)](_0x29e2ab)&&_0x7554a4[_0x19c00c(0x510)](_0x3d2369(_0x3a690c['$1'])),_0x25751a=_0xa0fce5['reduce']((_0x307fc2,_0x4dafc6)=>_0x307fc2-_0x4dafc6,_0x1aa608),_0x3454ca>0x0&&(_0x1eb2f6=_0x7554a4[_0x19c00c(0xca6)]((_0x55fd1c,_0x49e4ed)=>_0x55fd1c*(0x1-_0x49e4ed),_0x4dba0e)),_0x1dd200;}}return!![];},Game_BattlerBase[_0x4a80d9(0xba6)]['canUseItemCommand']=function(){const _0x57f73f=_0x4a80d9;for(const _0x19b0a0 of this['traitObjects']()){if(!_0x19b0a0)continue;if(_0x19b0a0[_0x57f73f(0x6c8)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbd2)]=Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xc56)],Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xc56)]=function(_0x4b9420){const _0x1695d2=_0x4a80d9;if(_0x4b9420&&_0x4b9420['note']['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1695d2(0x89b)!==_0x1695d2(0x89b))_0x29396c+=_0x1863ca[_0x1695d2(0x172)]()?-_0x2b67f3:_0x25614b,_0x3258f5+=_0x104aec['isActor']()?-_0x2c5635:_0x3c8841;else{const _0x57c6bc=this['friendsUnit']()[_0x1695d2(0x564)]();if(_0x57c6bc[_0x1695d2(0x6fc)]===0x1&&_0x57c6bc[0x0]===this)return![];}}return VisuMZ['BattleCore'][_0x1695d2(0xbd2)][_0x1695d2(0x432)](this,_0x4b9420);},Game_Battler[_0x4a80d9(0xba6)]['allowRandomSpeed']=function(){const _0x4a5348=_0x4a80d9;return VisuMZ[_0x4a5348(0xbe1)]['Settings']['Mechanics'][_0x4a5348(0x20b)];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x42f)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x324)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x324)]=function(){const _0x5c6f8c=_0x4a80d9;if(SceneManager[_0x5c6f8c(0x1f8)]()){if(BattleManager[_0x5c6f8c(0x800)]()){if(this[_0x5c6f8c(0x7ac)]()<=0x0)return;}else{if($gameTroop[_0x5c6f8c(0x7ac)]()<=0x0)return;}}if(SceneManager[_0x5c6f8c(0x1f8)]()&&BattleManager[_0x5c6f8c(0x800)]()&&this['_lastRegenFrameCount']===Graphics[_0x5c6f8c(0x2ba)])return;this[_0x5c6f8c(0xb72)]=Graphics['frameCount'],SceneManager['isSceneBattle']()&&this[_0x5c6f8c(0x63c)](_0x5c6f8c(0x132)),VisuMZ['BattleCore'][_0x5c6f8c(0x42f)][_0x5c6f8c(0x432)](this),SceneManager['isSceneBattle']()&&(this['regenerateAllBattleCore'](),this[_0x5c6f8c(0x63c)](_0x5c6f8c(0x869)));},Game_Battler['prototype'][_0x4a80d9(0xb42)]=function(){const _0x518bc3=_0x4a80d9;if(SceneManager[_0x518bc3(0x1f8)]())for(const _0x3347be of this[_0x518bc3(0xc03)]()){if(_0x518bc3(0x95a)!==_0x518bc3(0x6b6)){if(!_0x3347be)continue;this[_0x518bc3(0x13d)](_0x3347be);}else this[_0x518bc3(0xb85)]=this[_0x518bc3(0x8ba)],this[_0x518bc3(0x8b0)]&&(this[_0x518bc3(0x8ba)]=0x0,this[_0x518bc3(0xb85)]=0x0);}},Game_Battler[_0x4a80d9(0xba6)]['onRegeneratePlayStateAnimation']=function(_0x44a170){const _0x32a4e5=_0x4a80d9;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x32a4e5(0x50b)]())return;if(this[_0x32a4e5(0x9b1)]())return;if(_0x44a170[_0x32a4e5(0x6c8)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x320958=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x320958,![],![]);}},VisuMZ['BattleCore'][_0x4a80d9(0x8e4)]=Game_Battler[_0x4a80d9(0xba6)]['startTpbTurn'],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x698)]=function(){const _0x35fdab=_0x4a80d9;this[_0x35fdab(0x63c)](_0x35fdab(0x6f4)),VisuMZ[_0x35fdab(0xbe1)][_0x35fdab(0x8e4)]['call'](this),this[_0x35fdab(0x63c)](_0x35fdab(0x710));},VisuMZ[_0x4a80d9(0xbe1)]['Game_Battler_onTurnEnd']=Game_Battler['prototype'][_0x4a80d9(0x71d)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x71d)]=function(){const _0x17ec36=_0x4a80d9;this[_0x17ec36(0x63c)](_0x17ec36(0x2fb)),VisuMZ['BattleCore'][_0x17ec36(0x255)][_0x17ec36(0x432)](this);if(VisuMZ[_0x17ec36(0xbe1)][_0x17ec36(0x668)][_0x17ec36(0x1c6)][_0x17ec36(0xacf)]){if('vBrnB'!=='WWvhD')this[_0x17ec36(0x999)]();else{const _0x154517=this[_0x17ec36(0x4bb)]();(_0x154517==='border'||this[_0x17ec36(0xb78)]())&&(this[_0x17ec36(0xbf9)][_0x17ec36(0x9ce)](),this['_skillWindow'][_0x17ec36(0x7c0)]&&this['_skillWindow'][_0x17ec36(0x3a5)](),this[_0x17ec36(0x542)][_0x17ec36(0x9ce)](),this[_0x17ec36(0x542)][_0x17ec36(0x7c0)]&&this[_0x17ec36(0x542)][_0x17ec36(0x3a5)]());}}this['processBattleCoreJS'](_0x17ec36(0xc60));},Game_Battler[_0x4a80d9(0xba6)]['processBattleCoreJS']=function(_0x2e4f95){const _0x11bbd=_0x4a80d9;if(this[_0x11bbd(0x99e)]||this[_0x11bbd(0x85d)])return;const _0x5bbeab=VisuMZ[_0x11bbd(0xbe1)][_0x11bbd(0x668)][_0x11bbd(0x1c6)];if(_0x5bbeab[_0x2e4f95])_0x5bbeab[_0x2e4f95][_0x11bbd(0x432)](this);for(const _0x196266 of this[_0x11bbd(0xc03)]()){if('iGZkS'!=='iGZkS'){this[_0x11bbd(0xa75)](),this[_0x11bbd(0x47e)](),this['updateSpin'](),this['updateFlip'](),_0x32bd3a['BattleCore'][_0x11bbd(0x935)][_0x11bbd(0x432)](this),this[_0x11bbd(0x6c6)](),this[_0x11bbd(0x6ca)]();if(this['constructor']===_0x4d8939)this[_0x11bbd(0x604)]();}else{if(!_0x196266)continue;key=VisuMZ[_0x11bbd(0xbe1)][_0x11bbd(0x24f)](_0x196266,_0x2e4f95),VisuMZ[_0x11bbd(0xbe1)]['JS'][key]&&VisuMZ[_0x11bbd(0xbe1)]['JS'][key][_0x11bbd(0x432)](this,this,this,_0x196266,0x0);}}},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x2d2)]=function(){const _0xb53aaa=_0x4a80d9;return VisuMZ[_0xb53aaa(0xbe1)][_0xb53aaa(0x668)][_0xb53aaa(0x490)]['ChantStyle']||![];},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x280)]=function(){const _0xd79565=_0x4a80d9;if(this['isWaiting']()){if(this['chantStyle']()){if(this[_0xd79565(0x77d)]['some'](_0x2525b2=>_0x2525b2[_0xd79565(0x6af)]()&&_0x2525b2['isMagical']()))return!![];}else{if(this[_0xd79565(0x77d)][_0xd79565(0x458)](_0x238ec1=>_0x238ec1[_0xd79565(0x6af)]()&&_0x238ec1[_0xd79565(0x2c0)]())){if(_0xd79565(0xc78)!==_0xd79565(0xc78))this[_0xd79565(0x953)](),this[_0xd79565(0x77b)]();else return!![];}}}if(BattleManager[_0xd79565(0x800)]()&&this[_0xd79565(0x6ac)]==='casting'){if(this['chantStyle']())return _0xd79565(0x8ae)!==_0xd79565(0x8ae)?_0x50aad6['BattleCore']['Settings']['AutoBattle'][_0xd79565(0x15d)]:this['currentAction']()&&this['currentAction']()[_0xd79565(0x6af)]()&&this[_0xd79565(0x51c)]()[_0xd79565(0x61f)]();else{if(_0xd79565(0x18b)===_0xd79565(0x18b))return this[_0xd79565(0x51c)]()&&this[_0xd79565(0x51c)]()[_0xd79565(0x6af)]()&&this[_0xd79565(0x51c)]()[_0xd79565(0x2c0)]();else{const _0x226acf=this['item']()[_0xd79565(0x37f)];return _0x226acf['match'](/(?:RAND|RANDOM)/i);}}}return![];},Game_Battler['prototype'][_0x4a80d9(0x5c0)]=function(){const _0x5b7af9=_0x4a80d9;if(BattleManager[_0x5b7af9(0x800)]()&&this[_0x5b7af9(0x6ac)]===_0x5b7af9(0x53c)){if(this['chantStyle']()){if(_0x5b7af9(0xa92)!==_0x5b7af9(0x89e))return this[_0x5b7af9(0x51c)]()&&this[_0x5b7af9(0x51c)]()['item']()&&!this['currentAction']()[_0x5b7af9(0x61f)]();else _0x24489[_0x5b7af9(0xb3d)]=![];}else return this[_0x5b7af9(0x51c)]()&&this[_0x5b7af9(0x51c)]()['item']()&&!this[_0x5b7af9(0x51c)]()[_0x5b7af9(0x2c0)]();}return![];},VisuMZ['BattleCore'][_0x4a80d9(0xaea)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x3bd)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x3bd)]=function(){const _0x33477a=_0x4a80d9;VisuMZ['BattleCore'][_0x33477a(0xaea)][_0x33477a(0x432)](this),this[_0x33477a(0x45a)]=[];},Game_Battler[_0x4a80d9(0xba6)]['isDamagePopupRequested']=function(){const _0x28c764=_0x4a80d9;if(!this[_0x28c764(0x45a)])this['clearDamagePopup']();return this[_0x28c764(0x45a)][_0x28c764(0x6fc)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x32731a=_0x4a80d9;if(!SceneManager[_0x32731a(0x1f8)]())return;if(BattleManager[_0x32731a(0x288)]())return;if(!this[_0x32731a(0x45a)])this[_0x32731a(0x3bd)]();this[_0x32731a(0x28a)]();const _0x1a5052=this[_0x32731a(0x997)]();if(_0x1a5052)_0x1a5052[_0x32731a(0x6f6)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x28a)]=function(){const _0x3bfdf1=_0x4a80d9,_0x57fc74=this[_0x3bfdf1(0x4ac)]();if(_0x57fc74[_0x3bfdf1(0x534)]||_0x57fc74[_0x3bfdf1(0xad9)]){const _0x4c7f5b=JsonEx[_0x3bfdf1(0xa9b)](_0x57fc74);_0x4c7f5b[_0x3bfdf1(0x6bb)]=![],_0x4c7f5b[_0x3bfdf1(0x4a9)]=0x0,this[_0x3bfdf1(0x45a)][_0x3bfdf1(0x510)](_0x4c7f5b);}if(_0x57fc74[_0x3bfdf1(0x6bb)]){const _0x4e8a30=JsonEx[_0x3bfdf1(0xa9b)](_0x57fc74);_0x4e8a30[_0x3bfdf1(0x534)]=![],_0x4e8a30['evaded']=![],_0x4e8a30[_0x3bfdf1(0x4a9)]=0x0,this[_0x3bfdf1(0x45a)][_0x3bfdf1(0x510)](_0x4e8a30);}if(_0x57fc74[_0x3bfdf1(0x4a9)]!==0x0){if('gUsIE'===_0x3bfdf1(0x9ab)){const _0x490dd2=JsonEx[_0x3bfdf1(0xa9b)](_0x57fc74);_0x490dd2[_0x3bfdf1(0x534)]=![],_0x490dd2[_0x3bfdf1(0xad9)]=![],_0x490dd2[_0x3bfdf1(0x6bb)]=![],this['_damagePopupArray'][_0x3bfdf1(0x510)](_0x490dd2);}else this['addAutoBattleCommand']();}},Game_Battler['prototype']['getNextDamagePopup']=function(){const _0x376169=_0x4a80d9;if(!this['_damagePopupArray'])this[_0x376169(0x3bd)]();return VisuMZ['BattleCore'][_0x376169(0x668)][_0x376169(0x6ea)][_0x376169(0xcb7)]?this['_damagePopupArray'][_0x376169(0xae3)]():this[_0x376169(0x45a)][_0x376169(0xa06)]();},Game_Battler[_0x4a80d9(0xba6)]['setupTextPopup']=function(_0x330d09,_0x4227c2){const _0x586c92=_0x4a80d9;if(!SceneManager[_0x586c92(0x1f8)]())return;if(BattleManager[_0x586c92(0x288)]())return;if(!this[_0x586c92(0x997)]())return;if(_0x330d09[_0x586c92(0x6fc)]<=0x0)return;_0x4227c2=_0x4227c2||{},_0x4227c2[_0x586c92(0xbb3)]=_0x4227c2[_0x586c92(0xbb3)]||_0x586c92(0x9e5),_0x4227c2[_0x586c92(0x82c)]=_0x4227c2[_0x586c92(0x82c)]||[0x0,0x0,0x0,0x0],_0x4227c2[_0x586c92(0xb83)]=_0x4227c2['flashDuration']||0x0,this[_0x586c92(0x997)]()['setupTextPopup'](_0x330d09,_0x4227c2);},Game_Battler['prototype'][_0x4a80d9(0xb4a)]=function(_0x152157,_0x18ecb2,_0x5d9872){const _0x27d7c7=_0x4a80d9;if(!SceneManager[_0x27d7c7(0x1f8)]())return;if(BattleManager[_0x27d7c7(0x288)]())return;if(!this[_0x27d7c7(0x997)]())return;if(_0x18ecb2[_0x27d7c7(0x6fc)]<=0x0)return;_0x5d9872=_0x5d9872||{},_0x5d9872[_0x27d7c7(0xbb3)]=_0x5d9872[_0x27d7c7(0xbb3)]||_0x27d7c7(0x9e5),_0x5d9872[_0x27d7c7(0x82c)]=_0x5d9872[_0x27d7c7(0x82c)]||[0x0,0x0,0x0,0x0],_0x5d9872['flashDuration']=_0x5d9872['flashDuration']||0x0,this[_0x27d7c7(0x997)]()[_0x27d7c7(0xb4a)](_0x152157,_0x18ecb2,_0x5d9872);},Game_Battler['prototype'][_0x4a80d9(0x5e2)]=function(){const _0x20666e=_0x4a80d9;if(this[_0x20666e(0x9b1)]())return![];if(this[_0x20666e(0x431)]()&&this[_0x20666e(0x662)]())return!![];if(this[_0x20666e(0x494)]()&&this[_0x20666e(0x681)]()){if(_0x20666e(0x4a0)!==_0x20666e(0x3a0)){if(this[_0x20666e(0x50b)]()&&this[_0x20666e(0x245)]())return![];}else{if(this['_frame'])_0x88947e=_0x39005e[_0x20666e(0x78c)](0x0,this[_0x20666e(0x5fa)][_0x20666e(0x8dc)]-0x4);}}else{if(this[_0x20666e(0x50b)]())return![];}return!![];},VisuMZ['BattleCore'][_0x4a80d9(0x516)]=Game_Battler[_0x4a80d9(0xba6)]['clearMotion'],Game_Battler['prototype'][_0x4a80d9(0xb13)]=function(){const _0x239ee3=_0x4a80d9;VisuMZ[_0x239ee3(0xbe1)][_0x239ee3(0x516)][_0x239ee3(0x432)](this),this[_0x239ee3(0xa8a)]();},Game_Battler[_0x4a80d9(0xba6)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xb9f)]=function(){return![];},VisuMZ[_0x4a80d9(0xbe1)]['Game_Battler_onBattleStart']=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x34d)],Game_Battler['prototype'][_0x4a80d9(0x34d)]=function(_0x5f0985){const _0x37d09e=_0x4a80d9;VisuMZ[_0x37d09e(0xbe1)]['Game_Battler_onBattleStart'][_0x37d09e(0x432)](this,_0x5f0985),this[_0x37d09e(0xca4)](_0x5f0985),this[_0x37d09e(0x3bd)]();},Game_Battler[_0x4a80d9(0xba6)]['onBattleStartBattleCore']=function(_0x62e948){const _0xb103b=_0x4a80d9;this[_0xb103b(0x3ba)](![]),this[_0xb103b(0x719)]=undefined,this[_0xb103b(0x2d9)]=undefined;},VisuMZ[_0x4a80d9(0xbe1)]['Game_Battler_onBattleEnd']=Game_Battler['prototype']['onBattleEnd'],Game_Battler['prototype'][_0x4a80d9(0x54c)]=function(){const _0x10a198=_0x4a80d9;VisuMZ[_0x10a198(0xbe1)][_0x10a198(0x94d)][_0x10a198(0x432)](this),this[_0x10a198(0x7f3)]();},Game_Battler[_0x4a80d9(0xba6)]['onBattleEndBattleCore']=function(){const _0x2856cf=_0x4a80d9;this['_forcedHomeX']=undefined,this[_0x2856cf(0x2d9)]=undefined;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x597)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x5ad)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x5ad)]=function(_0x364445){const _0x2de8c2=_0x4a80d9;VisuMZ['BattleCore'][_0x2de8c2(0x597)][_0x2de8c2(0x432)](this,_0x364445);if(!_0x364445[_0x2de8c2(0xc2b)]()){if(_0x2de8c2(0x5cd)!==_0x2de8c2(0x241)){const _0x25e18a=this[_0x2de8c2(0x997)]();_0x25e18a&&_0x25e18a[_0x2de8c2(0xa6b)]();}else{this[_0x2de8c2(0x2bb)]=this[_0x2de8c2(0x2bb)]||{};const _0x4da657=_0x267ff4['battlerKey']();this[_0x2de8c2(0x2bb)][_0x4da657]=_0x4ce9b0;}}this[_0x2de8c2(0x3ba)](![]);},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x7f0)]=function(){const _0x4bd087=_0x4a80d9,_0x5b8283=this[_0x4bd087(0x514)];this[_0x4bd087(0x514)]=![];if(BattleManager[_0x4bd087(0x58e)]()&&this['isInputting']()){const _0x4010af=this[_0x4bd087(0x997)]();if(_0x4010af&&_0x5b8283)_0x4010af[_0x4bd087(0xa6b)]();return;}const _0x14c671=this[_0x4bd087(0x997)]();if(_0x14c671)_0x14c671['stepBack']();this['setBattlerFlip'](![]),this[_0x4bd087(0x1e1)]();},Game_Battler[_0x4a80d9(0xba6)]['performActionMotions']=function(_0x7b0569){const _0x7c5dc4=_0x4a80d9;if(_0x7b0569[_0x7c5dc4(0x720)]())this['performAttack']();else{if(_0x7b0569['isGuard']())'aSeIk'==='aSeIk'?this[_0x7c5dc4(0x1f3)]('guard'):_0x1dbdab[_0x7c5dc4(0xbfd)](0x0);else{if(_0x7b0569[_0x7c5dc4(0x61f)]())this[_0x7c5dc4(0x1f3)](_0x7c5dc4(0xa83));else{if(_0x7b0569['isSkill']()){if(_0x7c5dc4(0x6a1)!==_0x7c5dc4(0x14d))[0x1,0x2,0x5,0x6][_0x7c5dc4(0xcf9)](_0x7b0569['item']()[_0x7c5dc4(0x83e)][_0x7c5dc4(0xce4)])?this[_0x7c5dc4(0xae6)]():_0x7c5dc4(0xc27)==='EfZRH'?(this[_0x7c5dc4(0x2ae)]=new _0x50d146(_0x5c72fe),this['attachSpritesToDistortionSprite']()):this[_0x7c5dc4(0x1f3)](_0x7c5dc4(0x7b6));else{const _0x2c8418=_0x42e36c[_0x7c5dc4(0x442)](),_0x33c211=_0x2c8418['battler']();if(_0x33c211)_0x33c211[_0x7c5dc4(0x467)]();const _0x3a9fc1=_0x441d77[_0x7c5dc4(0x564)]()[_0x7c5dc4(0x435)](_0x14bb21=>_0x14bb21[_0x7c5dc4(0x972)]()&&_0x14bb21[_0x7c5dc4(0xb3c)]()),_0x32d29e=_0x3a9fc1[_0x7c5dc4(0x699)](_0x2c8418),_0x1cf387=_0x3a9fc1[_0x32d29e+0x1];_0x42ac4d[_0x7c5dc4(0x9e0)]=_0x1cf387||null;if(_0x1cf387)_0x1cf387[_0x7c5dc4(0x308)](_0x7c5dc4(0xc0c));_0x2c8418[_0x7c5dc4(0x308)]('undecided'),this[_0x7c5dc4(0x806)]();}}else _0x7b0569[_0x7c5dc4(0x119)]()&&this[_0x7c5dc4(0x1f3)](_0x7c5dc4(0x6af));}}}},Game_Battler['prototype'][_0x4a80d9(0xcb1)]=function(){const _0x466380=_0x4a80d9;return $dataSystem[_0x466380(0x562)][0x0];},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x691)]=function(){const _0x50820b=_0x4a80d9,_0x47e589=this[_0x50820b(0xcb1)]();return _0x47e589?_0x47e589[_0x50820b(0x3ac)]:0x0;},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x18a)]=function(_0x5395dc){const _0x3e9133=_0x4a80d9;if(!$gameSystem[_0x3e9133(0x6e5)]())return;const _0xed8de2=this[_0x3e9133(0x997)](),_0x7b606a=_0x5395dc[_0x3e9133(0x997)]();if(!_0xed8de2||!_0x7b606a)return;const _0x2feb5f=_0x7b606a[_0x3e9133(0x9ec)],_0x244184=_0x7b606a[_0x3e9133(0x1d5)];this[_0x3e9133(0xa2c)](_0x2feb5f,_0x244184,0x0,![],'Linear',-0x1),_0xed8de2[_0x3e9133(0x26e)]();const _0x2ed15f=VisuMZ[_0x3e9133(0xbe1)][_0x3e9133(0x668)][_0x3e9133(0x8e0)];let _0x597415=(_0x7b606a[_0x3e9133(0x2ce)]+_0xed8de2[_0x3e9133(0x2ce)])/0x2;_0x597415*=this[_0x3e9133(0x172)]()?0x1:-0x1;let _0x5c90b5=_0x2ed15f[_0x3e9133(0x9b2)]*(this[_0x3e9133(0x172)]()?0x1:-0x1);_0x5395dc[_0x3e9133(0x154)](_0x597415,_0x5c90b5,0x0,![],_0x3e9133(0xa70)),_0x7b606a[_0x3e9133(0x26e)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x1f3)]=function(_0x485d76){const _0x58eac7=_0x4a80d9;if(SceneManager[_0x58eac7(0x1f8)]()){const _0x48adfa=this['battler']();if(_0x48adfa){_0x48adfa[_0x58eac7(0x889)](_0x485d76);if([_0x58eac7(0x3d8),'thrust',_0x58eac7(0x581)][_0x58eac7(0xcf9)](_0x485d76)){if(_0x58eac7(0x978)==='EOplO')this[_0x58eac7(0x4f9)]();else{const _0x43048c=_0x46708d(_0x45a9c9['$1']);_0x42b740['requestFauxAnimation']([this],_0x43048c,![],![]);}}}}this[_0x58eac7(0xa8a)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4f9)]=function(){},Game_Battler['prototype'][_0x4a80d9(0xbfd)]=function(_0x4d742a){const _0x232d96=_0x4a80d9;if(SceneManager[_0x232d96(0x1f8)]()){const _0x8a0aa0=this[_0x232d96(0x997)]();if(_0x8a0aa0)_0x8a0aa0[_0x232d96(0x38a)](_0x4d742a);}},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x61e)]=function(){const _0x46a84d=_0x4a80d9;if(SceneManager[_0x46a84d(0x1f8)]()){const _0x4e19e9=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x4e19e9);}},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xa87)]=function(_0x41721a,_0x1927f7){const _0x299ab2=_0x4a80d9;if(!_0x41721a)return;if(!_0x41721a[_0x299ab2(0x6af)]())return;if(_0x41721a['isAttack']())return;if(_0x41721a[_0x299ab2(0xc2b)]())return;if(_0x41721a[_0x299ab2(0x119)]())return;if($gameTemp['_playTestFastMode'])return;let _0x1b6a7f=0x0;const _0x36721c=VisuMZ['BattleCore'][_0x299ab2(0x668)][_0x299ab2(0x8e0)],_0x3ea877=_0x41721a[_0x299ab2(0x6af)]()['note'];if(_0x3ea877[_0x299ab2(0x605)](/<CAST ANIMATION: (\d+)>/i))_0x1b6a7f=Number(RegExp['$1']);else{if(_0x3ea877['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x41721a['isCertainHit']())_0x1b6a7f=_0x36721c[_0x299ab2(0x1ad)];else{if(_0x41721a[_0x299ab2(0x673)]())_0x1b6a7f=_0x36721c[_0x299ab2(0x311)];else{if(_0x41721a['isMagical']()){if(_0x299ab2(0x589)!==_0x299ab2(0x331))_0x1b6a7f=_0x36721c[_0x299ab2(0x5f5)];else{if(_0x2eb5e2[_0x299ab2(0x1f8)]()){const _0x2664d7=this['battler']();if(_0x2664d7)_0x2664d7[_0x299ab2(0x38a)](_0x5f24be);}}}}}}}_0x1b6a7f>0x0&&$gameTemp[_0x299ab2(0xb38)]([this],_0x1b6a7f,!!_0x1927f7);},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x30e)]=function(){const _0x298183=_0x4a80d9;SoundManager[_0x298183(0x93a)]();let _0x284814=VisuMZ[_0x298183(0xbe1)][_0x298183(0x668)][_0x298183(0x8e0)][_0x298183(0xb88)];_0x284814>0x0&&(Imported[_0x298183(0xb80)]?$gameTemp[_0x298183(0xa1a)]([this],_0x284814):$gameTemp[_0x298183(0xb38)]([this],_0x284814));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5dc)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4dd)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4dd)]=function(){const _0x310561=_0x4a80d9;VisuMZ[_0x310561(0xbe1)][_0x310561(0x5dc)][_0x310561(0x432)](this),this[_0x310561(0xb6c)](),this[_0x310561(0x21e)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x201)]=Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x697)],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x697)]=function(){const _0x2a4e21=_0x4a80d9;VisuMZ['BattleCore'][_0x2a4e21(0x201)][_0x2a4e21(0x432)](this),this[_0x2a4e21(0xb6c)]();},VisuMZ['BattleCore'][_0x4a80d9(0x616)]=Game_Battler['prototype']['performEvasion'],Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x153)]=function(){const _0x5c7b5d=_0x4a80d9;VisuMZ[_0x5c7b5d(0xbe1)][_0x5c7b5d(0x616)][_0x5c7b5d(0x432)](this),this[_0x5c7b5d(0xb6c)]();},Game_Battler[_0x4a80d9(0xba6)]['performFlinch']=function(){const _0x408d63=_0x4a80d9;if(!$gameSystem['isSideView']())return;if(this[_0x408d63(0x514)])return;this[_0x408d63(0x514)]=!![];const _0x482281=this['battler']();if(_0x482281)_0x482281[_0x408d63(0x68c)]();},Game_Battler['prototype'][_0x4a80d9(0x21e)]=function(){const _0x181ff0=_0x4a80d9;if(!this[_0x181ff0(0x6e6)]())return;const _0x351fdb=VisuMZ['BattleCore'][_0x181ff0(0x668)][_0x181ff0(0x490)];if(!(_0x351fdb[_0x181ff0(0xcaa)]??![]))return;if(this[_0x181ff0(0x384)]<=0x0)return;const _0x2e6e72=this[_0x181ff0(0x997)]();if(_0x2e6e72){const _0x1d4bee=this[_0x181ff0(0x384)],_0x4c359d=(_0x1d4bee/this[_0x181ff0(0x772)])[_0x181ff0(0xb4e)](0.8,0x1),_0x248fb7=_0x351fdb[_0x181ff0(0x2f1)]??0x30,_0x48e7a1=_0x4c359d*_0x248fb7;_0x2e6e72[_0x181ff0(0xadc)](_0x48e7a1,_0x4c359d);}},Game_Battler[_0x4a80d9(0xba6)]['requestMotionRefresh']=function(){const _0x3dedb4=_0x4a80d9;if(this[_0x3dedb4(0x50b)]()&&this[_0x3dedb4(0xc1b)]!==_0x3dedb4(0xc84)){if(_0x3dedb4(0x4d1)!==_0x3dedb4(0x4d1))_0x31f86d[_0x3dedb4(0xbe1)]['BattleManager_startInput'][_0x3dedb4(0x432)](this),this[_0x3dedb4(0x8a6)]()&&this[_0x3dedb4(0x72e)]()&&!this[_0x3dedb4(0x204)]&&_0x46dced[_0x3dedb4(0xb3c)]()&&this['selectNextCommand']();else{this['requestMotion'](_0x3dedb4(0xc84));return;}}if(this[_0x3dedb4(0x50b)]()&&this[_0x3dedb4(0xc1b)]===_0x3dedb4(0xc84))return;if(!!this[_0x3dedb4(0x8e2)])return;if(this['isEnemy']()){if(!this[_0x3dedb4(0x223)]()&&this!==BattleManager['_subject']){if(_0x3dedb4(0x918)!=='DPNMl')this[_0x3dedb4(0x736)](_0x3dedb4(0xc41));else{if(this[_0x3dedb4(0x997)]())this[_0x3dedb4(0x997)]()[_0x3dedb4(0x7b7)]();}}this[_0x3dedb4(0xa8a)]();return;}if(this[_0x3dedb4(0xc1b)]==='victory')return;if(this[_0x3dedb4(0xc1b)]===_0x3dedb4(0xc41)&&!BattleManager[_0x3dedb4(0xc57)]())return;if(this[_0x3dedb4(0xc1b)]==='guard'&&!BattleManager['isInputting']())return;this['clearMotion']();if(BattleManager[_0x3dedb4(0x58e)]()&&this===BattleManager[_0x3dedb4(0x139)])return;if(this[_0x3dedb4(0x997)]()&&BattleManager[_0x3dedb4(0xc57)]()){this[_0x3dedb4(0x997)]()[_0x3dedb4(0x7b7)](),this[_0x3dedb4(0xa8a)]();return;}},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x223)]=function(){const _0x56926a=_0x4a80d9;if(!this[_0x56926a(0x681)]())return![];const _0x45b1fa=this[_0x56926a(0x997)]();if(!_0x45b1fa)return![];const _0x6c65e6=_0x45b1fa[_0x56926a(0x2ae)];if(!_0x6c65e6)return![];const _0x392459=_0x6c65e6[_0x56926a(0x38d)];return _0x392459&&!_0x392459[_0x56926a(0x859)];},Game_Battler[_0x4a80d9(0xba6)]['isBattlerFlipped']=function(){const _0x55fb6d=_0x4a80d9;return this[_0x55fb6d(0x51e)];},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x3ba)]=function(_0x38700d){const _0xbc305b=_0x4a80d9;if(!$gameSystem[_0xbc305b(0x6e5)]())return;this[_0xbc305b(0x51e)]=_0x38700d;const _0x3dc598=this['battler']();if(_0x3dc598)_0x3dc598[_0xbc305b(0x271)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xa28)]=function(_0x4f4d2a,_0x441e09,_0x6778e9){const _0x438c52=_0x4a80d9;if(!$gameSystem['isSideView']())return;const _0x593040=this[_0x438c52(0x997)]();if(!_0x593040)return;if(_0x4f4d2a===_0x593040[_0x438c52(0x9ec)])return;let _0x401a74=![];if(this[_0x438c52(0x172)]()){if(_0x4f4d2a>_0x593040[_0x438c52(0x9ec)])_0x401a74=!![];if(_0x4f4d2a<_0x593040['_baseX'])_0x401a74=![];}else{if(this['isEnemy']()){if(_0x4f4d2a>_0x593040[_0x438c52(0x9ec)])_0x401a74=![];if(_0x4f4d2a<_0x593040[_0x438c52(0x9ec)])_0x401a74=!![];}};this['setBattlerFlip'](_0x6778e9?!_0x401a74:_0x401a74),_0x593040[_0x438c52(0x271)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x154)]=function(_0x8b1c2a,_0x14f08b,_0x34f24b,_0x1c0316,_0x59b1f3){const _0x29cacc=_0x4a80d9;if(!$gameSystem[_0x29cacc(0x6e5)]())return;const _0xe3b153=this[_0x29cacc(0x997)]();if(!_0xe3b153)return;if(_0x1c0316)this[_0x29cacc(0xa28)](_0x8b1c2a+_0xe3b153[_0x29cacc(0x9ec)],_0x14f08b+_0xe3b153['_baseY'],![]);_0x8b1c2a+=_0xe3b153[_0x29cacc(0x9ec)]-_0xe3b153['_homeX'],_0x14f08b+=_0xe3b153[_0x29cacc(0x1d5)]-_0xe3b153[_0x29cacc(0x1b4)],_0xe3b153['startMove'](_0x8b1c2a,_0x14f08b,_0x34f24b);if(Imported[_0x29cacc(0xb80)])_0xe3b153[_0x29cacc(0x3fd)](_0x59b1f3||'Linear');},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xa2c)]=function(_0x541e51,_0x1dbacb,_0x56f618,_0x5cb789,_0x3b3a7e,_0x3966ee){const _0x2efd35=_0x4a80d9;if(!$gameSystem[_0x2efd35(0x6e5)]())return;const _0x538a83=this[_0x2efd35(0x997)]();if(!_0x538a83)return;if(_0x541e51===Infinity||_0x1dbacb===Infinity)return;if(isNaN(_0x541e51)||isNaN(_0x1dbacb))return;_0x3966ee=_0x3966ee||0x0;if(_0x3966ee>0x0){if(_0x538a83[_0x2efd35(0x9ec)]>_0x541e51)_0x541e51+=_0x538a83[_0x2efd35(0x2ce)]/0x2+_0x3966ee;if(_0x538a83['_baseX']<_0x541e51)_0x541e51-=_0x538a83[_0x2efd35(0x2ce)]/0x2+_0x3966ee;}if(_0x5cb789)this[_0x2efd35(0xa28)](_0x541e51,_0x1dbacb,![]);_0x541e51-=_0x538a83[_0x2efd35(0xa47)],_0x1dbacb-=_0x538a83[_0x2efd35(0x1b4)],_0x538a83['startMove'](_0x541e51,_0x1dbacb,_0x56f618);if(Imported[_0x2efd35(0xb80)])_0x538a83['setMoveEasingType'](_0x3b3a7e||_0x2efd35(0xa70));},Game_Battler['prototype'][_0x4a80d9(0xb7d)]=function(_0x267a21,_0x420e11,_0x2833cb,_0x8bae80,_0xc1d217){const _0x3c5bdb=_0x4a80d9;if(!$gameSystem[_0x3c5bdb(0x6e5)]())return;const _0x3cdbfd=this[_0x3c5bdb(0x997)]();if(!_0x3cdbfd)return;if(_0x8bae80)this[_0x3c5bdb(0xa28)](_0x267a21+_0x3cdbfd[_0x3c5bdb(0x9ec)],_0x420e11+_0x3cdbfd[_0x3c5bdb(0x1d5)],![]);_0x267a21+=_0x3cdbfd['_homeX'],_0x420e11+=_0x3cdbfd[_0x3c5bdb(0x1b4)],_0x3cdbfd['startHomeMove'](_0x267a21,_0x420e11,_0x2833cb,_0xc1d217),this[_0x3c5bdb(0x719)]=_0x267a21,this[_0x3c5bdb(0x2d9)]=_0x420e11;},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xc5b)]=function(_0x17b9dd,_0x154104,_0x44e3b0,_0x229773,_0x4655e2,_0x5e09c3){const _0x3a2cbe=_0x4a80d9;if(!$gameSystem[_0x3a2cbe(0x6e5)]())return;const _0x32cf80=this['battler']();if(!_0x32cf80)return;_0x5e09c3=_0x5e09c3||0x0;if(_0x5e09c3>0x0){if(_0x32cf80[_0x3a2cbe(0x9ec)]>_0x17b9dd)_0x17b9dd+=_0x32cf80['width']/0x2+_0x5e09c3;if(_0x32cf80[_0x3a2cbe(0x9ec)]<_0x17b9dd)_0x17b9dd-=_0x32cf80['width']/0x2+_0x5e09c3;}if(_0x229773)this[_0x3a2cbe(0xa28)](_0x17b9dd,_0x154104,![]);_0x32cf80[_0x3a2cbe(0x671)](_0x17b9dd,_0x154104,_0x44e3b0,_0x4655e2),this[_0x3a2cbe(0x719)]=_0x17b9dd,this[_0x3a2cbe(0x2d9)]=_0x154104;},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x1ec)]=function(_0x29e18c,_0x1eff65,_0x13aaae){const _0x57cafb=_0x4a80d9;if(!$gameSystem[_0x57cafb(0x6e5)]())return;const _0x174f00=this[_0x57cafb(0x997)]();if(!_0x174f00)return;_0x174f00[_0x57cafb(0x1dc)](_0x29e18c,_0x1eff65,_0x13aaae);},Game_Battler[_0x4a80d9(0xba6)]['jumpBattler']=function(_0x14771e,_0x2b8d04){const _0x21a30=_0x4a80d9;if(!$gameSystem['isSideView']())return;const _0x15e6e0=this[_0x21a30(0x997)]();if(!_0x15e6e0)return;_0x15e6e0[_0x21a30(0x4b9)](_0x14771e,_0x2b8d04);},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x2a1)]=function(_0x5bc838,_0x1a57fd,_0x4bee00,_0xb30578){const _0x37cc43=_0x4a80d9;if(!$gameSystem[_0x37cc43(0x6e5)]())return;const _0x1a28a5=this['battler']();if(!_0x1a28a5)return;_0x1a28a5['startSpin'](_0x5bc838,_0x1a57fd,_0x4bee00,_0xb30578);},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x68b)]=function(_0x131916,_0x59119e,_0x14f39d,_0x3c6ae3){const _0x4d0c4b=_0x4a80d9;if(!$gameSystem[_0x4d0c4b(0x6e5)]())return;const _0x2146cb=this['battler']();if(!_0x2146cb)return;this['isActor']()&&(_0x4d0c4b(0xc91)===_0x4d0c4b(0xc91)?(_0x131916*=-0x1,_0x59119e*=-0x1):_0x33f683[_0x4d0c4b(0x8f7)]([_0x211070])),_0x2146cb['startSkew'](_0x131916,_0x59119e,_0x14f39d,_0x3c6ae3);},Game_Battler['prototype'][_0x4a80d9(0xc82)]=function(_0x3e4d42,_0x652257,_0xdba37d,_0x2ff499){const _0x5e01bb=_0x4a80d9;if(!$gameSystem[_0x5e01bb(0x6e5)]())return;const _0x51c65a=this[_0x5e01bb(0x997)]();if(!_0x51c65a)return;_0x51c65a[_0x5e01bb(0x802)](_0x3e4d42,_0x652257,_0xdba37d,_0x2ff499);},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x3cc)]=function(_0x49206b,_0x61e469,_0x1a6f1b){const _0x598758=_0x4a80d9;if(!$gameSystem[_0x598758(0x6e5)]())return;const _0x4af3c4=this['battler']();if(!_0x4af3c4)return;_0x4af3c4[_0x598758(0x6cd)](_0x49206b,_0x61e469,_0x1a6f1b);},Game_Battler[_0x4a80d9(0xba6)]['clearFreezeMotion']=function(){const _0x52365f=_0x4a80d9,_0x2ea3a4=!!this['_freezeMotionData'];this[_0x52365f(0x8e2)]=undefined,_0x2ea3a4&&(this[_0x52365f(0x1e1)](),this[_0x52365f(0x650)]());},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x650)]=function(){const _0x495ca6=_0x4a80d9;if(!SceneManager[_0x495ca6(0x1f8)]())return;const _0x20e8c9=this[_0x495ca6(0x997)]();if(!_0x20e8c9)return;let _0x107f57=this['isActor']()?_0x20e8c9['_weaponSprite']:_0x20e8c9[_0x495ca6(0x2ae)][_0x495ca6(0x550)];_0x107f57&&(_0x495ca6(0x26d)!==_0x495ca6(0x654)?_0x107f57[_0x495ca6(0x622)](0x0):this[_0x495ca6(0xae6)]());},Game_Battler['prototype']['freezeMotion']=function(_0x9666df,_0x43933d,_0x323242){const _0x367e67=_0x4a80d9;if(this['isEnemy']()&&!this['hasSvBattler']())return;let _0x30f9b1=0x0,_0x39d7a7=0x0;_0x9666df[_0x367e67(0x605)](/ATTACK[ ](\d+)/i)&&(_0x39d7a7=Number(RegExp['$1']),_0x39d7a7--);if(this[_0x367e67(0x172)]()){const _0x114a9d=this[_0x367e67(0xc45)]();_0x30f9b1=_0x114a9d[_0x39d7a7]?_0x114a9d[_0x39d7a7][_0x367e67(0x6e9)]:0x0;}else this[_0x367e67(0x494)]()&&(_0x30f9b1=this[_0x367e67(0xa38)]()[_0x367e67(0x6e9)]||0x0);const _0xa89219=$dataSystem[_0x367e67(0x562)][_0x30f9b1];if(_0x9666df[_0x367e67(0x605)](/attack/i)){if(_0x367e67(0x692)===_0x367e67(0xb59)){if(!_0x53da03[_0x367e67(0x69e)]())return;_0x3efbf9[_0x367e67(0x7bd)](this[_0x367e67(0x282)][_0x367e67(0xc3f)](_0x472ff0=>_0x472ff0['name'])['join']('\x0a'));}else _0x9666df=[_0x367e67(0x89a),'swing',_0x367e67(0x581)][_0xa89219['type']]||_0x367e67(0x3d8);}this[_0x367e67(0x8e2)]={'motionType':_0x9666df,'weaponImageId':_0x43933d?_0xa89219[_0x367e67(0x3ac)]:0x0,'pattern':_0x323242};},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xa3d)]=function(_0x4c59ec){const _0x287760=_0x4a80d9;if(!_0x4c59ec)return![];return _0x4c59ec[_0x287760(0x6f9)]()===this[_0x287760(0x6f9)]();},Game_Battler['prototype'][_0x4a80d9(0x5c6)]=function(_0x394454){const _0x4505e3=_0x4a80d9;if(!_0x394454)return![];return _0x394454[_0x4505e3(0x404)]()===this[_0x4505e3(0x6f9)]();},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x61d)]=function(){return![];},Game_Actor['prototype'][_0x4a80d9(0x61d)]=function(){const _0x595443=_0x4a80d9;return this[_0x595443(0xaf8)]()[_0x595443(0x605)](/\$/i);},Game_Enemy[_0x4a80d9(0xba6)]['hasStaticSvBattler']=function(){const _0x5a068b=_0x4a80d9;return this['hasSvBattler']()&&this[_0x5a068b(0x211)]()[_0x5a068b(0x605)](/\$/i);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc40)]=Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x622)],Game_Actor['prototype'][_0x4a80d9(0x622)]=function(_0x1b2307){const _0x2748cd=_0x4a80d9;VisuMZ[_0x2748cd(0xbe1)][_0x2748cd(0xc40)][_0x2748cd(0x432)](this,_0x1b2307),this[_0x2748cd(0x9fb)]();},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x9fb)]=function(){const _0x3aaa94=_0x4a80d9;this['_battlePortrait']='';if(this[_0x3aaa94(0x442)]()&&this['actor']()[_0x3aaa94(0x6c8)][_0x3aaa94(0x605)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0x3aaa94(0x9ac)!==_0x3aaa94(0x9ac))return this['_damagePopupArray'][_0x3aaa94(0xa06)]();else this[_0x3aaa94(0x195)]=String(RegExp['$1']);}},Game_Actor['prototype']['getBattlePortraitFilename']=function(){const _0x28d4d8=_0x4a80d9;if(this['getBattlePortrait']()!=='')return this[_0x28d4d8(0xa33)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this['getMenuImage']()!==''){if(_0x28d4d8(0x54f)===_0x28d4d8(0xc38))_0x44ab69[_0x28d4d8(0x362)](_0x3f8ce4[_0x28d4d8(0xcd1)],!![]);else return this[_0x28d4d8(0x2e1)]();}}return'';},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xa33)]=function(){const _0x1eb76a=_0x4a80d9;if(this[_0x1eb76a(0x195)]===undefined)this[_0x1eb76a(0x9fb)]();return this[_0x1eb76a(0x195)];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x4f8)]=function(_0x3ae713){const _0x4a23a2=_0x4a80d9;if(this[_0x4a23a2(0x195)]===undefined)this[_0x4a23a2(0x9fb)]();this[_0x4a23a2(0x195)]=_0x3ae713;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()[_0x4a23a2(0xcf9)](this)){if(_0x4a23a2(0xb65)!=='qATED')return _0x4cf9af[_0x4a23a2(0x380)];else{const _0x4d8058=SceneManager[_0x4a23a2(0xb97)][_0x4a23a2(0x989)];if(_0x4d8058){if(_0x4a23a2(0x59e)!==_0x4a23a2(0xb81))_0x4d8058['refreshActorPortrait'](this);else return _0x2b1a90[_0x4a23a2(0xbe1)]['Settings'][_0x4a23a2(0x916)]['NameAlwaysHidden'];}}}},Game_Actor[_0x4a80d9(0xba6)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xc9c)]=function(){if(!this['isConfused']()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype']['isAutoBattle']['call'](this);},VisuMZ['BattleCore']['Game_Actor_makeActionList']=Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x4fb)],Game_Actor['prototype'][_0x4a80d9(0x4fb)]=function(){const _0x4e5d31=_0x4a80d9;if(BattleManager[_0x4e5d31(0x8fb)]&&!ConfigManager[_0x4e5d31(0x49d)])return this[_0x4e5d31(0x12c)]();else{return VisuMZ[_0x4e5d31(0xbe1)]['Game_Actor_makeActionList'][_0x4e5d31(0x432)](this);;}},Game_Actor[_0x4a80d9(0xba6)]['makeActionListAutoAttack']=function(){const _0x2e24f1=_0x4a80d9,_0x149170=[],_0x4918c7=new Game_Action(this);return _0x4918c7['setAttack'](),_0x149170[_0x2e24f1(0x510)](_0x4918c7),_0x149170;},Game_Actor[_0x4a80d9(0xba6)]['battleCommands']=function(){const _0x240c17=_0x4a80d9;if(this[_0x240c17(0x61b)]()[_0x240c17(0x6c8)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x240c17(0x4bd)!==_0x240c17(0x82b))return String(RegExp['$1'])[_0x240c17(0x123)](/[\r\n]+/);else{const _0x473f22=_0x4cb8d9[_0x240c17(0x642)](),_0x5707db=_0x473f22&&_0x473f22[_0x240c17(0x323)]();if(!_0x5707db)return![];const _0x597915=_0x468d50[_0x240c17(0xb97)];if(this['forActor']()){if(_0x597915['_actorWindow'][_0x240c17(0x7c0)]&&_0x597915['_actorWindow']['_handlers'][_0x240c17(0x23c)])return!![];if(_0x597915[_0x240c17(0x9bc)][_0x240c17(0x7c0)]&&_0x597915[_0x240c17(0x9bc)][_0x240c17(0x44d)][_0x240c17(0x23c)])return!![];}else{if(_0x597915[_0x240c17(0x9bc)][_0x240c17(0x7c0)]&&_0x597915[_0x240c17(0x9bc)][_0x240c17(0x44d)][_0x240c17(0xbdf)])return!![];}return![];}}else return VisuMZ[_0x240c17(0xbe1)][_0x240c17(0x668)][_0x240c17(0x8a8)][_0x240c17(0x296)];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x9d9)]=function(){const _0x491587=_0x4a80d9;if(this[_0x491587(0x9cd)][_0x491587(0xad1)]!==undefined)return this[_0x491587(0x9cd)][_0x491587(0xad1)];if(this[_0x491587(0x442)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x491587(0x9cd)][_0x491587(0xad1)]=eval(RegExp['$1']),this['_cache']['svAnchorY']=eval(RegExp['$2']);else{if('vHKsy'===_0x491587(0x88d))this[_0x491587(0x9cd)][_0x491587(0xad1)]=Game_Battler[_0x491587(0xba6)][_0x491587(0x9d9)][_0x491587(0x432)](this);else{if(!_0x5e2dcc[_0x491587(0x6e5)]())return;const _0x1c2ff1=this['battler']();if(!_0x1c2ff1)return;this[_0x491587(0x172)]()&&(_0x363ebc*=-0x1,_0x1ac085*=-0x1),_0x1c2ff1[_0x491587(0x48b)](_0x337f14,_0x449480,_0x1fb107,_0x3ab6ab);}}return this[_0x491587(0x9cd)]['svAnchorX'];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x396)]=function(){const _0x1de67b=_0x4a80d9;if(this['_cache'][_0x1de67b(0x151)]!==undefined)return this[_0x1de67b(0x9cd)][_0x1de67b(0x151)];return this[_0x1de67b(0x442)]()[_0x1de67b(0x6c8)][_0x1de67b(0x605)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x1de67b(0x9cd)][_0x1de67b(0x151)]=eval(RegExp['$2'])):this[_0x1de67b(0x9cd)][_0x1de67b(0x151)]=Game_Battler[_0x1de67b(0xba6)][_0x1de67b(0x396)][_0x1de67b(0x432)](this),this[_0x1de67b(0x9cd)][_0x1de67b(0x151)];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x76a)]=function(){const _0x45b414=_0x4a80d9;if(this['_cache'][_0x45b414(0x6c4)]!==undefined)return this[_0x45b414(0x9cd)][_0x45b414(0x6c4)];if(this[_0x45b414(0x442)]()['note'][_0x45b414(0x605)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x45b414(0x166)===_0x45b414(0x69c)){if(this[_0x45b414(0x287)]['isForFriend']())return![];return _0x57a095[_0x45b414(0xbe1)][_0x45b414(0x7b0)][_0x45b414(0x432)](this,_0x5901b8);}else this[_0x45b414(0x9cd)][_0x45b414(0x6c4)]=!![];}else{if(this[_0x45b414(0x442)]()[_0x45b414(0x6c8)]['match'](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x45b414(0xcc5)!=='Xdrxh'){const _0x5b17e0=_0x5938f6(_0x4dd137['$1']);_0x5b17e0<_0x52e7b0?(_0x244180('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x45b414(0x7d6)](_0x4d4cc9,_0x5b17e0,_0x5d2139)),_0x3dfff0[_0x45b414(0x628)]()):_0x5bf91b=_0x37f786[_0x45b414(0x78c)](_0x5b17e0,_0x2bfe93);}else this['_cache'][_0x45b414(0x6c4)]=![];}else this['_cache'][_0x45b414(0x6c4)]=Game_Battler[_0x45b414(0xba6)][_0x45b414(0x76a)][_0x45b414(0x432)](this);}return this[_0x45b414(0x9cd)][_0x45b414(0x6c4)];},Game_Actor[_0x4a80d9(0xba6)]['battlerSmoothImage']=function(){const _0x30d401=_0x4a80d9;return VisuMZ[_0x30d401(0xbe1)][_0x30d401(0x668)][_0x30d401(0x490)][_0x30d401(0x73e)];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x4f9)]=function(){const _0x4d180b=_0x4a80d9,_0x47ed8c=this[_0x4d180b(0xc45)](),_0x4d6e10=_0x47ed8c[0x0]?_0x47ed8c[0x0]['wtypeId']:0x0,_0x56fe43=$dataSystem[_0x4d180b(0x562)][_0x4d6e10];_0x56fe43&&this['startWeaponAnimation'](_0x56fe43['weaponImageId']);},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x1e8)]=function(_0x4a1482){const _0x4606a6=_0x4a80d9;Game_Battler['prototype'][_0x4606a6(0x1e8)][_0x4606a6(0x432)](this,_0x4a1482),this['performActionMotions'](_0x4a1482);},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xcb1)]=function(){const _0x34b92e=_0x4a80d9,_0x2834ea=this[_0x34b92e(0xc45)](),_0x10f1cf=_0x2834ea[0x0]?_0x2834ea[0x0][_0x34b92e(0x6e9)]:0x0;return $dataSystem['attackMotions'][_0x10f1cf];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x822)]=function(_0x14c7f2){const _0x8da0d9=_0x4a80d9;_0x14c7f2=_0x14c7f2||0x1,_0x14c7f2--;const _0x11ca87=this['weapons']();return _0x11ca87[_0x14c7f2]?_0x11ca87[_0x14c7f2][_0x8da0d9(0xaff)]:0x0;},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x3fb)]=function(_0x451b6d){const _0x1741b4=_0x4a80d9;_0x451b6d=_0x451b6d||0x1,_0x451b6d--;const _0x3e58e5=this[_0x1741b4(0xc45)](),_0x2200ff=_0x3e58e5[_0x451b6d]?_0x3e58e5[_0x451b6d][_0x1741b4(0x6e9)]:0x0;return $dataSystem[_0x1741b4(0x562)][_0x2200ff];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xb79)]=function(_0x572c9d){const _0x2523af=_0x4a80d9;_0x572c9d=_0x572c9d||0x1,_0x572c9d--;const _0x535ab3=this['weapons'](),_0x35426b=_0x535ab3[_0x572c9d]?_0x535ab3[_0x572c9d][_0x2523af(0x6e9)]:0x0,_0x1e7efe=$dataSystem[_0x2523af(0x562)][_0x35426b];if(_0x1e7efe){if(_0x2523af(0xc61)!=='ZhFBn'){if(_0x1e7efe[_0x2523af(0xce4)]===0x0)this[_0x2523af(0x1f3)](_0x2523af(0x89a));else{if(_0x1e7efe[_0x2523af(0xce4)]===0x1)this['requestMotion'](_0x2523af(0x3d8));else _0x1e7efe['type']===0x2&&this[_0x2523af(0x1f3)]('missile');}this['startWeaponAnimation'](_0x1e7efe[_0x2523af(0x3ac)]);}else return _0xf8c6e2[_0x2523af(0x564)]()[_0x2523af(0x435)](_0x21582a=>_0x21582a!==_0x5ee3c8);}},Game_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x60d)]=function(_0x2f2510){const _0x4d7f9a=_0x4a80d9;if(this[_0x4d7f9a(0x172)]()){if(_0x4d7f9a(0x3b6)!=='rsknH'){const _0x8e2b73=this['weapons']();if(_0x8e2b73[_0x4d7f9a(0x6fc)]>0x0){const _0x5dd168=_0x8e2b73[_0x2f2510];if(_0x5dd168)_0x2f2510=this[_0x4d7f9a(0x13c)]()[_0x4d7f9a(0x699)](_0x5dd168);}}else _0x345b41=_0x32484c;}this[_0x4d7f9a(0x24c)]=_0x2f2510||0x0,this[_0x4d7f9a(0x9cd)]={};},Game_Battler['prototype'][_0x4a80d9(0x3e4)]=function(){const _0x36f85a=_0x4a80d9;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this[_0x36f85a(0x24c)]++,this['_cache']={};},Game_Battler['prototype'][_0x4a80d9(0x55e)]=function(){const _0x3f939b=_0x4a80d9;this[_0x3f939b(0x24c)]=undefined,this[_0x3f939b(0x9cd)]={};},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb58)]=Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x13c)],Game_Actor[_0x4a80d9(0xba6)]['equips']=function(){const _0x46bf93=_0x4a80d9;let _0x47270a=VisuMZ['BattleCore']['Game_Actor_equips'][_0x46bf93(0x432)](this);if(this[_0x46bf93(0x8c0)])return _0x47270a;if(this[_0x46bf93(0x24c)]!==undefined){if(_0x46bf93(0x8bf)===_0x46bf93(0x8bf)){this[_0x46bf93(0x8c0)]=!![];const _0x3f06a6=this['equipSlots']();for(let _0x5659ce=0x0;_0x5659ce<_0x3f06a6[_0x46bf93(0x6fc)];_0x5659ce++){if(_0x3f06a6[_0x5659ce]===0x1&&this[_0x46bf93(0x24c)]!==_0x5659ce){if('wQaNq'!=='ssKnU')_0x47270a[_0x5659ce]=null;else return this[_0x46bf93(0x2ce)]*this[_0x46bf93(0xbce)]();}}this[_0x46bf93(0x8c0)]=undefined;}else{if(this['isForNotUser']()&&_0x5c44b2===this[_0x46bf93(0x1e3)]())return![];return _0x1a140f[_0x46bf93(0xbe1)][_0x46bf93(0x1e7)][_0x46bf93(0x432)](this,_0x236574);}}return _0x47270a;},Window_BattleLog[_0x4a80d9(0xba6)]['getDualWieldTimes']=function(_0x507a9a){const _0x56996b=_0x4a80d9;if(_0x507a9a[_0x56996b(0x172)]())return _0x507a9a['weapons']()[_0x56996b(0x6fc)]||0x1;else{if(_0x56996b(0x30a)===_0x56996b(0x30a))return 0x1;else{this[_0x56996b(0x232)](_0x418146);return;}}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x46f)]=function(_0x3e0c83,_0x6e0803){const _0x5a3c0c=_0x4a80d9;_0x3e0c83&&_0x3e0c83['isActor']()&&(_0x5a3c0c(0x74d)!==_0x5a3c0c(0x74d)?_0x961482=_0x5a3c0c(0x10b):_0x3e0c83[_0x5a3c0c(0x60d)](_0x6e0803)),this['callNextMethod']();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x3b8)]=function(_0x3eb171){const _0x1a2703=_0x4a80d9;_0x3eb171&&_0x3eb171['isActor']()&&_0x3eb171['clearActiveWeaponSlot'](),this[_0x1a2703(0xcf7)]();},Game_Actor[_0x4a80d9(0xba6)]['battleUIOffsetX']=function(){const _0xc7e919=_0x4a80d9;let _0x59c716=_0xc7e919(0x108);if(this[_0xc7e919(0xa3e)](_0x59c716))return this[_0xc7e919(0x9cd)][_0x59c716];return this[_0xc7e919(0x9cd)][_0x59c716]=this['createBattleUIOffsetX'](this[_0xc7e919(0x442)]()),this[_0xc7e919(0x9cd)][_0x59c716];},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xb18)]=function(){const _0x2e4ef3=_0x4a80d9;let _0x15394b=_0x2e4ef3(0xb18);if(this[_0x2e4ef3(0xa3e)](_0x15394b))return this[_0x2e4ef3(0x9cd)][_0x15394b];return this[_0x2e4ef3(0x9cd)][_0x15394b]=this[_0x2e4ef3(0x7de)](this[_0x2e4ef3(0x442)]()),this[_0x2e4ef3(0x9cd)][_0x15394b];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xacb)]=Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x622)],Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x622)]=function(_0x17a523,_0xc3e93d,_0x58a8ba){const _0x3195a4=_0x4a80d9;_0x17a523=DataManager[_0x3195a4(0xa66)](_0x17a523),VisuMZ[_0x3195a4(0xbe1)][_0x3195a4(0xacb)][_0x3195a4(0x432)](this,_0x17a523,_0xc3e93d,_0x58a8ba),Imported[_0x3195a4(0x392)]&&this[_0x3195a4(0xc1e)](),this[_0x3195a4(0xfc)](),this[_0x3195a4(0x149)](),Imported[_0x3195a4(0x392)]&&this[_0x3195a4(0xcfb)]();},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xfc)]=function(){const _0x2339a7=_0x4a80d9,_0x3a06b2=VisuMZ[_0x2339a7(0xbe1)][_0x2339a7(0x668)][_0x2339a7(0x916)];this[_0x2339a7(0xb11)]=_0x3a06b2[_0x2339a7(0x25a)],this[_0x2339a7(0x35c)]={};},Game_Enemy['prototype'][_0x4a80d9(0x149)]=function(){const _0x330823=_0x4a80d9,_0x4c3868=VisuMZ[_0x330823(0xbe1)][_0x330823(0x668)]['Enemy'],_0x37b4c9=this[_0x330823(0x378)]()[_0x330823(0x6c8)];this[_0x330823(0x35c)]={'name':'','wtypeId':_0x4c3868[_0x330823(0x2e5)],'collapse':_0x4c3868[_0x330823(0x8ce)],'motionIdle':_0x4c3868['MotionIdle'],'width':_0x4c3868[_0x330823(0xab2)]||0x40,'height':_0x4c3868['Height']||0x40,'anchorX':_0x4c3868[_0x330823(0x6ae)]||0x0,'anchorY':_0x4c3868['AnchorY']||0x0,'shadow':_0x4c3868[_0x330823(0x7d4)]};if(_0x37b4c9[_0x330823(0x605)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if('bVxgU'!=='bVxgU')return _0x2a0b05[_0x330823(0xc45)]()[_0x330823(0x6fc)]||0x1;else this[_0x330823(0xb11)]=Number(RegExp['$1']);}const _0x54a28f=this[_0x330823(0x35c)];if(_0x37b4c9[_0x330823(0x605)](/<SIDEVIEW BATTLER: (.*)>/i))_0x54a28f[_0x330823(0x380)]=String(RegExp['$1']);else{if(_0x37b4c9['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x5b0032=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)[_0x330823(0x249)]('');_0x54a28f[_0x330823(0x380)]=DataManager[_0x330823(0xb0d)](_0x5b0032);}}if(_0x37b4c9['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x330823(0xc10)===_0x330823(0xc44))return 0x1*this[_0x330823(0xc0f)];else _0x54a28f[_0x330823(0xcc7)]=eval(RegExp['$1']),_0x54a28f['anchorY']=eval(RegExp['$2']);}if(_0x37b4c9['match'](/<SIDEVIEW COLLAPSE>/i))_0x54a28f[_0x330823(0xb3d)]=!![];else _0x37b4c9[_0x330823(0x605)](/<SIDEVIEW NO COLLAPSE>/i)&&('pdeXG'===_0x330823(0x524)?_0x54a28f[_0x330823(0xb3d)]=![]:(_0x463e13=_0x143d47(_0x1fad41['$1']),_0x1299b8=_0xb27b67(_0xb55be['$2'])));if(_0x37b4c9[_0x330823(0x605)](/<SIDEVIEW SHOW SHADOW>/i))_0x54a28f[_0x330823(0x291)]=!![];else _0x37b4c9[_0x330823(0x605)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x54a28f[_0x330823(0x291)]=![]);if(_0x37b4c9[_0x330823(0x605)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x330823(0x92d)===_0x330823(0x92d)?_0x54a28f[_0x330823(0x83a)]=String(RegExp['$1'])[_0x330823(0x303)]()[_0x330823(0x893)]():_0x4b34d2['clearActiveWeaponSlot']();else{if(_0x37b4c9['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3d8004=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)[_0x330823(0x249)]('');_0x54a28f[_0x330823(0x83a)]=DataManager[_0x330823(0xb0d)](_0x3d8004);}}if(_0x37b4c9['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x330823(0x5bf)===_0x330823(0x5bf))_0x54a28f['width']=Number(RegExp['$1']),_0x54a28f[_0x330823(0x8dc)]=Number(RegExp['$2']);else{this[_0x330823(0x5af)](_0x20a18f)?this[_0x330823(0x29f)]()[_0x330823(0xbaf)](_0xf1ec86):this[_0x330823(0x3d1)]['removeChild'](_0x5005c0);this[_0x330823(0x9df)][_0x330823(0xbaf)](_0x563f73),this[_0x330823(0x3d1)]['removeChild'](_0x28f996),this[_0x330823(0x9af)]['remove'](_0x23969d);if(this[_0x330823(0xa6f)])this[_0x330823(0xa6f)][_0x330823(0x249)](_0x4c505f);}}if(_0x37b4c9[_0x330823(0x605)](/<SIDEVIEW WEAPON: (.*)>/i))_0x54a28f[_0x330823(0x6e9)]=DataManager[_0x330823(0x706)](RegExp['$1']);else{if(_0x37b4c9[_0x330823(0x605)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0xa33c74=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)['remove'](''),_0xc1c735=DataManager[_0x330823(0xb0d)](_0xa33c74);_0x54a28f['wtypeId']=DataManager['getWtypeIdWithName'](_0xc1c735);}}if(Imported[_0x330823(0x392)]){const _0x229082=this[_0x330823(0x3dc)]();for(const _0x515ba9 of _0x229082){if('Ujenz'===_0x330823(0x416)){if(_0x1e62ab[_0x330823(0x2f7)]()['angleDuration']>0x0)return!![];this[_0x330823(0x3f0)]='';}else{const _0x308158=this[_0x330823(0x856)](_0x515ba9)[_0x330823(0xba4)][_0x330823(0x7ff)]()[_0x330823(0x893)](),_0x43dcea=_0x515ba9['toUpperCase']()[_0x330823(0x893)]();if(_0x37b4c9[_0x330823(0x605)](VisuMZ['ElementStatusCore'][_0x330823(0x4ef)]['SvBattlerSolo-%1-%2'[_0x330823(0x7d6)](_0x43dcea,_0x308158)]))_0x54a28f[_0x330823(0x380)]=String(RegExp['$1']);else{if(_0x37b4c9[_0x330823(0x605)](VisuMZ[_0x330823(0x2a7)][_0x330823(0x4ef)][_0x330823(0x947)[_0x330823(0x7d6)](_0x43dcea,_0x308158)])){if(_0x330823(0x9b8)===_0x330823(0x9b8)){const _0x232971=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)['remove']('');_0x54a28f['name']=DataManager[_0x330823(0xb0d)](_0x232971);}else this[_0x330823(0x736)](_0x330823(0xc84));}}if(_0x37b4c9[_0x330823(0x605)](VisuMZ[_0x330823(0x2a7)][_0x330823(0x4ef)][_0x330823(0x461)['format'](_0x43dcea,_0x308158)]))_0x54a28f[_0x330823(0x6e9)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x37b4c9[_0x330823(0x605)](VisuMZ['ElementStatusCore']['RegExp']['SvWeaponMass-%1-%2'['format'](_0x43dcea,_0x308158)])){if(_0x330823(0x97b)!=='QERnW'){const _0x50ec1f=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)[_0x330823(0x249)](''),_0xa15f26=DataManager[_0x330823(0xb0d)](_0x50ec1f);_0x54a28f['wtypeId']=DataManager[_0x330823(0x706)](_0xa15f26);}else _0x48fa14[_0x330823(0xbe1)][_0x330823(0x33f)][_0x330823(0x432)](this),this['bitmap']&&(this[_0x330823(0xc0b)]['smooth']=_0x193299[_0x330823(0xbe1)]['Settings'][_0x330823(0x490)][_0x330823(0x73e)]);}}if(_0x37b4c9[_0x330823(0x605)](VisuMZ[_0x330823(0x2a7)][_0x330823(0x4ef)]['SvMotionIdleSolo-%1-%2'['format'](_0x43dcea,_0x308158)]))_0x330823(0x8dd)!=='ygpVW'?_0x54a28f[_0x330823(0x83a)]=String(RegExp['$1'])[_0x330823(0x303)]()[_0x330823(0x893)]():this[_0x330823(0xb99)]();else{if(_0x37b4c9[_0x330823(0x605)](VisuMZ[_0x330823(0x2a7)][_0x330823(0x4ef)][_0x330823(0x933)[_0x330823(0x7d6)](_0x43dcea,_0x308158)])){if(_0x330823(0x126)!==_0x330823(0x126)){const _0x17444b=_0x12d856(_0x17e3de['$1']),_0x1b25f5=_0x42f391['BattleCore']['createKeyJS'](_0x2d42a1,_0x330823(0x302));_0x1e9fcc[_0x330823(0xbe1)][_0x330823(0x421)](_0x17444b,_0x1b25f5);}else{const _0x3097d8=String(RegExp['$1'])[_0x330823(0x123)](/[\r\n]+/)['remove']('');_0x54a28f['motionIdle']=DataManager['processRandomizedData'](_0x3097d8);}}}}}}},Game_Enemy[_0x4a80d9(0xba6)]['attackAnimationId1']=function(){const _0x396a14=_0x4a80d9;return this[_0x396a14(0xb11)]||0x0;},Game_Enemy[_0x4a80d9(0xba6)]['attackAnimationId2']=function(){const _0x59ba9b=_0x4a80d9;return this[_0x59ba9b(0x74f)]();},Game_Enemy[_0x4a80d9(0xba6)]['attackAnimationIdSlot']=function(_0x4c90e8){const _0x4cf5e9=_0x4a80d9;return this[_0x4cf5e9(0x74f)]();},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x6e6)]=function(){const _0x48ae4b=_0x4a80d9;if(this[_0x48ae4b(0x378)]()[_0x48ae4b(0x6c8)][_0x48ae4b(0x605)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x48ae4b(0xba6)][_0x48ae4b(0x6e6)]['call'](this);},Game_Enemy[_0x4a80d9(0xba6)]['isBattlerGrounded']=function(){const _0x386a69=_0x4a80d9;if(this[_0x386a69(0x378)]()[_0x386a69(0x6c8)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x791)]=function(){const _0x4195a0=_0x4a80d9,_0x4383f1=[];for(const _0x5ca8bf of this['enemy']()[_0x4195a0(0x32b)]){const _0x22be52=$dataSkills[_0x5ca8bf[_0x4195a0(0x760)]];if(_0x22be52&&!_0x4383f1[_0x4195a0(0xcf9)](_0x22be52))_0x4383f1['push'](_0x22be52);}return _0x4383f1;},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x108)]=function(){const _0x3039ff=_0x4a80d9;let _0x5cb908=_0x3039ff(0x108);if(this['checkCacheKey'](_0x5cb908))return this['_cache'][_0x5cb908];return this[_0x3039ff(0x9cd)][_0x5cb908]=this['createBattleUIOffsetX'](this['enemy']()),this[_0x3039ff(0x9cd)][_0x5cb908];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xb18)]=function(){const _0x41f948=_0x4a80d9;let _0x136d36=_0x41f948(0xb18);if(this[_0x41f948(0xa3e)](_0x136d36))return this[_0x41f948(0x9cd)][_0x136d36];return this[_0x41f948(0x9cd)][_0x136d36]=this[_0x41f948(0x7de)](this[_0x41f948(0x378)]()),this[_0x41f948(0x9cd)][_0x136d36];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xa38)]=function(){const _0x1e7867=_0x4a80d9;if(this[_0x1e7867(0x35c)]!==undefined)return this[_0x1e7867(0x35c)];return this[_0x1e7867(0x149)](),this[_0x1e7867(0x35c)];},Game_Enemy['prototype']['hasSvBattler']=function(){const _0x3f94a9=_0x4a80d9;return this['svBattlerData']()[_0x3f94a9(0x380)]!=='';},Game_Enemy[_0x4a80d9(0xba6)]['svBattlerName']=function(){const _0x243843=_0x4a80d9;return this[_0x243843(0xa38)]()[_0x243843(0x380)];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x647)]=function(){const _0x38d6b1=_0x4a80d9;return this['hasSvBattler']()?VisuMZ[_0x38d6b1(0xbe1)][_0x38d6b1(0x668)][_0x38d6b1(0x490)][_0x38d6b1(0x73e)]:VisuMZ[_0x38d6b1(0xbe1)][_0x38d6b1(0x668)][_0x38d6b1(0x916)][_0x38d6b1(0x73e)];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x1e8)]=function(_0x361da0){const _0x3e9805=_0x4a80d9;Game_Battler[_0x3e9805(0xba6)][_0x3e9805(0x1e8)]['call'](this,_0x361da0);if(this[_0x3e9805(0x681)]())this[_0x3e9805(0x30b)](_0x361da0);},Game_Enemy['prototype']['performAttack']=function(){const _0x2f40be=_0x4a80d9,_0x22dd9f=this[_0x2f40be(0xa38)]()[_0x2f40be(0x6e9)]||0x0,_0x4f5e59=$dataSystem['attackMotions'][_0x22dd9f];if(_0x4f5e59){if(_0x2f40be(0x633)!=='Nhzhu'){if(_0x4f5e59['type']===0x0){if('rIyZn'===_0x2f40be(0xb30))this[_0x2f40be(0x1f3)]('thrust');else{if(!_0x277a2a[_0x2f40be(0x72a)])return;const _0x4ff2fa=_0x583e91['_scene'][_0x2f40be(0x967)];if(!_0x4ff2fa)return;if(_0x407ea4['ActSeqImpact'][_0x2f40be(0xbdd)]<=1.04){_0x35a1e1(_0x2f40be(0x939)),_0x141629[_0x2f40be(0x628)]();return;}_0x836625[_0x2f40be(0xb1e)](_0x43f7db,_0x35af0a);const _0x4f149a=_0x6ca427[_0x2f40be(0x242)];_0x4ff2fa[_0x2f40be(0x937)](_0x4f149a);}}else{if(_0x4f5e59[_0x2f40be(0xce4)]===0x1)this[_0x2f40be(0x1f3)](_0x2f40be(0x3d8));else _0x4f5e59[_0x2f40be(0xce4)]===0x2&&(_0x2f40be(0x5e6)!=='UQbIl'?this[_0x2f40be(0x22a)]=!![]:this[_0x2f40be(0x1f3)](_0x2f40be(0x581)));}}else _0x584dea--,_0x507076++;}},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x4f9)]=function(){const _0x488391=_0x4a80d9,_0x368403=this[_0x488391(0xa38)]()[_0x488391(0x6e9)]||0x0,_0x4ab550=$dataSystem[_0x488391(0x562)][_0x368403];_0x4ab550&&this[_0x488391(0xbfd)](_0x4ab550[_0x488391(0x3ac)]);},Game_Enemy['prototype']['getAttackMotion']=function(){const _0x1c6f9f=_0x4a80d9,_0x51f33c=this[_0x1c6f9f(0xa38)]()['wtypeId']||0x0;return $dataSystem[_0x1c6f9f(0x562)][_0x51f33c];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x3fb)]=function(_0x38a634){const _0x5ed400=_0x4a80d9;return this[_0x5ed400(0xcb1)]();},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x4dd)]=function(){const _0x5cd835=_0x4a80d9;Game_Battler[_0x5cd835(0xba6)][_0x5cd835(0x4dd)]['call'](this),this['isSpriteVisible']()&&this[_0x5cd835(0x681)]()&&this[_0x5cd835(0x1f3)](_0x5cd835(0x83e)),SoundManager['playEnemyDamage']();},Game_Enemy[_0x4a80d9(0xba6)]['performEvasion']=function(){const _0x5aa3e1=_0x4a80d9;Game_Battler[_0x5aa3e1(0xba6)][_0x5aa3e1(0x153)][_0x5aa3e1(0x432)](this),this['requestMotion']('evade');},Game_Enemy['prototype'][_0x4a80d9(0x5ff)]=function(){const _0x5acd3f=_0x4a80d9;Game_Battler['prototype'][_0x5acd3f(0x5ff)][_0x5acd3f(0x432)](this),this[_0x5acd3f(0x1f3)](_0x5acd3f(0x367));},Game_Enemy['prototype'][_0x4a80d9(0x48d)]=function(){const _0x5ab690=_0x4a80d9;Game_Battler['prototype']['performCounter'][_0x5ab690(0x432)](this),this['performAttack']();},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x245)]=function(){const _0x48ea33=_0x4a80d9;if(this[_0x48ea33(0x681)]()){if(_0x48ea33(0xf1)===_0x48ea33(0x9f3)){this[_0x48ea33(0xa13)][_0x48ea33(0x622)](),this[_0x48ea33(0x5bc)]['close']();if(!_0x243a94['BattleCore'][_0x48ea33(0xbe3)])return;if(_0x3975b2[_0x48ea33(0xbd4)]&&_0x1299ed[_0x48ea33(0x963)]())return;if(_0x7a9ef4['_currentActor']){_0x50e5b8[_0x48ea33(0x9e0)][_0x48ea33(0x308)](_0x48ea33(0x6e0));const _0x194417=_0x30ae55[_0x48ea33(0x9e0)][_0x48ea33(0x997)]();if(_0x194417)_0x194417[_0x48ea33(0x467)]();}_0x30378b['_currentActor']=null;}else{if(this[_0x48ea33(0x5c3)]()>=0x1)return!![];return this[_0x48ea33(0xa38)]()[_0x48ea33(0xb3d)];}}else return!![];},Game_Enemy[_0x4a80d9(0xba6)]['svBattlerAnchorX']=function(){return this['svBattlerData']()['anchorX'];},Game_Enemy['prototype']['svBattlerAnchorY']=function(){const _0x50195a=_0x4a80d9;return this[_0x50195a(0xa38)]()[_0x50195a(0x7e9)];},Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x76a)]=function(){const _0x1b2248=_0x4a80d9;return this[_0x1b2248(0xa38)]()[_0x1b2248(0x291)];},VisuMZ[_0x4a80d9(0xbe1)]['Game_Enemy_transform']=Game_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x6b0)],Game_Enemy[_0x4a80d9(0xba6)]['transform']=function(_0x4e542e){const _0xf86358=_0x4a80d9;VisuMZ[_0xf86358(0xbe1)][_0xf86358(0x7ec)][_0xf86358(0x432)](this,_0x4e542e),this['clearBattleCoreData'](),this[_0xf86358(0x149)]();const _0x55beef=this[_0xf86358(0x997)]();_0x55beef&&(_0xf86358(0x8c1)!==_0xf86358(0xad4)?(_0x55beef[_0xf86358(0x8d9)]=undefined,_0x55beef['setBattler'](this)):(_0x296dfa['x']+=this['x'],_0x51210a['y']+=this['y']));},Game_Unit[_0x4a80d9(0xba6)][_0x4a80d9(0x63c)]=function(_0x354886){const _0x5776e5=_0x4a80d9;for(const _0x25d4a9 of this['members']()){if(_0x5776e5(0xadb)!==_0x5776e5(0xadb))_0x2e17cc[_0x5776e5(0xbe1)][_0x5776e5(0x38f)][_0x5776e5(0x432)](this);else{if(_0x25d4a9)_0x25d4a9[_0x5776e5(0x63c)](_0x354886);}}},Game_Unit[_0x4a80d9(0xba6)]['trueRandomTarget']=function(){const _0x312298=_0x4a80d9,_0x45a55b=this[_0x312298(0x564)]();return _0x45a55b[Math[_0x312298(0x584)](_0x45a55b[_0x312298(0x6fc)])];},VisuMZ[_0x4a80d9(0xbe1)]['Game_Party_addActor']=Game_Party[_0x4a80d9(0xba6)][_0x4a80d9(0x9a9)],Game_Party[_0x4a80d9(0xba6)]['addActor']=function(_0xa8755c){const _0x10d2fd=_0x4a80d9;VisuMZ[_0x10d2fd(0xbe1)][_0x10d2fd(0xc73)][_0x10d2fd(0x432)](this,_0xa8755c),BattleManager[_0x10d2fd(0xb14)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x850)]=Game_Party['prototype'][_0x4a80d9(0x44b)],Game_Party['prototype'][_0x4a80d9(0x44b)]=function(_0x312150){const _0x2fa45a=_0x4a80d9;VisuMZ[_0x2fa45a(0xbe1)][_0x2fa45a(0x850)][_0x2fa45a(0x432)](this,_0x312150),BattleManager['refreshStatusWindow']();},VisuMZ[_0x4a80d9(0xbe1)]['Game_Troop_setup']=Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x622)],Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x622)]=function(_0x458c81){const _0x41439f=_0x4a80d9;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x458c81),VisuMZ[_0x41439f(0xbe1)][_0x41439f(0x8d5)][_0x41439f(0x432)](this,_0x458c81),this[_0x41439f(0x4e4)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb06)]=Game_Troop[_0x4a80d9(0xba6)]['expTotal'],Game_Troop[_0x4a80d9(0xba6)]['expTotal']=function(){const _0xd0d4c6=_0x4a80d9;let _0x3be85f=VisuMZ[_0xd0d4c6(0xbe1)][_0xd0d4c6(0xb06)][_0xd0d4c6(0x432)](this);return this[_0xd0d4c6(0x7a2)]&&(_0xd0d4c6(0x19b)===_0xd0d4c6(0xbe4)?(this[_0xd0d4c6(0xff)](),this[_0xd0d4c6(0xba9)](),_0x37d65d[_0xd0d4c6(0xba6)]['_createClientArea'][_0xd0d4c6(0x432)](this),this[_0xd0d4c6(0xb63)]()):_0x3be85f*=this[_0xd0d4c6(0x7a2)]()),Math['ceil'](_0x3be85f);},Game_Troop[_0x4a80d9(0xba6)]['expRate']=function(){return 0x1;},Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x4e4)]=function(){const _0x5df3b2=_0x4a80d9,_0x5116fa=DataManager['createTroopNote'](this[_0x5df3b2(0x598)]()['id']);if(_0x5116fa[_0x5df3b2(0x605)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2f0065=RegExp['$1'][_0x5df3b2(0x123)](',')[_0x5df3b2(0xc3f)](_0x3540dd=>Number(_0x3540dd));this['checkExtendTroopCompatibility'](),this[_0x5df3b2(0x479)](_0x2f0065);}},Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x7b5)]=function(){const _0x400d26=_0x4a80d9;let _0x539cb3='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x539cb3+=_0x400d26(0x981);if(Imported['VisuMZ_2_BattleSystemBTB']){if(VisuMZ[_0x400d26(0x40d)][_0x400d26(0xbdd)]<1.11){if(_0x400d26(0x460)===_0x400d26(0x460))alert(_0x539cb3['format'](_0x400d26(0x65c))),SceneManager['exit']();else return _0x7b7667;}}if(Imported[_0x400d26(0xbd4)]){if(_0x400d26(0x480)!=='wnfaM')return!![];else VisuMZ[_0x400d26(0xb16)]['version']<1.19&&(alert(_0x539cb3[_0x400d26(0x7d6)](_0x400d26(0x977))),SceneManager[_0x400d26(0x628)]());}if(Imported[_0x400d26(0x4d8)]){if(VisuMZ[_0x400d26(0xa2a)][_0x400d26(0xbdd)]<1.15){if(_0x400d26(0x486)!==_0x400d26(0x486))return _0x1ae9aa=_0x30ffdd(_0x2f9ce1),_0x569237[_0x400d26(0x605)](/#(.*)/i)?_0x400d26(0x8f5)[_0x400d26(0x7d6)](_0x59c0bc(_0x572330['$1'])):this[_0x400d26(0xbb3)](_0x2a2171(_0xc67002));else alert(_0x539cb3['format']('STB')),SceneManager[_0x400d26(0x628)]();}}},Game_Troop['prototype'][_0x4a80d9(0x479)]=function(_0x4630e5){const _0x4f77=_0x4a80d9;this[_0x4f77(0x8ff)]={};for(const _0xc0296d of this['members']()){if('bBSjJ'==='bBSjJ'){if(!_0xc0296d)continue;_0xc0296d[_0x4f77(0xb2d)]('');}else return _0x45889b[_0x4f77(0x93f)];}for(const _0x164f5d of _0x4630e5){const _0x351cc6=$dataTroops[_0x164f5d];if(_0x351cc6)this[_0x4f77(0xa46)](_0x351cc6);}this[_0x4f77(0x7f9)]();},Game_Troop['prototype']['addExtendedTroopMembers']=function(_0x39f927){const _0x6010b4=_0x4a80d9;for(const _0x1c1ca1 of _0x39f927[_0x6010b4(0x767)]){if($dataEnemies[_0x1c1ca1['enemyId']]){const _0x27eb29=_0x1c1ca1[_0x6010b4(0xaf6)],_0x1ba2c6=_0x1c1ca1['x'],_0x1c60c4=_0x1c1ca1['y'],_0x5cca48=new Game_Enemy(_0x27eb29,_0x1ba2c6,_0x1c60c4);_0x1c1ca1['hidden']&&_0x5cca48[_0x6010b4(0x670)](),this[_0x6010b4(0x441)]['push'](_0x5cca48);}}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb2e)]=Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x3cd)],Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x3cd)]=function(){const _0x2fea57=_0x4a80d9;VisuMZ[_0x2fea57(0xbe1)][_0x2fea57(0xb2e)][_0x2fea57(0x432)](this),this[_0x2fea57(0x9c4)]();},Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x9c4)]=function(){const _0xace762=_0x4a80d9;this[_0xace762(0x82e)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x8808be=$dataMap[_0xace762(0x6c8)];if(!_0x8808be)return;const _0x5e6e0f=_0x8808be[_0xace762(0x605)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x5e6e0f)for(const _0x1178c2 of _0x5e6e0f){if(_0xace762(0x375)==='HsieE')this['terminate']();else{_0x1178c2['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x358616=Number(RegExp['$1']),_0x5f4a90=Number(RegExp['$2']),_0xbfeeb1=_0x5f4a90===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x2e6342=String(RegExp['$3']);_0xbfeeb1[_0x358616]=_0x2e6342;}}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x50c)]=Game_Map[_0x4a80d9(0xba6)]['battleback1Name'],Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x2db)]=function(){const _0x53a412=_0x4a80d9;if(!BattleManager[_0x53a412(0x7d7)]()){const _0x3f75f2=$gamePlayer[_0x53a412(0xf7)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x53a412(0x82e)][_0x3f75f2])return this[_0x53a412(0x82e)][_0x3f75f2];}return VisuMZ[_0x53a412(0xbe1)][_0x53a412(0x50c)]['call'](this);},VisuMZ['BattleCore'][_0x4a80d9(0x8fa)]=Game_Map['prototype'][_0x4a80d9(0x75e)],Game_Map['prototype'][_0x4a80d9(0x75e)]=function(){const _0x11bae5=_0x4a80d9;if(!BattleManager[_0x11bae5(0x7d7)]()){const _0x31624a=$gamePlayer[_0x11bae5(0xf7)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x11bae5(0x82e)]&&this[_0x11bae5(0x6d0)][_0x31624a]){if('LafFF'===_0x11bae5(0x9a8))_0xe26c91[_0x11bae5(0x445)](),_0x331a25[_0x11bae5(0xb9d)](_0x136cbe['deathStateId']());else return this['_regionBattleback2'][_0x31624a];}}return VisuMZ['BattleCore'][_0x11bae5(0x8fa)][_0x11bae5(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3d0)]=Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x14c)],Game_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x14c)]=function(){const _0x37d232=_0x4a80d9;let _0x4b36a2=JsonEx['makeDeepCopy'](VisuMZ[_0x37d232(0xbe1)]['Game_Map_encounterList'][_0x37d232(0x432)](this));return VisuMZ[_0x37d232(0xbe1)][_0x37d232(0xa5b)](_0x4b36a2);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xa5b)]=function(_0xf00028){const _0x5c7121=_0x4a80d9;var _0x5b1058,_0x4a67ca,_0x349a14;for(_0x349a14=_0xf00028[_0x5c7121(0x6fc)]-0x1;_0x349a14>0x0;_0x349a14--){if(_0x5c7121(0xa71)!=='hvDWy')return![];else _0x5b1058=Math[_0x5c7121(0x506)](Math[_0x5c7121(0xa62)]()*(_0x349a14+0x1)),_0x4a67ca=_0xf00028[_0x349a14],_0xf00028[_0x349a14]=_0xf00028[_0x5b1058],_0xf00028[_0x5b1058]=_0x4a67ca;}return _0xf00028;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x8af)]=Game_Interpreter['prototype'][_0x4a80d9(0x544)],Game_Interpreter['prototype'][_0x4a80d9(0x544)]=function(_0x4d06bb){const _0x26c8c8=_0x4a80d9;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x26c8c8(0xbe1)][_0x26c8c8(0x8af)][_0x26c8c8(0x432)](this,_0x4d06bb);},VisuMZ[_0x4a80d9(0xbe1)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x538)],Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x538)]=function(){const _0x1338ba=_0x4a80d9;if(SceneManager[_0x1338ba(0x1f8)]())switch(this[_0x1338ba(0x3f0)]){case'battleAngle':if(Imported[_0x1338ba(0x619)]){if($gameScreen[_0x1338ba(0x2f7)]()[_0x1338ba(0x508)]>0x0)return!![];this['_waitMode']='';}break;case'battleAnimation':if(BattleManager['_spriteset'][_0x1338ba(0x1f4)]())return!![];this[_0x1338ba(0x3f0)]='';break;case _0x1338ba(0x161):if(Imported[_0x1338ba(0x619)]){if($gameScreen['battleCameraData']()[_0x1338ba(0x962)]>0x0)return!![];if($gameScreen[_0x1338ba(0x2f7)]()[_0x1338ba(0xced)]>0x0)return!![];this[_0x1338ba(0x3f0)]='';}break;case _0x1338ba(0xd03):if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x14e)]())return!![];this['_waitMode']='';break;case _0x1338ba(0x2d5):if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x39c)]())return!![];this[_0x1338ba(0x3f0)]='';break;case'battleJump':if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0xc76)]())return!![];this[_0x1338ba(0x3f0)]='';break;case _0x1338ba(0xcdb):if(BattleManager[_0x1338ba(0x2d4)][_0x1338ba(0xb2f)]())return!![];this['_waitMode']='';break;case _0x1338ba(0xa16):if(BattleManager[_0x1338ba(0x967)]['isAnyoneMoving']())return!![];this[_0x1338ba(0x3f0)]='';break;case _0x1338ba(0x93c):if(BattleManager[_0x1338ba(0x967)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case'battleGrow':if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0xac3)]())return!![];this[_0x1338ba(0x3f0)]='';break;case _0x1338ba(0xb7e):if(BattleManager[_0x1338ba(0x967)]['isAnyoneSkewing']())return!![];this[_0x1338ba(0x3f0)]='';break;case _0x1338ba(0xb40):if(Imported[_0x1338ba(0xacc)]){if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x752)]())return!![];this['_waitMode']='';}break;case _0x1338ba(0x4b2):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x1338ba(0xb0e)!=='mAvaU')_0x443ee1['BattleSystemBTB'][_0x1338ba(0xbdd)]<1.11&&(_0x4400c2(_0x42c09a['format'](_0x1338ba(0x65c))),_0x536c39[_0x1338ba(0x628)]());else{if($gameScreen[_0x1338ba(0x2f7)]()['skewDuration']>0x0)return!![];this[_0x1338ba(0x3f0)]='';}}break;case _0x1338ba(0xbfa):if(BattleManager['_spriteset'][_0x1338ba(0x1b9)]())return!![];this[_0x1338ba(0x3f0)]='';break;case'battleZoom':if(Imported[_0x1338ba(0x619)]){if(_0x1338ba(0x417)===_0x1338ba(0x6b1))_0x58b429[_0x1338ba(0xbe1)][_0x1338ba(0xc97)][_0x1338ba(0x432)](this,_0x5934ef),this['setSvBattlerSprite'](_0x488172);else{if($gameScreen[_0x1338ba(0x2f7)]()['zoomDuration']>0x0)return!![];this[_0x1338ba(0x3f0)]='';}}break;case _0x1338ba(0x183):if(Imported[_0x1338ba(0x72a)]){if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x1fb)]){if(_0x1338ba(0xa72)!==_0x1338ba(0xa72))this[_0x1338ba(0x444)]['x']=this['x'],this[_0x1338ba(0x444)]['y']=this['y'];else{if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x1fb)]())return!![];this[_0x1338ba(0x3f0)]='battleInjectAni';}}else{if(_0x1338ba(0x733)==='UmvSR'){const _0x263de5=this[_0x1338ba(0x564)]();return _0x263de5[_0x5bba48['randomInt'](_0x263de5['length'])];}else this[_0x1338ba(0x3f0)]='';}break;}break;case'battleInjectAni':if(Imported[_0x1338ba(0x72a)]){if(_0x1338ba(0x71b)===_0x1338ba(0x64c))_0x1dab39+=_0x4a2c88;else{if(BattleManager[_0x1338ba(0x967)][_0x1338ba(0x16e)]())return!![];this[_0x1338ba(0x3f0)]='';}}break;}return VisuMZ[_0x1338ba(0xbe1)]['Game_Interpreter_updateWaitMode'][_0x1338ba(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x8d1)]=Game_Interpreter['prototype']['command301'],Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x507)]=function(_0x2479db){const _0x2707c2=_0x4a80d9;if(!$gameParty[_0x2707c2(0x3c7)]()){if(_0x2707c2(0x9ef)!==_0x2707c2(0x7e6))return this[_0x2707c2(0x488)](_0x2479db);else _0x7eab5c[_0x2707c2(0x510)](new _0x3ff6b8(_0x332df3));}else{if('oZfgf'===_0x2707c2(0xcd4)){if(!_0x567d5a['isSceneBattle']())return;if(!_0x2f3e63[_0x2707c2(0x619)])return;_0x377592['ConvertParams'](_0x181de5,_0x3a5290);const _0x340415=_0xfb94ce[_0x2707c2(0xc05)](),_0x288646=_0x1aca01['WaitForCamera'];_0x65d9e1[_0x2707c2(0x334)](_0x62af2e[_0x2707c2(0xbf4)],_0x3326a9[_0x2707c2(0x1a5)],_0x4d94d3[_0x2707c2(0x9b6)],_0x57c359['EasingType']);if(_0x288646)_0x340415['setWaitMode']('battleCamera');}else return VisuMZ[_0x2707c2(0xbe1)][_0x2707c2(0x8d1)][_0x2707c2(0x432)](this,_0x2479db);}},Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x877)]=function(_0x52ebdd){const _0xa59dab=_0x4a80d9;return VisuMZ[_0xa59dab(0xbe1)][_0xa59dab(0x8d1)]['call'](this,_0x52ebdd),BattleManager[_0xa59dab(0xa19)](_0xbdf959=>{const _0x3dee5d=_0xa59dab;if('ImvFx'===_0x3dee5d(0x371))this[_0x3dee5d(0x580)][this[_0x3dee5d(0x2ee)]]=_0xbdf959;else return _0xeea080[_0x3dee5d(0xbe1)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x63f038);}),!![];},VisuMZ[_0x4a80d9(0xbe1)]['CheckMapBattleEventValid']=function(_0x22516c){const _0xd2f73=_0x4a80d9,_0x25ec42=$dataCommonEvents[_0x22516c];if(!_0x25ec42)return![];if(_0x25ec42[_0xd2f73(0xa03)][_0xd2f73(0x6fc)]<=0x1)return![];return!![];},Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x488)]=function(_0x4991ec){const _0x25fea6=_0x4a80d9,_0x5f490f=VisuMZ[_0x25fea6(0xbe1)][_0x25fea6(0x668)][_0x25fea6(0x1c6)],_0x5a09a7=_0x5f490f[_0x25fea6(0xc52)],_0x4877ea=$dataCommonEvents[_0x5a09a7];if(_0x4877ea&&VisuMZ[_0x25fea6(0xbe1)][_0x25fea6(0x922)](_0x5a09a7)){const _0x211e08=this['isOnCurrentMap']()?this[_0x25fea6(0xac9)]:0x0,_0x2891ed=_0x4877ea[_0x25fea6(0xa03)];this[_0x25fea6(0x6ee)](_0x2891ed,_0x211e08),this[_0x25fea6(0x653)]=JsonEx[_0x25fea6(0xa9b)](this['_list']);const _0x1e7c05={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x25fea6(0xa9b)](_0x4991ec)};return this[_0x25fea6(0x653)]['splice'](this[_0x25fea6(0x743)]+0x1,0x0,_0x1e7c05),!![];}else return VisuMZ[_0x25fea6(0xbe1)][_0x25fea6(0x8d1)][_0x25fea6(0x432)](this,_0x4991ec);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x42b)]=BattleManager[_0x4a80d9(0x8fd)],BattleManager[_0x4a80d9(0x8fd)]=function(){const _0x35488b=_0x4a80d9;VisuMZ[_0x35488b(0xbe1)][_0x35488b(0x42b)][_0x35488b(0x432)](this),this[_0x35488b(0x4de)]();},BattleManager[_0x4a80d9(0x4de)]=function(){const _0x272251=_0x4a80d9,_0x2f5c7a=VisuMZ[_0x272251(0xbe1)][_0x272251(0x668)][_0x272251(0x1c6)],_0x42cbe0=_0x2f5c7a[_0x272251(0xc52)];if(_0x42cbe0&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x42cbe0)){if(_0x272251(0x449)==='VTzjo')this[_0x272251(0x6cc)]=!![],$gameTemp[_0x272251(0x3a2)](_0x2f5c7a[_0x272251(0xc52)]),$gameMap[_0x272251(0x122)](),$gameMap[_0x272251(0x397)][_0x272251(0x2d6)]=!![];else{if(_0x1db4c6[_0x272251(0x638)](_0x3c7dfb))return!![];}}if(_0x2f5c7a['DefeatEvent']>0x0){if(_0x272251(0x457)!==_0x272251(0xaee))this['_canLose']=!![];else{const _0x3090b3=_0x57f1dd[_0x272251(0xba6)][_0x272251(0x8d8)][_0x272251(0x432)](arguments,0x1),_0x2a1a6e={'name':_0x19d388,'params':_0x3090b3},_0x49b2a5=this[_0x272251(0x282)][_0x272251(0xc3f)](_0x1222d1=>_0x1222d1[_0x272251(0x380)])['indexOf'](_0x272251(0x8c8));_0x49b2a5>=0x0?this['_methods']['splice'](_0x49b2a5,0x0,_0x2a1a6e):this['_methods'][_0x272251(0x510)](_0x2a1a6e);}}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x45f)]=Scene_Map['prototype'][_0x4a80d9(0xf0)],Scene_Map[_0x4a80d9(0xba6)][_0x4a80d9(0xf0)]=function(){const _0x52999e=_0x4a80d9;if(BattleManager[_0x52999e(0x6cc)])return;VisuMZ[_0x52999e(0xbe1)][_0x52999e(0x45f)][_0x52999e(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x27c)]=Scene_Map[_0x4a80d9(0xba6)]['launchBattle'],Scene_Map[_0x4a80d9(0xba6)]['launchBattle']=function(){const _0x403ede=_0x4a80d9;if(BattleManager['_battleCoreBattleStartEvent']){if(_0x403ede(0x2c4)===_0x403ede(0x2c4))this[_0x403ede(0xae9)]();else{const _0x44ede5=this['_actor'][_0x403ede(0x9ba)]();if(_0x44ede5){const _0x13dddb=this[_0x403ede(0x46b)](_0x403ede(0x7b6),_0x44ede5[_0x403ede(0x225)]);this[_0x403ede(0x8b9)](_0x13dddb||0x0);}}}else{if(_0x403ede(0x577)!==_0x403ede(0x2d1))VisuMZ[_0x403ede(0xbe1)]['Scene_Map_launchBattle'][_0x403ede(0x432)](this);else{if(this['contentsOpacity']>0x0)this[_0x403ede(0x7fe)]-=0x10;}}},Scene_Map[_0x4a80d9(0xba6)]['battleCorePreBattleCommonEvent']=function(){const _0x2b1935=_0x4a80d9;this[_0x2b1935(0x176)]=!![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc58)]=SceneManager['isSceneChanging'],SceneManager['isSceneChanging']=function(){const _0x4e0672=_0x4a80d9;if(BattleManager[_0x4e0672(0x6cc)])return![];return VisuMZ[_0x4e0672(0xbe1)]['SceneManager_isSceneChanging'][_0x4e0672(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbe5)]=Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x62e)],Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x62e)]=function(){const _0x476bc9=_0x4a80d9;VisuMZ[_0x476bc9(0xbe1)][_0x476bc9(0xbe5)][_0x476bc9(0x432)](this);if(this[_0x476bc9(0x2d6)]){if('dzHHa'===_0x476bc9(0x7d9)){if(this[_0x476bc9(0x5eb)]===_0x476bc9(0xa98))return![];if(this[_0x476bc9(0x5eb)]==='all\x20enemies')return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x476bc9(0x9f1)]():_0x5eae7e[_0x476bc9(0xbe1)][_0x476bc9(0xca8)][_0x476bc9(0x432)](this);}else this[_0x476bc9(0x2d6)]=undefined,SceneManager['_scene'][_0x476bc9(0x9a0)]();}},Scene_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x9a0)]=function(){const _0x5b001b=_0x4a80d9;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x5b001b(0x2b4)]=!![],this[_0x5b001b(0xa65)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x26a)]=Scene_Map[_0x4a80d9(0xba6)]['initialize'],Scene_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(){const _0x74dbd=_0x4a80d9;VisuMZ[_0x74dbd(0xbe1)][_0x74dbd(0x26a)]['call'](this),BattleManager['_battleCoreBattleResumeAfter']&&(_0x74dbd(0x330)!==_0x74dbd(0xc7b)?(this[_0x74dbd(0x176)]=!![],BattleManager[_0x74dbd(0x2b4)]=undefined):_0x411175[_0x74dbd(0xabb)](0x0,0x0,_0x289ec1[_0x74dbd(0xc0b)]['width'],this[_0x74dbd(0xc0b)]['height']));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x90e)]=Scene_Map[_0x4a80d9(0xba6)]['initialize'],Scene_Map[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(){const _0x334afd=_0x4a80d9;VisuMZ['BattleCore'][_0x334afd(0x90e)][_0x334afd(0x432)](this),$gameTemp[_0x334afd(0xb6a)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xccf)]=Scene_ItemBase[_0x4a80d9(0xba6)][_0x4a80d9(0xcfd)],Scene_ItemBase['prototype']['applyItem']=function(){const _0xa311ff=_0x4a80d9;VisuMZ[_0xa311ff(0xbe1)][_0xa311ff(0xccf)][_0xa311ff(0x432)](this);if(this['item']()[_0xa311ff(0x6c8)][_0xa311ff(0x605)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0xa311ff(0x50d)!=='OkxcX'){if(!_0x5132b4['isSceneBattle']())return;if(_0x5f5496[_0xa311ff(0x288)]())return;if(!this[_0xa311ff(0x45a)])this[_0xa311ff(0x3bd)]();this[_0xa311ff(0x28a)]();const _0x2d9bd8=this['battler']();if(_0x2d9bd8)_0x2d9bd8[_0xa311ff(0x6f6)]();}else return;}this[_0xa311ff(0x6af)]()['note'][_0xa311ff(0x605)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0xa311ff(0x99b)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0xa311ff(0x6af)]())&&(_0xa311ff(0x5d8)!==_0xa311ff(0x5d8)?(_0xa208bd[_0xa311ff(0xbe1)]['Window_BattleLog_performActionStart'][_0xa311ff(0x432)](this,_0x30b3db,_0x590cb9),this[_0xa311ff(0xcf7)]()):$gameTemp[_0xa311ff(0x99b)]=[]);},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Options_maxCommands']=Scene_Options['prototype']['maxCommands'],Scene_Options[_0x4a80d9(0xba6)]['maxCommands']=function(){const _0x428844=_0x4a80d9;let _0x11413b=VisuMZ[_0x428844(0xbe1)][_0x428844(0xaa2)]['call'](this);const _0x427c71=VisuMZ['BattleCore']['Settings'];if(_0x427c71[_0x428844(0x51b)][_0x428844(0xbbf)]&&_0x427c71[_0x428844(0x51b)][_0x428844(0xc9d)])_0x11413b+=0x2;if(_0x427c71[_0x428844(0x5f0)]['AddOption']&&_0x427c71[_0x428844(0x5f0)][_0x428844(0xc9d)])_0x11413b+=0x1;return _0x11413b;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x250)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)],Scene_Battle['prototype'][_0x4a80d9(0x54a)]=function(){const _0x82168a=_0x4a80d9;VisuMZ[_0x82168a(0xbe1)][_0x82168a(0x250)][_0x82168a(0x432)](this),this[_0x82168a(0x94b)]();},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Battle_start']=Scene_Battle['prototype']['start'],Scene_Battle['prototype'][_0x4a80d9(0xc54)]=function(){const _0x52d6c3=_0x4a80d9;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message['prototype'][_0x52d6c3(0xc54)][_0x52d6c3(0x432)](this),this[_0x52d6c3(0x967)]&&this[_0x52d6c3(0x967)]['update'](),BattleManager[_0x52d6c3(0x37c)]&&BattleManager[_0x52d6c3(0xc86)]()):(VisuMZ[_0x52d6c3(0xbe1)][_0x52d6c3(0xc81)][_0x52d6c3(0x432)](this),$gameTroop[_0x52d6c3(0x192)]());},VisuMZ['BattleCore'][_0x4a80d9(0x818)]=Scene_Battle['prototype'][_0x4a80d9(0xa65)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xa65)]=function(){const _0x5cec64=_0x4a80d9;SceneManager[_0x5cec64(0xb5a)]()?Scene_Message[_0x5cec64(0xba6)]['stop'][_0x5cec64(0x432)](this):VisuMZ[_0x5cec64(0xbe1)][_0x5cec64(0x818)]['call'](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5de)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x62e)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x62e)]=function(){const _0x2d05bb=_0x4a80d9;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x2d05bb(0xba6)]['terminate'][_0x2d05bb(0x432)](this):VisuMZ[_0x2d05bb(0xbe1)][_0x2d05bb(0x5de)][_0x2d05bb(0x432)](this),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x23a)]=function(){const _0x4012ed=_0x4a80d9;if(ConfigManager[_0x4012ed(0x2ab)]&&ConfigManager[_0x4012ed(0xc6e)]!==undefined)return ConfigManager[_0x4012ed(0xc6e)];else{if(this['battleLayoutStyle']()===_0x4012ed(0x33a)){if('ovCkV'!==_0x4012ed(0x92e))return![];else{if(!_0x218e10[_0x4012ed(0x1f8)]())return;const _0x24ae52=_0x4bef25['_logWindow'];_0x24ae52[_0x4012ed(0x1d6)]();}}else{if(_0x4012ed(0x831)!==_0x4012ed(0x831))this[_0x4012ed(0x4cf)](),_0x5ebfae[_0x4012ed(0xbe1)][_0x4012ed(0xa45)][_0x4012ed(0x432)](this),this['createAutoBattleWindow']();else{return Scene_Message[_0x4012ed(0xba6)][_0x4012ed(0x23a)][_0x4012ed(0x432)](this);;}}}},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xc70)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xc70)]=function(){const _0x7ff57a=_0x4a80d9;this['createEnemyNameContainer'](),VisuMZ[_0x7ff57a(0xbe1)][_0x7ff57a(0xa45)][_0x7ff57a(0x432)](this),this[_0x7ff57a(0x297)]();},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Battle_createEnemyWindow']=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x317)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x317)]=function(){const _0x409407=_0x4a80d9;VisuMZ[_0x409407(0xbe1)][_0x409407(0xc4e)][_0x409407(0x432)](this),this[_0x409407(0xb02)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb02)]=function(){const _0x3d26cc=_0x4a80d9;this['createMultiTargetWindow'](!![]),this[_0x3d26cc(0x6cf)](![]);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xac7)]=function(_0x223973){const _0xe6816c=_0x4a80d9,_0x4c1449=Window_BattleMultiTarget[_0xe6816c(0x2eb)],_0x2c8b2a=this[_0xe6816c(0xb3a)](0x1,!![]);let _0x4bb47=_0x223973?Graphics['boxWidth']-_0x4c1449:0x0;_0x4bb47+=_0x223973?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x147fbf=[_0xe6816c(0x812)][_0xe6816c(0xcf9)](this['battleLayoutStyle']())?0x0:this[_0xe6816c(0x989)][_0xe6816c(0x8dc)];let _0x6fb4d6=Graphics[_0xe6816c(0x91f)]-_0x147fbf-_0x2c8b2a;return _0x6fb4d6+=_0x223973?Window_BattleMultiTarget[_0xe6816c(0x941)]:Window_BattleMultiTarget[_0xe6816c(0xafd)],new Rectangle(_0x4bb47,_0x6fb4d6,_0x4c1449,_0x2c8b2a);},Scene_Battle[_0x4a80d9(0xba6)]['createMultiTargetWindow']=function(_0x52f8fc){const _0xb82fb0=_0x4a80d9,_0x50b820=this[_0xb82fb0(0xac7)](_0x52f8fc),_0x4466c4=new Window_BattleMultiTarget(_0x50b820,_0x52f8fc);this['addWindow'](_0x4466c4);if(_0x52f8fc){if(_0xb82fb0(0xc7c)!==_0xb82fb0(0x7bf))this[_0xb82fb0(0x13b)]=_0x4466c4;else for(const _0x21f281 of _0x5be8df){const _0x4feb32=_0x45609b[0x0]['format'](_0x21f281[0x0]),_0x25e2e0=_0x592c74[0x1][_0xb82fb0(0x7d6)](_0x21f281[0x1]),_0x362eab=new _0x125fac(_0x3c7ce6[_0xb82fb0(0x7d6)](_0x25e2e0),'i');_0x26c9c9[_0x4feb32]=_0x362eab;}}else this[_0xb82fb0(0xc39)]=_0x4466c4;},VisuMZ['BattleCore'][_0x4a80d9(0x448)]=Scene_Battle[_0x4a80d9(0xba6)]['createCancelButton'],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xc9a)]=function(){const _0x138c21=_0x4a80d9;VisuMZ[_0x138c21(0xbe1)][_0x138c21(0x448)]['call'](this),this[_0x138c21(0x4bb)]()===_0x138c21(0x33a)&&(_0x138c21(0x17c)!==_0x138c21(0x17c)?this[_0x138c21(0x622)](_0x22945a[_0x138c21(0xa03)],0x0):this[_0x138c21(0x328)]());},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x984)]=function(_0x3ca8ec){const _0x5b5759=_0x4a80d9;_0x3ca8ec?(this[_0x5b5759(0xc02)]['x']=(Graphics[_0x5b5759(0x2ce)]-Graphics[_0x5b5759(0x84d)])/0x2,this[_0x5b5759(0xc02)]['y']=(Graphics[_0x5b5759(0x8dc)]-Graphics['boxHeight'])/0x2):(this[_0x5b5759(0xc02)]['x']=Graphics[_0x5b5759(0x2ce)]*0xa,this[_0x5b5759(0xc02)]['y']=Graphics[_0x5b5759(0x8dc)]*0xa);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x376)]=Scene_Battle['prototype'][_0x4a80d9(0x75b)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x75b)]=function(){const _0x2c7ad5=_0x4a80d9,_0x51f417=BattleManager[_0x2c7ad5(0x442)]();VisuMZ[_0x2c7ad5(0xbe1)][_0x2c7ad5(0x376)]['call'](this);if(_0x51f417){if(_0x51f417===BattleManager[_0x2c7ad5(0x442)]())return;if(_0x51f417===BattleManager[_0x2c7ad5(0x139)])return;if(_0x51f417[_0x2c7ad5(0x997)]())_0x51f417['battler']()[_0x2c7ad5(0x467)]();}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x866)]=Scene_Battle[_0x4a80d9(0xba6)]['selectPreviousCommand'],Scene_Battle['prototype'][_0x4a80d9(0xa24)]=function(){const _0x591832=_0x4a80d9,_0x54c271=BattleManager[_0x591832(0x442)]();if(_0x54c271&&_0x54c271[_0x591832(0x997)])_0x54c271[_0x591832(0x997)]()[_0x591832(0x467)]();VisuMZ[_0x591832(0xbe1)][_0x591832(0x866)]['call'](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x85e)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9da)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9da)]=function(){const _0x53de31=_0x4a80d9;if(VisuMZ[_0x53de31(0xbe1)][_0x53de31(0x668)][_0x53de31(0x47d)]['BattleLogRectJS']){if(_0x53de31(0x721)===_0x53de31(0x3f5))_0x36f43e[_0x53de31(0x498)](_0x53de31(0x815));else return VisuMZ[_0x53de31(0xbe1)][_0x53de31(0x668)][_0x53de31(0x47d)]['BattleLogRectJS'][_0x53de31(0x432)](this);}return VisuMZ['BattleCore'][_0x53de31(0x85e)][_0x53de31(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x956)]=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0x57c199=_0x4a80d9;VisuMZ[_0x57c199(0xbe1)][_0x57c199(0x956)][_0x57c199(0x432)](this),this[_0x57c199(0x5e5)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x5e5)]=function(){const _0x164a1a=_0x4a80d9,_0x4c6e2a=this[_0x164a1a(0xa13)];_0x4c6e2a[_0x164a1a(0xc53)](_0x164a1a(0x7f7),this[_0x164a1a(0x58f)]['bind'](this)),_0x4c6e2a[_0x164a1a(0xc53)](_0x164a1a(0x51f),this['commandOptions'][_0x164a1a(0x88a)](this));const _0x4245e7=this[_0x164a1a(0x4bb)]();switch(_0x4245e7){case'xp':case _0x164a1a(0x120):return this[_0x164a1a(0xa13)][_0x164a1a(0xb45)](0x1);break;}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x58f)]=function(){const _0x2db4ec=_0x4a80d9;BattleManager['_autoBattle']=!![],$gameParty[_0x2db4ec(0x44f)](),this[_0x2db4ec(0x75b)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x3f2)]=function(){const _0xc324b2=_0x4a80d9;this[_0xc324b2(0x31e)]()?_0xc324b2(0x8c7)!==_0xc324b2(0x98a)?(this[_0xc324b2(0x5f3)]=!![],this[_0xc324b2(0x2d4)]['push']('addText',VisuMZ[_0xc324b2(0xbe1)][_0xc324b2(0x668)]['PartyCmd'][_0xc324b2(0x92b)])):_0x30ff4d=_0x836256['x']+_0x249363[_0xc324b2(0x5a6)]+0x8:this['callOptions']();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x31e)]=function(){const _0x5d8191=_0x4a80d9;return BattleManager[_0x5d8191(0x58e)]();},Scene_Battle['prototype'][_0x4a80d9(0x643)]=function(){const _0x4aa4ad=_0x4a80d9;this['_callSceneOptions']=![],this[_0x4aa4ad(0x967)][_0x4aa4ad(0x333)](),this[_0x4aa4ad(0xc02)]['visible']=![];if(BattleManager['isBattleTest']())($dataSystem[_0x4aa4ad(0x2db)]||$dataSystem[_0x4aa4ad(0x75e)])&&(_0x4aa4ad(0x2da)===_0x4aa4ad(0xbb0)?this['_cursorArea'][_0x4aa4ad(0x83f)]=![]:SceneManager[_0x4aa4ad(0x924)]());else($gameMap[_0x4aa4ad(0x2db)]()||$gameMap[_0x4aa4ad(0x75e)]())&&SceneManager[_0x4aa4ad(0x924)]();SceneManager[_0x4aa4ad(0x510)](Scene_Options);if(BattleManager[_0x4aa4ad(0x800)]()){if('QoVpi'!==_0x4aa4ad(0xa5c)){if(!_0x1dc316[_0x4aa4ad(0x1f8)]())return;if(!_0x465a18[_0x4aa4ad(0x392)])return;_0x41f502[_0x4aa4ad(0xb1e)](_0x3f9650,_0x581e9e);const _0x6dafaa=_0x45f636[_0x4aa4ad(0x287)],_0x1cda47=_0x3695ea['Elements'];if(!_0x6dafaa)return;_0x6dafaa[_0x4aa4ad(0x44e)]=_0x1cda47;}else BattleManager[_0x4aa4ad(0x37c)]=BattleManager[_0x4aa4ad(0x442)]();}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x47b)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb09)],Scene_Battle[_0x4a80d9(0xba6)]['updateBattleProcess']=function(){const _0x43d9b8=_0x4a80d9;VisuMZ[_0x43d9b8(0xbe1)][_0x43d9b8(0x47b)][_0x43d9b8(0x432)](this);if(this['_callSceneOptions']&&!BattleManager[_0x43d9b8(0x139)])this[_0x43d9b8(0x643)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbdb)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x333)],Scene_Battle['prototype'][_0x4a80d9(0x333)]=function(){const _0x1d4436=_0x4a80d9;VisuMZ['BattleCore'][_0x1d4436(0xbdb)][_0x1d4436(0x432)](this),this[_0x1d4436(0x5c7)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x297)]=function(){const _0x31362d=_0x4a80d9,_0x584685=this[_0x31362d(0x229)]();this[_0x31362d(0x69a)]=new Window_AutoBattleCancel(_0x584685),this[_0x31362d(0x69a)][_0x31362d(0x670)](),this['addChild'](this[_0x31362d(0x69a)]);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x229)]=function(){const _0x393413=_0x4a80d9;return VisuMZ[_0x393413(0xbe1)]['Settings'][_0x393413(0x51b)]['AutoBattleRect'][_0x393413(0x432)](this);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x94b)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x5c7)]=function(){const _0x14eb6e=_0x4a80d9;if(!this[_0x14eb6e(0x62f)])return;for(const _0x18f014 of this[_0x14eb6e(0x62f)]){_0x18f014&&_0x18f014[_0x14eb6e(0x333)]();}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb2c)]=function(_0x533d88){const _0x4803ba=_0x4a80d9,_0x3d6bf1=$dataCommonEvents[_0x533d88];if(!_0x3d6bf1)return;const _0x46eace=new Game_BattleOnceParallelInterpreter();this[_0x4803ba(0x477)](_0x46eace),_0x46eace['setCommonEvent'](_0x533d88);},Scene_Battle['prototype'][_0x4a80d9(0x477)]=function(_0x144f80){const _0x28e285=_0x4a80d9;this[_0x28e285(0x62f)]=this[_0x28e285(0x62f)]||[],this[_0x28e285(0x62f)][_0x28e285(0x510)](_0x144f80);},Scene_Battle[_0x4a80d9(0xba6)]['removeOnceParallelInterpreter']=function(_0xd7cc78){const _0x448f82=_0x4a80d9;this[_0x448f82(0x62f)]=this[_0x448f82(0x62f)]||[],this[_0x448f82(0x62f)]['remove'](_0xd7cc78);},Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x192)]=function(){const _0x43036d=_0x4a80d9;for(const _0x50a4cf of this[_0x43036d(0x598)]()[_0x43036d(0x725)]){if(!this[_0x43036d(0x72b)](_0x50a4cf))continue;SceneManager[_0x43036d(0xb97)][_0x43036d(0x456)](_0x50a4cf);}},Game_Troop[_0x4a80d9(0xba6)][_0x4a80d9(0x72b)]=function(_0x7813ad){const _0x228620=_0x4a80d9;if(!_0x7813ad)return;for(const _0x56b1ea of _0x7813ad[_0x228620(0xa03)]){if(_0x228620(0x797)===_0x228620(0x797)){if([0x6c,0x198][_0x228620(0xcf9)](_0x56b1ea[_0x228620(0x923)])){const _0x1d4747=_0x56b1ea[_0x228620(0xa51)][0x0];if(_0x1d4747[_0x228620(0x605)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else this[_0x228620(0x337)]=this[_0x228620(0xb9c)],this['_growY']=this[_0x228620(0x726)];}return![];},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x456)]=function(_0x1e6035){const _0x4468b4=_0x4a80d9;if(!_0x1e6035)return;const _0x35b3d8=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x35b3d8),_0x35b3d8[_0x4468b4(0xbcc)](_0x1e6035);};function Game_BattleOnceParallelInterpreter(){const _0xf8b6d5=_0x4a80d9;this[_0xf8b6d5(0x54a)](...arguments);}Game_BattleOnceParallelInterpreter[_0x4a80d9(0xba6)]=Object[_0x4a80d9(0x5e8)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter['prototype']['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x251)]=function(_0x10dab4){const _0x28785c=_0x4a80d9,_0x245b48=$dataCommonEvents[_0x10dab4];_0x245b48?this[_0x28785c(0x622)](_0x245b48[_0x28785c(0xa03)],0x0):this[_0x28785c(0x62e)]();},Game_BattleOnceParallelInterpreter['prototype']['terminate']=function(){const _0x5c134f=_0x4a80d9;if(!SceneManager['isSceneBattle']())return;SceneManager['_scene'][_0x5c134f(0xcda)](this),Game_Interpreter[_0x5c134f(0xba6)]['terminate'][_0x5c134f(0x432)](this);},Game_BattleOnceParallelInterpreter[_0x4a80d9(0xba6)][_0x4a80d9(0xbcc)]=function(_0x33a5ec){const _0x9ad87e=_0x4a80d9;_0x33a5ec?_0x9ad87e(0x677)!=='IoGpd'?_0x2941cc[_0x9ad87e(0xba6)][_0x9ad87e(0x28d)][_0x9ad87e(0x432)](this):this[_0x9ad87e(0x622)](_0x33a5ec[_0x9ad87e(0xa03)],0x0):this[_0x9ad87e(0x62e)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x6a5)]=function(){const _0x54052f=_0x4a80d9;return VisuMZ['BattleCore'][_0x54052f(0x668)][_0x54052f(0x24b)][_0x54052f(0xbd8)];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x11a)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x5d5)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x5d5)]=function(){const _0x40f56f=_0x4a80d9;if(this['isPartyCommandWindowDisabled']())this[_0x40f56f(0xbe8)]();else{if(_0x40f56f(0xb5f)!==_0x40f56f(0x9ca))VisuMZ[_0x40f56f(0xbe1)][_0x40f56f(0x11a)]['call'](this);else{if(!_0x297d07[_0x40f56f(0x7d7)]()){const _0x568e6c=_0x11281f['regionId'](_0x31e599['x'],_0x18ae99['y']);if(this[_0x40f56f(0x82e)]&&this[_0x40f56f(0x6d0)][_0x568e6c])return this[_0x40f56f(0x6d0)][_0x568e6c];}return _0x39b3f0[_0x40f56f(0xbe1)][_0x40f56f(0x8fa)]['call'](this);}}},Scene_Battle[_0x4a80d9(0xba6)]['onDisabledPartyCommandSelection']=function(){const _0x21cfa0=_0x4a80d9;if(BattleManager[_0x21cfa0(0x8a6)]())'fgUky'!==_0x21cfa0(0x520)?this[_0x21cfa0(0x7b7)]():this['selectNextCommand']();else BattleManager[_0x21cfa0(0x800)]()&&(_0x21cfa0(0xaf1)!==_0x21cfa0(0x2ac)?VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection'][_0x21cfa0(0x432)](this):this[_0x21cfa0(0x6f5)]());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x313)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9d7)],Scene_Battle[_0x4a80d9(0xba6)]['commandFight']=function(){const _0x18115a=_0x4a80d9;BattleManager[_0x18115a(0x800)]()?(this['tpbCommandFight'](),this[_0x18115a(0xc2f)]()):VisuMZ[_0x18115a(0xbe1)][_0x18115a(0x313)][_0x18115a(0x432)](this);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x2ad)]=function(){const _0x42ab49=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x42ab49(0xbe3)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return;const _0x2cfed0=$gameParty[_0x42ab49(0x564)]()[_0x42ab49(0x435)](_0x13996d=>_0x13996d[_0x42ab49(0x972)]()&&_0x13996d[_0x42ab49(0xb3c)]());BattleManager[_0x42ab49(0x9e0)]=_0x2cfed0[0x0]||null,BattleManager[_0x42ab49(0x9e0)]&&BattleManager[_0x42ab49(0x9e0)][_0x42ab49(0x308)](_0x42ab49(0xc0c));},VisuMZ['BattleCore'][_0x4a80d9(0x322)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x1db)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x1db)]=function(){const _0x269192=_0x4a80d9;VisuMZ[_0x269192(0xbe1)][_0x269192(0x322)][_0x269192(0x432)](this),this[_0x269192(0x1ca)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x1ca)]=function(){const _0x17a428=_0x4a80d9,_0x3e6ea2=this[_0x17a428(0x5bc)];_0x3e6ea2[_0x17a428(0xc53)](_0x17a428(0xc41),this[_0x17a428(0x257)][_0x17a428(0x88a)](this)),_0x3e6ea2['setHandler'](_0x17a428(0x7f7),this[_0x17a428(0xae4)][_0x17a428(0x88a)](this)),_0x3e6ea2[_0x17a428(0xc53)](_0x17a428(0xafe),this['actorCommandSingleSkill'][_0x17a428(0x88a)](this));if(BattleManager['isTpb']()){if(_0x17a428(0x85f)===_0x17a428(0x346)){const _0x5c555b=this[_0x17a428(0x547)][_0x17a428(0x438)](),_0xa4151f=_0x5c555b[_0x17a428(0x435)](_0x416fe2=>_0xcc32b3[_0x17a428(0x62c)](_0x24137e)[_0x17a428(0xcf9)](_0x416fe2));return _0xa4151f[_0x17a428(0x6fc)]<=0x0;}else this[_0x17a428(0x6a5)]()?delete _0x3e6ea2[_0x17a428(0x44d)][_0x17a428(0x645)]:_0x3e6ea2[_0x17a428(0xc53)]('cancel',this['actorCommandCancelTPB'][_0x17a428(0x88a)](this));}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x257)]=function(){const _0xc00955=_0x4a80d9;this[_0xc00955(0x940)]();},Scene_Battle['prototype'][_0x4a80d9(0xae4)]=function(){const _0x4b45a2=_0x4a80d9;BattleManager['actor']()[_0x4b45a2(0x533)](),BattleManager[_0x4b45a2(0x9cf)](),BattleManager['selectNextActor'](),this['changeInputWindow']();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x825)]=function(){const _0x251a17=_0x4a80d9,_0x82d1c8=BattleManager[_0x251a17(0x642)](),_0x16cf9a=this[_0x251a17(0x5bc)][_0x251a17(0xc20)]();_0x82d1c8[_0x251a17(0xa84)](_0x16cf9a),BattleManager['actor']()['setLastBattleSkill']($dataSkills[_0x16cf9a]),this[_0x251a17(0x62d)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x1f2)]=function(){const _0x54cfe9=_0x4a80d9;this['tpbActorSwitchConditionsMet']()?this[_0x54cfe9(0xb99)]():this['processActorCommandCancelTPB']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbe3)]=![],Scene_Battle[_0x4a80d9(0xba6)]['tpbActorSwitchConditionsMet']=function(){const _0x5dfb31=_0x4a80d9;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x5dfb31(0x963)]())return![];else{if(!VisuMZ['BattleCore'][_0x5dfb31(0xbe3)])return![];const _0x441ea8=$gameParty[_0x5dfb31(0x564)]()[_0x5dfb31(0x435)](_0x429f62=>_0x429f62[_0x5dfb31(0x972)]()&&_0x429f62[_0x5dfb31(0xb3c)]());return _0x441ea8[_0x5dfb31(0x6fc)]>0x0&&BattleManager[_0x5dfb31(0x442)]()!==_0x441ea8[_0x441ea8['length']-0x1];}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb99)]=function(){const _0x2f471c=_0x4a80d9,_0x1477f6=BattleManager[_0x2f471c(0x442)](),_0x133de9=_0x1477f6[_0x2f471c(0x997)]();if(_0x133de9)_0x133de9[_0x2f471c(0x467)]();const _0x521c20=$gameParty[_0x2f471c(0x564)]()['filter'](_0x5c17eb=>_0x5c17eb['isTpbCharged']()&&_0x5c17eb['canInput']()),_0x4b1aeb=_0x521c20[_0x2f471c(0x699)](_0x1477f6),_0x410429=_0x521c20[_0x4b1aeb+0x1];BattleManager[_0x2f471c(0x9e0)]=_0x410429||null;if(_0x410429)_0x410429[_0x2f471c(0x308)](_0x2f471c(0xc0c));_0x1477f6[_0x2f471c(0x308)](_0x2f471c(0x6e0)),this[_0x2f471c(0x806)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb0a)]=function(){const _0xffebae=_0x4a80d9;this[_0xffebae(0xa13)][_0xffebae(0x622)](),this[_0xffebae(0x5bc)]['close']();if(!VisuMZ[_0xffebae(0xbe1)][_0xffebae(0xbe3)])return;if(Imported[_0xffebae(0xbd4)]&&BattleManager['isCTB']())return;if(BattleManager[_0xffebae(0x9e0)]){BattleManager[_0xffebae(0x9e0)][_0xffebae(0x308)](_0xffebae(0x6e0));const _0xeccb05=BattleManager[_0xffebae(0x9e0)][_0xffebae(0x997)]();if(_0xeccb05)_0xeccb05[_0xffebae(0x467)]();}BattleManager[_0xffebae(0x9e0)]=null;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x85a)]=Scene_Battle[_0x4a80d9(0xba6)]['createHelpWindow'],Scene_Battle[_0x4a80d9(0xba6)]['createHelpWindow']=function(){const _0x346639=_0x4a80d9;VisuMZ[_0x346639(0xbe1)][_0x346639(0x85a)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x73d)]=function(){const _0x424081=_0x4a80d9;this['_actorCommandWindow'][_0x424081(0xabe)](this['_helpWindow']),this[_0x424081(0xa13)][_0x424081(0xabe)](this[_0x424081(0x676)]);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x4bb)]=function(){const _0x4c31a7=_0x4a80d9;if($gameTemp[_0x4c31a7(0x93f)]!==undefined)return $gameTemp[_0x4c31a7(0x93f)];if(this[_0x4c31a7(0x796)])return this[_0x4c31a7(0x796)];return this[_0x4c31a7(0x796)]=VisuMZ[_0x4c31a7(0xbe1)][_0x4c31a7(0x668)][_0x4c31a7(0x7c4)][_0x4c31a7(0x7ad)][_0x4c31a7(0x303)]()['trim'](),this[_0x4c31a7(0x796)]==='sideview_ui'&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x4c31a7(0x796)]='default'),this[_0x4c31a7(0x796)]===_0x4c31a7(0x812)&&!Imported[_0x4c31a7(0x11b)]&&(_0x4c31a7(0xb21)!==_0x4c31a7(0xb21)?(_0x1e4878['BattleCore'][_0x4c31a7(0x759)][_0x4c31a7(0x432)](this),this[_0x4c31a7(0x63a)]()):this[_0x4c31a7(0x796)]='default'),this[_0x4c31a7(0x796)];},VisuMZ['BattleCore'][_0x4a80d9(0x627)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x424)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x424)]=function(){const _0x5b19b5=_0x4a80d9,_0x4c20f1=this['battleLayoutStyle']();switch(_0x4c20f1){case _0x5b19b5(0xa03):return this[_0x5b19b5(0xb3a)](Math[_0x5b19b5(0x78c)](0x1,$gameParty[_0x5b19b5(0xab7)]()),!![]);break;default:return VisuMZ[_0x5b19b5(0xbe1)][_0x5b19b5(0x627)]['call'](this);break;}},VisuMZ['BattleCore']['Scene_Battle_helpWindowRect']=Scene_Battle['prototype'][_0x4a80d9(0xcd7)],Scene_Battle['prototype'][_0x4a80d9(0xcd7)]=function(){const _0x2355ab=_0x4a80d9,_0x1a5cc5=this[_0x2355ab(0x4bb)]();switch(_0x1a5cc5){case _0x2355ab(0x33a):return this[_0x2355ab(0x3ec)]();break;case _0x2355ab(0x7e5):case _0x2355ab(0xa03):case'xp':case _0x2355ab(0x120):default:return VisuMZ[_0x2355ab(0xbe1)][_0x2355ab(0xb5d)][_0x2355ab(0x432)](this);break;}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x4ba)]=function(){const _0x47ba33=_0x4a80d9,_0xe3df89=this[_0x47ba33(0x4bb)]();switch(_0xe3df89){case'xp':case'portrait':return this[_0x47ba33(0x840)]();break;case _0x47ba33(0x33a):return this[_0x47ba33(0xb08)]();break;case _0x47ba33(0x7e5):case'list':default:return this[_0x47ba33(0xce1)]();break;}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x994)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x522)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x522)]=function(){const _0x1fc53b=_0x4a80d9,_0x4c3872=this[_0x1fc53b(0x4bb)]();switch(_0x4c3872){case'xp':case'portrait':return this['partyCommandWindowRectXPStyle']();break;case _0x1fc53b(0x33a):return this[_0x1fc53b(0x5a8)]();case _0x1fc53b(0x7e5):case'list':default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x57a)]=function(){const _0x3183b8=_0x4a80d9,_0x1f92b4=VisuMZ[_0x3183b8(0xbe1)][_0x3183b8(0x668)][_0x3183b8(0x7c4)],_0x7c7542=_0x1f92b4[_0x3183b8(0xbbc)]||0xc0,_0x33e3b1=this['windowAreaHeight'](),_0x1c38c0=this[_0x3183b8(0x23a)]()?Graphics[_0x3183b8(0x84d)]-_0x7c7542:0x0,_0x195b2f=Graphics['boxHeight']-_0x33e3b1;return new Rectangle(_0x1c38c0,_0x195b2f,_0x7c7542,_0x33e3b1);},Scene_Battle[_0x4a80d9(0xba6)]['actorCommandWindowRect']=function(){const _0x2d6fe1=_0x4a80d9;return this[_0x2d6fe1(0x522)]();},VisuMZ['BattleCore'][_0x4a80d9(0x239)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x327)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x327)]=function(){const _0x1a9a36=_0x4a80d9,_0x17c720=this[_0x1a9a36(0x4bb)]();switch(_0x17c720){case'xp':case _0x1a9a36(0x120):case _0x1a9a36(0x33a):break;case _0x1a9a36(0x7e5):case _0x1a9a36(0xa03):default:VisuMZ[_0x1a9a36(0xbe1)][_0x1a9a36(0x239)][_0x1a9a36(0x432)](this);break;}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x746)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x301)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x301)]=function(){const _0xc458c4=_0x4a80d9;VisuMZ[_0xc458c4(0xbe1)][_0xc458c4(0x746)][_0xc458c4(0x432)](this),this[_0xc458c4(0x521)]();},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x4a80d9(0xba6)]['startEnemySelection'],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x97a)]=function(){const _0x2e9dc1=_0x4a80d9;VisuMZ[_0x2e9dc1(0xbe1)]['Scene_Battle_startEnemySelection']['call'](this),this[_0x2e9dc1(0x9bc)][_0x2e9dc1(0xa26)](),this[_0x2e9dc1(0x521)]();},Scene_Battle[_0x4a80d9(0xba6)]['makeTargetSelectionMoreVisible']=function(){const _0x4996ed=_0x4a80d9,_0x326e82=this[_0x4996ed(0x4bb)]();['xp',_0x4996ed(0x120),_0x4996ed(0x33a)][_0x4996ed(0xcf9)](_0x326e82)&&this[_0x4996ed(0x5bc)]['close'](),(_0x326e82===_0x4996ed(0x33a)||this[_0x4996ed(0xb78)]())&&(this[_0x4996ed(0xbf9)][_0x4996ed(0xc2a)](),this['_itemWindow'][_0x4996ed(0xc2a)]());},VisuMZ[_0x4a80d9(0xbe1)]['Scene_Battle_onActorOk']=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x6ad)],Scene_Battle['prototype'][_0x4a80d9(0x6ad)]=function(){const _0x2dd6df=_0x4a80d9;VisuMZ[_0x2dd6df(0xbe1)][_0x2dd6df(0x82a)][_0x2dd6df(0x432)](this),this[_0x2dd6df(0x345)]();},Scene_Battle[_0x4a80d9(0xba6)]['isNonSubmenuCancel']=function(){const _0x3b1c6f=_0x4a80d9;return[_0x3b1c6f(0x365),_0x3b1c6f(0x79a),_0x3b1c6f(0xafe)][_0x3b1c6f(0xcf9)](this[_0x3b1c6f(0x5bc)]['currentSymbol']());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x881)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x685)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x685)]=function(){const _0x472e8c=_0x4a80d9;this[_0x472e8c(0x505)]()?(this['_statusWindow']['show'](),this[_0x472e8c(0xcc2)][_0x472e8c(0x670)](),this[_0x472e8c(0x5bc)][_0x472e8c(0xbe7)]()):VisuMZ[_0x472e8c(0xbe1)][_0x472e8c(0x881)][_0x472e8c(0x432)](this),this[_0x472e8c(0xb53)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb91)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb1f)],Scene_Battle['prototype'][_0x4a80d9(0xb1f)]=function(){const _0x182c03=_0x4a80d9,_0x4e9981=BattleManager['inputtingAction']();_0x4e9981['setTargetBattlerKey'](this[_0x182c03(0x9bc)][_0x182c03(0x378)]()),this[_0x182c03(0x9bc)]['closeBattleActorWindow'](),VisuMZ[_0x182c03(0xbe1)]['Scene_Battle_onEnemyOk'][_0x182c03(0x432)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x4a80d9(0xba6)]['onEnemyCancel'],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x6a2)]=function(){const _0x446960=_0x4a80d9;this[_0x446960(0x505)]()?(this['_statusWindow']['show'](),this[_0x446960(0x9bc)][_0x446960(0x670)](),this[_0x446960(0x5bc)]['activate']()):VisuMZ['BattleCore'][_0x446960(0x3af)][_0x446960(0x432)](this),this['cancelTargetSelectionVisibility'](),this[_0x446960(0x9bc)][_0x446960(0xc31)]();},Scene_Battle['prototype'][_0x4a80d9(0x345)]=function(){const _0x882294=_0x4a80d9,_0x54bced=this[_0x882294(0x4bb)]();(_0x54bced===_0x882294(0x33a)||this[_0x882294(0xb78)]())&&(_0x882294(0x165)!==_0x882294(0x165)?this['drawTextEx'](_0x41491a,_0x497798['x'],_0x13e202['y'],_0x1f894d):(this[_0x882294(0xbf9)][_0x882294(0x9ce)](),this[_0x882294(0xbf9)]['active']&&(_0x882294(0x649)==='ShYLI'?this[_0x882294(0xbf9)][_0x882294(0x3a5)]():(this[_0x882294(0x690)]['x']=this[_0x882294(0x2ce)],this['_borderPortraitTargetX']=this[_0x882294(0x2ce)]*0x3/0x4)),this[_0x882294(0x542)][_0x882294(0x9ce)](),this[_0x882294(0x542)]['active']&&this[_0x882294(0x542)]['show']()));},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb53)]=function(){const _0x15d65c=_0x4a80d9,_0x1d22fe=this[_0x15d65c(0x4bb)]();['xp',_0x15d65c(0x120),_0x15d65c(0x33a)]['includes'](_0x1d22fe)&&this[_0x15d65c(0x5bc)][_0x15d65c(0x9ce)](),this[_0x15d65c(0x345)]();},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xce1)]=function(){const _0x5bb7a3=_0x4a80d9,_0x1353e5=VisuMZ[_0x5bb7a3(0xbe1)][_0x5bb7a3(0x668)][_0x5bb7a3(0x7c4)],_0x2bea59=Window_BattleStatus[_0x5bb7a3(0xba6)][_0x5bb7a3(0xb67)](),_0x2f61f6=Graphics['boxWidth']-(_0x1353e5['CommandWidth']||0xc0),_0x4ed28e=this['windowAreaHeight']()+_0x2bea59,_0x63c276=this[_0x5bb7a3(0x23a)]()?0x0:Graphics[_0x5bb7a3(0x84d)]-_0x2f61f6,_0x21efab=Graphics[_0x5bb7a3(0x91f)]-_0x4ed28e+_0x2bea59;return new Rectangle(_0x63c276,_0x21efab,_0x2f61f6,_0x4ed28e);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x840)]=function(){const _0x594144=_0x4a80d9,_0xbf417a=Window_BattleStatus['prototype'][_0x594144(0xb67)](),_0x27de9c=Graphics[_0x594144(0x84d)],_0x38cd43=this[_0x594144(0x424)]()+_0xbf417a,_0x3292da=0x0,_0x49c4fd=Graphics[_0x594144(0x91f)]-_0x38cd43+_0xbf417a;return new Rectangle(_0x3292da,_0x49c4fd,_0x27de9c,_0x38cd43);},Scene_Battle['prototype'][_0x4a80d9(0xc28)]=function(){const _0x580c23=_0x4a80d9,_0x5b72c0=Graphics['boxWidth']/0x2,_0x208450=this[_0x580c23(0xb3a)](VisuMZ[_0x580c23(0xbe1)][_0x580c23(0x668)][_0x580c23(0x7c4)][_0x580c23(0xaf5)],!![]),_0x41173c=Math[_0x580c23(0x961)]((Graphics[_0x580c23(0x84d)]-_0x5b72c0)/0x2),_0x1d54b8=Graphics[_0x580c23(0x91f)]-_0x208450-this['statusWindowRectXPStyle']()[_0x580c23(0x8dc)];return new Rectangle(_0x41173c,_0x1d54b8,_0x5b72c0,_0x208450);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x3ec)]=function(){const _0x80a748=_0x4a80d9,_0xa496c3=Graphics[_0x80a748(0x2ce)],_0x47dc9d=Math['round']((Graphics[_0x80a748(0x84d)]-_0xa496c3)/0x2),_0x5245c8=this[_0x80a748(0xce2)](),_0x48c79c=(Graphics[_0x80a748(0x8dc)]-Graphics[_0x80a748(0x91f)])/-0x2;return new Rectangle(_0x47dc9d,_0x48c79c,_0xa496c3,_0x5245c8);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb08)]=function(){const _0x2b2ef6=_0x4a80d9,_0xb94251=Graphics['width'],_0xcad111=Math['round']((Graphics[_0x2b2ef6(0x84d)]-_0xb94251)/0x2),_0x4c084d=this[_0x2b2ef6(0xb3a)](0x4,!![]),_0x2d6d4c=Graphics[_0x2b2ef6(0x91f)]-_0x4c084d+(Graphics[_0x2b2ef6(0x8dc)]-Graphics[_0x2b2ef6(0x91f)])/0x2;return new Rectangle(_0xcad111,_0x2d6d4c,_0xb94251,_0x4c084d);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x5a8)]=function(){const _0x4bc894=_0x4a80d9,_0x4344e7=Math[_0x4bc894(0x506)](Graphics[_0x4bc894(0x2ce)]/0x3),_0x346a6c=this[_0x4bc894(0x23a)]()?(Graphics[_0x4bc894(0x2ce)]+Graphics[_0x4bc894(0x84d)])/0x2-_0x4344e7:(Graphics[_0x4bc894(0x2ce)]-Graphics[_0x4bc894(0x84d)])/-0x2,_0x2cfef6=this[_0x4bc894(0x3ec)](),_0x18a596=_0x2cfef6['y']+_0x2cfef6[_0x4bc894(0x8dc)],_0xf59298=this[_0x4bc894(0xb08)](),_0x4049c0=_0xf59298['y']-_0x18a596;return new Rectangle(_0x346a6c,_0x18a596,_0x4344e7,_0x4049c0);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x876)]=function(){const _0x57ef73=_0x4a80d9,_0x7ee6a0=Math[_0x57ef73(0xbf1)](Graphics[_0x57ef73(0x2ce)]/0x3),_0xf758a9=Math[_0x57ef73(0x961)]((Graphics[_0x57ef73(0x84d)]-_0x7ee6a0)/0x2),_0x278ab0=this['partyCommandWindowRectBorderStyle'](),_0x442e34=_0x278ab0['y'],_0x2c7fb7=_0x278ab0['height'];return new Rectangle(_0xf758a9,_0x442e34,_0x7ee6a0,_0x2c7fb7);},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x328)]=function(){const _0x510c7a=_0x4a80d9;this[_0x510c7a(0x206)]['y']=this[_0x510c7a(0x676)]['y']+this[_0x510c7a(0x676)]['height'];if(this['isRightInputMode']()){if(this[_0x510c7a(0x4bb)]()===_0x510c7a(0x33a)){if(_0x510c7a(0x52e)!==_0x510c7a(0x102))this[_0x510c7a(0x206)]['x']=0x8;else{if(this[_0x510c7a(0xc98)](_0x39c071))return 0x0;if(this[_0x510c7a(0x1e3)]()[_0x510c7a(0xc18)](_0x2181a7))return 0x0;if(_0x1f02a1[_0x510c7a(0x36b)](_0x21336d))return 0x0;let _0x5238c2=0x0;return _0x5238c2+=this[_0x510c7a(0xb7b)](_0x111c13),_0x5238c2+=this[_0x510c7a(0x1e3)]()[_0x510c7a(0x599)](_0x5e4765,this[_0x510c7a(0x6af)]()['hitType']),_0x5238c2[_0x510c7a(0xb4e)](0x0,0x1);}}else{if('MFDZo'==='pXXVu'){this['push'](_0x510c7a(0x30e),_0x513410);if(!_0x455126['BattleCore'][_0x510c7a(0x668)][_0x510c7a(0x47d)][_0x510c7a(0x39d)])return;this[_0x510c7a(0x510)](_0x510c7a(0x496),_0x516569[_0x510c7a(0x7a7)]['format'](_0x3ff7c6[_0x510c7a(0x380)]()));}else this['_cancelButton']['x']=-this[_0x510c7a(0x206)][_0x510c7a(0x2ce)]-0x4;}}else this[_0x510c7a(0x206)]['x']=Graphics[_0x510c7a(0x2ce)]-(Graphics[_0x510c7a(0x2ce)]-Graphics['boxWidth'])/0x2-this[_0x510c7a(0x206)]['width']-0x4;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5cc)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x964)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x964)]=function(){const _0x30879a=_0x4a80d9;if(this[_0x30879a(0x4bb)]()===_0x30879a(0x33a))return this['skillItemWindowRectBorderStyle']();else return this[_0x30879a(0xb78)]()?this[_0x30879a(0x7cd)]():VisuMZ[_0x30879a(0xbe1)][_0x30879a(0x5cc)][_0x30879a(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x905)]=Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x611)],Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x611)]=function(){const _0x4e7aac=_0x4a80d9;if(this['battleLayoutStyle']()==='border')return this[_0x4e7aac(0x876)]();else{if(this[_0x4e7aac(0xb78)]())return this['skillItemWindowRectMiddle']();else{if(_0x4e7aac(0x216)==='WKNkj'){const _0x78f784=_0x239c4f[_0x4e7aac(0xbe1)][_0x4e7aac(0x668)][_0x4e7aac(0x75d)];if(_0x78f784&&_0x78f784[_0x4e7aac(0x8a5)])return _0x78f784[_0x4e7aac(0x8a5)]['call'](this);this[_0x4e7aac(0x2ce)]=_0x3d24a1[_0x4e7aac(0x2ce)],this[_0x4e7aac(0x8dc)]=_0x118888['height'];const _0x4e2f10=0x1;this[_0x4e7aac(0xf4)]['x']=_0x4e2f10,this['scale']['y']=_0x4e2f10,this['x']=0x0,this['y']=0x0;}else return VisuMZ[_0x4e7aac(0xbe1)][_0x4e7aac(0x905)]['call'](this);}}},Scene_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb78)]=function(){const _0xbd08ff=_0x4a80d9;return VisuMZ['BattleCore'][_0xbd08ff(0x668)]['BattleLayout']['SkillItemMiddleLayout'];},Scene_Battle[_0x4a80d9(0xba6)]['skillItemWindowRectMiddle']=function(){const _0x56c246=_0x4a80d9,_0x3e9b49=Sprite_Button[_0x56c246(0xba6)]['blockWidth']()*0x2+0x4;let _0x84714d=Graphics[_0x56c246(0x84d)]-_0x3e9b49;Imported[_0x56c246(0xb80)]&&SceneManager['isSideButtonLayout']()&&('sNVgB'===_0x56c246(0x7af)?_0x84714d+=_0x3e9b49:this[_0x56c246(0x542)]['show']());const _0x351280=this[_0x56c246(0x36f)](),_0x4ab10b=Graphics[_0x56c246(0x91f)]-_0x351280-this[_0x56c246(0x4ba)]()[_0x56c246(0x8dc)]+Window_BattleStatus['prototype'][_0x56c246(0xb67)](),_0x1ab240=0x0;return new Rectangle(_0x1ab240,_0x351280,_0x84714d,_0x4ab10b);},Scene_Battle['prototype']['createEnemyNameContainer']=function(){const _0x4d126a=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x4d126a(0x668)][_0x4d126a(0x916)][_0x4d126a(0xadd)])return;this[_0x4d126a(0xb4c)]=new Sprite(),this[_0x4d126a(0xb4c)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x4d126a(0xc02)]['y'];const _0x37f5c4=this['children'][_0x4d126a(0x699)](this[_0x4d126a(0xc02)]);this['addChildAt'](this[_0x4d126a(0xb4c)],_0x37f5c4);for(let _0x1a5340=0x0;_0x1a5340<0x8;_0x1a5340++){const _0x5d401c=new Window_EnemyName(_0x1a5340);this['_enemyNameContainer'][_0x4d126a(0xd02)](_0x5d401c);}},Sprite_Battler[_0x4a80d9(0x369)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)]['Actor'][_0x4a80d9(0x9a5)],VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xca0)]=Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x8f0)],Sprite_Battler['prototype'][_0x4a80d9(0x8f0)]=function(){const _0x3b1ccd=_0x4a80d9;VisuMZ[_0x3b1ccd(0xbe1)][_0x3b1ccd(0xca0)][_0x3b1ccd(0x432)](this),this[_0x3b1ccd(0xcfc)]();if(this[_0x3b1ccd(0xc12)]===Sprite_Enemy)this['createShadowSprite']();this[_0x3b1ccd(0x27e)]();},Sprite_Battler['prototype'][_0x4a80d9(0xcfc)]=function(){const _0x5dd75c=_0x4a80d9;this['_baseX']=0x0,this['_baseY']=0x0,this['_floatHeight']=0x0,this[_0x5dd75c(0x355)]=0x0,this['_floatDuration']=0x0,this[_0x5dd75c(0x31b)]=0x0,this[_0x5dd75c(0x6a6)]=_0x5dd75c(0xa70),this[_0x5dd75c(0x920)]=0x0,this[_0x5dd75c(0x7d3)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this['_targetOpacity']=0xff,this['_opacityDuration']=0x0,this[_0x5dd75c(0x41a)]=0x0,this['_opacityEasing']='Linear',this[_0x5dd75c(0xb85)]=0x0,this[_0x5dd75c(0x8ba)]=0x0,this[_0x5dd75c(0xb31)]=0x0,this[_0x5dd75c(0x8de)]=0x0,this[_0x5dd75c(0x97c)]='Linear',this[_0x5dd75c(0x8b0)]=!![],this[_0x5dd75c(0x803)]=0x0,this[_0x5dd75c(0x1cc)]=0x0,this[_0x5dd75c(0xcee)]=0x0,this['_targetSkewY']=0x0,this[_0x5dd75c(0x5a3)]=0x0,this[_0x5dd75c(0x557)]=0x0,this[_0x5dd75c(0xbe9)]=_0x5dd75c(0xa70),this[_0x5dd75c(0x337)]=0x1,this[_0x5dd75c(0xc0f)]=0x1,this[_0x5dd75c(0xb9c)]=0x1,this[_0x5dd75c(0x726)]=0x1,this[_0x5dd75c(0x91a)]=0x0,this[_0x5dd75c(0x971)]=0x0,this[_0x5dd75c(0x150)]='Linear',this[_0x5dd75c(0x8ac)]=0x1,this[_0x5dd75c(0x194)]=0x0,this[_0x5dd75c(0x19a)]=0x0,this['_homeDuration']=0x0,this[_0x5dd75c(0x2b6)]=0x0,this['_homeEasing']=_0x5dd75c(0xa70),this[_0x5dd75c(0x81c)]=0x0,this[_0x5dd75c(0x66c)]=0x0;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4b0)]=function(){const _0x3a6771=_0x4a80d9;this[_0x3a6771(0x8a3)]=new Sprite(),this[_0x3a6771(0x8a3)]['bitmap']=ImageManager[_0x3a6771(0x7c7)](_0x3a6771(0xa9a)),this[_0x3a6771(0x8a3)]['bitmap'][_0x3a6771(0xac1)]=VisuMZ[_0x3a6771(0xbe1)][_0x3a6771(0x668)][_0x3a6771(0x490)][_0x3a6771(0x73e)],this[_0x3a6771(0x8a3)][_0x3a6771(0x2dd)]['x']=0.5,this[_0x3a6771(0x8a3)][_0x3a6771(0x2dd)]['y']=0.5,this[_0x3a6771(0x8a3)]['y']=-0x2,this[_0x3a6771(0x8a3)][_0x3a6771(0x83f)]=![],this[_0x3a6771(0xd02)](this[_0x3a6771(0x8a3)]);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x27e)]=function(){const _0x1e5a6a=_0x4a80d9;this[_0x1e5a6a(0x852)]=new Sprite(),this[_0x1e5a6a(0x852)][_0x1e5a6a(0x2dd)]['x']=0.5,this['_distortionSprite'][_0x1e5a6a(0x2dd)]['y']=0.5,this[_0x1e5a6a(0xd02)](this['_distortionSprite']);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x845)]=function(){const _0x3fdd33=_0x4a80d9;if(!this[_0x3fdd33(0x852)])return;if(this[_0x3fdd33(0x8a3)]){if('aqhCJ'===_0x3fdd33(0x1f9))return this[_0x3fdd33(0xb55)]>0x0;else{const _0x127e6a=this[_0x3fdd33(0x6bc)](this['_distortionSprite']);this[_0x3fdd33(0xbd1)](this[_0x3fdd33(0x8a3)],_0x127e6a),this[_0x3fdd33(0x943)]();}}this['_svBattlerSprite']&&this[_0x3fdd33(0x852)]['addChild'](this[_0x3fdd33(0x2ae)]),this[_0x3fdd33(0x550)]&&this['_distortionSprite'][_0x3fdd33(0xd02)](this[_0x3fdd33(0x550)]),this[_0x3fdd33(0x5ae)]&&this[_0x3fdd33(0x852)][_0x3fdd33(0xd02)](this['_mainSprite']),this[_0x3fdd33(0x9f9)]&&this[_0x3fdd33(0x852)][_0x3fdd33(0xd02)](this[_0x3fdd33(0x9f9)]),this[_0x3fdd33(0xc07)]&&this[_0x3fdd33(0x852)][_0x3fdd33(0xd02)](this[_0x3fdd33(0xc07)]);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x943)]=function(){const _0x2ea0b7=_0x4a80d9;if(!this[_0x2ea0b7(0x8a3)])return;if(this[_0x2ea0b7(0x437)]&&this[_0x2ea0b7(0x437)][_0x2ea0b7(0x76a)]()){if('mvdmb'!==_0x2ea0b7(0x1ed)){const _0xd8b48e=this['_shadowSprite'][_0x2ea0b7(0xc0b)];this[_0x2ea0b7(0x8a3)]['setFrame'](0x0,0x0,_0xd8b48e[_0x2ea0b7(0x2ce)],_0xd8b48e[_0x2ea0b7(0x8dc)]);}else this['_windowLayer']['x']=_0x35a30a[_0x2ea0b7(0x2ce)]*0xa,this[_0x2ea0b7(0xc02)]['y']=_0x10ed06[_0x2ea0b7(0x8dc)]*0xa;}else{if(_0x2ea0b7(0x321)==='kWOJU')return this[_0x2ea0b7(0x808)]&&this[_0x2ea0b7(0x808)][_0x2ea0b7(0x681)]();else this['_shadowSprite'][_0x2ea0b7(0xabb)](0x0,0x0,0x0,0x0);}},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x1f1)]=function(){const _0xd74f36=_0x4a80d9;if(SceneManager['isSceneBattle']()){if('BdoeL'===_0xd74f36(0x530))return SceneManager[_0xd74f36(0xb97)][_0xd74f36(0x967)][_0xd74f36(0x444)];else{if(this[_0xd74f36(0x9cd)][_0xd74f36(0x6c4)]!==_0x259753)return this[_0xd74f36(0x9cd)]['svShadow'];if(this[_0xd74f36(0x442)]()[_0xd74f36(0x6c8)][_0xd74f36(0x605)](/<SIDEVIEW SHOW SHADOW>/i))this[_0xd74f36(0x9cd)]['svShadow']=!![];else this[_0xd74f36(0x442)]()[_0xd74f36(0x6c8)][_0xd74f36(0x605)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0xd74f36(0x9cd)]['svShadow']=![]:this[_0xd74f36(0x9cd)][_0xd74f36(0x6c4)]=_0x344926[_0xd74f36(0xba6)][_0xd74f36(0x76a)][_0xd74f36(0x432)](this);return this[_0xd74f36(0x9cd)][_0xd74f36(0x6c4)];}}else return this['parent'];},Sprite_Battler['prototype']['setupTextPopup']=function(_0x1d9bf3,_0x15125c){const _0x52c6ae=_0x4a80d9;if(!this[_0x52c6ae(0x437)][_0x52c6ae(0x2a9)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x27d707=VisuMZ[_0x52c6ae(0xbe1)][_0x52c6ae(0x668)]['Damage'],_0x1da2b3=new Sprite_Damage();_0x1da2b3[_0x52c6ae(0xaac)]=_0x27d707['PopupDuration'],this[_0x52c6ae(0x4db)](_0x1da2b3),_0x1da2b3[_0x52c6ae(0x5c2)](_0x1d9bf3,_0x15125c),this['addDamageSprite'](_0x1da2b3);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xb4a)]=function(_0x24562a,_0x23c727,_0x124568){const _0x38fbe1=_0x4a80d9;if(!this[_0x38fbe1(0x437)][_0x38fbe1(0x2a9)]())return;if(BattleManager[_0x38fbe1(0x288)]())return;const _0xa3c161=VisuMZ[_0x38fbe1(0xbe1)][_0x38fbe1(0x668)][_0x38fbe1(0x6ea)],_0x25b0b0=new Sprite_Damage();_0x25b0b0['_duration']=_0xa3c161['PopupDuration'],this[_0x38fbe1(0x4db)](_0x25b0b0),_0x25b0b0['setupIconTextPopup'](_0x24562a,_0x23c727,_0x124568),this[_0x38fbe1(0x25d)](_0x25b0b0);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x6f6)]=function(){const _0x3886a0=_0x4a80d9;if(!this[_0x3886a0(0x437)][_0x3886a0(0xb1a)]())return;while(this[_0x3886a0(0x437)][_0x3886a0(0xb1a)]()){if(_0x3886a0(0x6a8)==='wdAkc')this[_0x3886a0(0x437)]['isSpriteVisible']()&&this[_0x3886a0(0x85c)]();else{const _0x1c7f35=this['isActor']()?this[_0x3886a0(0x442)]():this[_0x3886a0(0x378)]();if(_0x1c7f35){const _0x5b0f0c=_0x1c7f35[_0x3886a0(0x6c8)];if(_0x5b0f0c[_0x3886a0(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x168abd(_0x48bb04['$1'])*0.01;else{if(_0x5b0f0c['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x39eaef(_0x1be18e['$1'])||0x0;}}return 0x1;}}this[_0x3886a0(0x437)][_0x3886a0(0x3bd)](),this[_0x3886a0(0x437)][_0x3886a0(0x540)]();},Sprite_Battler[_0x4a80d9(0xba6)]['createDamageSprite']=function(){const _0x2668fa=_0x4a80d9;if(BattleManager[_0x2668fa(0x288)]())return;const _0x512e5b=VisuMZ[_0x2668fa(0xbe1)]['Settings'][_0x2668fa(0x6ea)],_0x4bc576=new Sprite_Damage();_0x4bc576[_0x2668fa(0xaac)]=_0x512e5b[_0x2668fa(0xf2)],this['sortDamageSprites'](_0x4bc576),_0x4bc576[_0x2668fa(0x622)](this[_0x2668fa(0x437)]),_0x4bc576[_0x2668fa(0x906)](this[_0x2668fa(0x437)]),this[_0x2668fa(0x25d)](_0x4bc576);},Sprite_Battler['prototype'][_0x4a80d9(0x25d)]=function(_0x193e13){const _0x516a31=_0x4a80d9;this[_0x516a31(0x705)]['push'](_0x193e13);if(this[_0x516a31(0xc5d)]()){if(_0x516a31(0xaec)===_0x516a31(0x18f)){this[_0x516a31(0x913)]=this[_0x516a31(0x22c)]();const _0x5a0a43=_0x32bad2[_0x516a31(0xbe1)][_0x516a31(0x668)][_0x516a31(0x7c4)];_0x5a0a43[_0x516a31(0xab1)]&&(this[_0x516a31(0x2ff)]=0x0);}else{const _0x398aa3=SceneManager[_0x516a31(0xb97)][_0x516a31(0x989)];if(_0x398aa3)_0x398aa3[_0x516a31(0x25d)](_0x193e13,this[_0x516a31(0x437)]);}}else{this[_0x516a31(0x1f1)]()[_0x516a31(0xd02)](_0x193e13);if(SceneManager[_0x516a31(0x6c1)]())_0x193e13[_0x516a31(0xf4)]['x']=-0x1;}},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xc5d)]=function(){const _0x1dc5b2=_0x4a80d9;return!$gameSystem[_0x1dc5b2(0x6e5)]()&&this['_battler']&&this['_battler'][_0x1dc5b2(0x172)]();return!$gameSystem[_0x1dc5b2(0x6e5)]()&&this[_0x1dc5b2(0x437)]&&this[_0x1dc5b2(0x437)][_0x1dc5b2(0x172)]()&&Window_BattleStatus[_0x1dc5b2(0xba6)][_0x1dc5b2(0x4bb)]()==='portrait';},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4db)]=function(_0x55e3bf){const _0x525466=_0x4a80d9;this[_0x525466(0x4c2)](_0x55e3bf,!![]);const _0xbf4d22=VisuMZ[_0x525466(0xbe1)][_0x525466(0x668)][_0x525466(0x6ea)],_0x24d179=SceneManager[_0x525466(0x6c1)]()?-0x1:0x1;if(_0xbf4d22[_0x525466(0xcb7)]){if('DTrPm'!==_0x525466(0x88e)){const _0x2665de=_0x5a26c3[this[_0x525466(0x547)][_0x525466(0xcd0)]()];if(!_0x2665de)return;if(!this['canAddSkillCommand'](_0x2665de))return;const _0x54d6ac=this[_0x525466(0xb73)](),_0x5229d4=_0x5e3874[_0x525466(0x9d8)](_0x2665de),_0x2a9ae7=_0x3fce59[_0x525466(0x3bb)](_0x2665de),_0x4a8aa1=_0x54d6ac===_0x525466(0x319)?_0x5229d4:_0x525466(0xb84)['format'](_0x2a9ae7,_0x5229d4);this[_0x525466(0x91d)](_0x4a8aa1,_0x525466(0x365),this['_actor'][_0x525466(0xb2b)]());}else for(const _0x30d935 of this[_0x525466(0x705)]){_0x30d935['x']+=_0xbf4d22[_0x525466(0x2b5)]*_0x24d179,_0x30d935['y']+=_0xbf4d22['PopupShiftY'];}}else{if(_0x525466(0x91b)!==_0x525466(0x53e)){const _0x3c68cb=this['_damages'][this[_0x525466(0x705)][_0x525466(0x6fc)]-0x1];_0x3c68cb&&('Okmtl'===_0x525466(0x98f)?(_0x55e3bf['x']=_0x3c68cb['x']+_0xbf4d22[_0x525466(0x2b5)]*_0x24d179,_0x55e3bf['y']=_0x3c68cb['y']+_0xbf4d22[_0x525466(0x8e6)]):_0x18a76a=_0x305b61(_0x5c0433['$1']));}else{if(this[_0x525466(0x140)]<=0x0)return;const _0x2d22a5=this[_0x525466(0x140)],_0xce51b=this[_0x525466(0x31b)],_0x28ec35=this[_0x525466(0x6a6)];_0x52823f[_0x525466(0xb80)]?this[_0x525466(0xc59)]=this[_0x525466(0x131)](this[_0x525466(0xc59)],this[_0x525466(0x355)],_0x2d22a5,_0xce51b,_0x28ec35):this[_0x525466(0xc59)]=(this[_0x525466(0xc59)]*(_0x2d22a5-0x1)+this[_0x525466(0x355)])/_0x2d22a5;this[_0x525466(0x140)]--;if(this['_floatDuration']<=0x0)this[_0x525466(0x925)]();}}},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4c2)]=function(_0x2cec20,_0x3a30fb){const _0x2a0908=_0x4a80d9,_0x18f616=SceneManager[_0x2a0908(0x6c1)]()?-0x1:0x1;let _0x4b9df4=this[_0x2a0908(0x9ec)];_0x4b9df4+=this[_0x2a0908(0x4ed)]();let _0x40560b=this['_baseY'];const _0x35d0b6=this[_0x2a0908(0x852)][_0x2a0908(0xf4)]['y'];_0x40560b+=this[_0x2a0908(0xb7c)]();const _0x254061=SceneManager['_scene'][_0x2a0908(0x989)];if(_0x254061&&this['parent']===_0x254061){_0x4b9df4+=_0x254061['x']-this[_0x2a0908(0x8b2)]();const _0x142cea=_0x254061[_0x2a0908(0x4da)]()*0x3/0x4;_0x40560b=_0x254061['y']+_0x142cea,_0x40560b=Math[_0x2a0908(0x834)](_0x40560b,_0x254061['y']+this['y']-this[_0x2a0908(0x8dc)]+_0x142cea);}_0x2cec20['x']=Math[_0x2a0908(0x961)](_0x4b9df4+this[_0x2a0908(0x8b2)]()*_0x18f616),_0x2cec20['y']=Math[_0x2a0908(0x961)](_0x40560b+this['damageOffsetY']());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x347)]=Sprite_Battler['prototype'][_0x4a80d9(0x8b2)],Sprite_Battler[_0x4a80d9(0xba6)]['damageOffsetX']=function(){const _0x33b9fb=_0x4a80d9;let _0x51ddf3=VisuMZ['BattleCore'][_0x33b9fb(0x347)][_0x33b9fb(0x432)](this),_0x31207a=VisuMZ[_0x33b9fb(0xbe1)][_0x33b9fb(0x668)][_0x33b9fb(0x6ea)][_0x33b9fb(0xccd)]||0x0;return Math[_0x33b9fb(0x961)](_0x51ddf3+_0x31207a);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3f1)]=Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x574)],Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x574)]=function(){const _0x467ba7=_0x4a80d9;let _0x17d497=VisuMZ[_0x467ba7(0xbe1)][_0x467ba7(0x3f1)][_0x467ba7(0x432)](this);switch(VisuMZ['BattleCore'][_0x467ba7(0x668)][_0x467ba7(0x6ea)]['PopupPosition']){case _0x467ba7(0x8c2):_0x17d497-=this[_0x467ba7(0x8dc)]*this['scale']['y'];break;case _0x467ba7(0x4c5):_0x17d497-=this[_0x467ba7(0x8dc)]*this[_0x467ba7(0xf4)]['y']*0.5;break;}let _0x5542b6=VisuMZ['BattleCore']['Settings'][_0x467ba7(0x6ea)][_0x467ba7(0x64b)]||0x0;return Math['round'](_0x17d497+_0x5542b6);},Sprite_Actor['prototype'][_0x4a80d9(0x8b2)]=function(){const _0x3b6741=_0x4a80d9;return Sprite_Battler[_0x3b6741(0xba6)][_0x3b6741(0x8b2)][_0x3b6741(0x432)](this);},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x574)]=function(){const _0x27ad96=_0x4a80d9;return Sprite_Battler[_0x27ad96(0xba6)]['damageOffsetY'][_0x27ad96(0x432)](this);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x754)]=function(_0x4e4226){const _0x15e8cb=_0x4a80d9;this[_0x15e8cb(0xc5d)]()?_0x15e8cb(0x94e)!==_0x15e8cb(0x363)?SceneManager['_scene']['_statusWindow'][_0x15e8cb(0x541)](_0x4e4226):(this[_0x15e8cb(0x337)]=this['applyEasing'](this[_0x15e8cb(0x337)],this[_0x15e8cb(0xb9c)],_0x512a00,_0x2d890b,_0x6e6182),this[_0x15e8cb(0xc0f)]=this[_0x15e8cb(0x131)](this['_growY'],this['_targetGrowY'],_0x426534,_0x63213b,_0x50f6b5)):(this[_0x15e8cb(0x1f1)]()[_0x15e8cb(0xbaf)](_0x4e4226),this[_0x15e8cb(0x705)][_0x15e8cb(0x249)](_0x4e4226),_0x4e4226[_0x15e8cb(0x5b7)]());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x849)]=Sprite_Battler['prototype'][_0x4a80d9(0x3f8)],Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x3f8)]=function(_0x559b43,_0x1bcbd4){const _0x28b801=_0x4a80d9,_0x2871de=VisuMZ[_0x28b801(0xbe1)][_0x28b801(0x668)];if(this[_0x28b801(0xc12)]===Sprite_Actor)_0x559b43+=_0x2871de['Actor'][_0x28b801(0x2b1)]||0x0,_0x1bcbd4+=_0x2871de[_0x28b801(0x490)]['OffsetY']||0x0;else this['constructor']===Sprite_Enemy&&(_0x559b43+=_0x2871de[_0x28b801(0x916)][_0x28b801(0x2b1)]||0x0,_0x1bcbd4+=_0x2871de[_0x28b801(0x916)][_0x28b801(0x21f)]||0x0);this['_battler']&&(_0x559b43=this[_0x28b801(0x437)][_0x28b801(0x719)]??_0x559b43,_0x1bcbd4=this[_0x28b801(0x437)][_0x28b801(0x2d9)]??_0x1bcbd4),VisuMZ[_0x28b801(0xbe1)][_0x28b801(0x849)][_0x28b801(0x432)](this,_0x559b43,_0x1bcbd4),this[_0x28b801(0x194)]=this[_0x28b801(0xa47)],this[_0x28b801(0x19a)]=this[_0x28b801(0x1b4)],this[_0x28b801(0xc8d)]=0x0,this[_0x28b801(0x2b6)]=0x0,this['_homeEasing']=_0x28b801(0xa70);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xaad)]=Sprite_Battler['prototype']['update'],Sprite_Battler['prototype'][_0x4a80d9(0x333)]=function(){const _0x41b33f=_0x4a80d9;VisuMZ['BattleCore'][_0x41b33f(0xaad)][_0x41b33f(0x432)](this),!this[_0x41b33f(0x437)]&&this[_0x41b33f(0x503)]&&(_0x41b33f(0x5fc)===_0x41b33f(0xb69)?(_0x23916c['x']=_0x331af1['x']+_0x1cb20d[_0x41b33f(0x2b5)]*_0x19a533,_0x5974ed['y']=_0x34d207['y']+_0x468b82[_0x41b33f(0x8e6)]):this[_0x41b33f(0x503)][_0x41b33f(0x83f)]=![]);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x935)]=Sprite_Battler[_0x4a80d9(0xba6)]['updateMain'],Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x930)]=function(){const _0x4144b9=_0x4a80d9;this[_0x4144b9(0xa75)](),this['updateSkew'](),this[_0x4144b9(0x6fb)](),this[_0x4144b9(0x271)](),VisuMZ[_0x4144b9(0xbe1)][_0x4144b9(0x935)]['call'](this),this[_0x4144b9(0x6c6)](),this[_0x4144b9(0x6ca)]();if(this[_0x4144b9(0xc12)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x8d6)]=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x26e)]=function(){const _0x433c02=_0x4a80d9;this[_0x433c02(0x8a4)](),VisuMZ[_0x433c02(0xbe1)][_0x433c02(0x8d6)]['call'](this),this[_0x433c02(0xac0)](),this[_0x433c02(0x21b)]();},Sprite_Battler['prototype']['updateSelectionEffect']=function(){const _0x2c782c=_0x4a80d9,_0x3ecf87=this[_0x2c782c(0x2fc)]();if(this[_0x2c782c(0x437)][_0x2c782c(0x904)]())'nYRCs'===_0x2c782c(0x929)?(this[_0x2c782c(0x3b2)]++,Graphics['frameCount']%0x1e<0xf?_0x3ecf87[_0x2c782c(0x85b)]([0xff,0xff,0xff,0x40]):_0x3ecf87[_0x2c782c(0x85b)]([0x0,0x0,0x0,0x0])):_0x4558a4?(this[_0x2c782c(0xc02)]['x']=(_0x1ae769['width']-_0x43f3de[_0x2c782c(0x84d)])/0x2,this[_0x2c782c(0xc02)]['y']=(_0x454322['height']-_0x1de0ac[_0x2c782c(0x91f)])/0x2):(this[_0x2c782c(0xc02)]['x']=_0x5b5af5['width']*0xa,this['_windowLayer']['y']=_0x3e7b8d['height']*0xa);else this['_selectionEffectCount']>0x0&&(this[_0x2c782c(0x3b2)]=0x0,_0x3ecf87[_0x2c782c(0x85b)]([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x4a80d9(0x46a)]=function(_0x3ea79a,_0xd61e14){const _0xd6c279=_0x4a80d9,_0x425936=_0x3ea79a-this[_0xd6c279(0xa47)],_0x2c7354=_0xd61e14-this['_homeY'];this[_0xd6c279(0xa47)]=_0x3ea79a,this[_0xd6c279(0x1b4)]=_0xd61e14,this[_0xd6c279(0x318)]-=_0x425936,this['_offsetY']-=_0x2c7354,this['_targetOffsetX']-=_0x425936,this[_0xd6c279(0x314)]-=_0x2c7354,this['updatePosition']();},Sprite_Battler['prototype'][_0x4a80d9(0x671)]=function(_0x5501a8,_0x341e72,_0x2fec18,_0x3d7b8d){const _0x418d58=_0x4a80d9;(this[_0x418d58(0x194)]!==_0x5501a8||this[_0x418d58(0x19a)]!==_0x341e72)&&(this[_0x418d58(0x194)]=_0x5501a8,this[_0x418d58(0x19a)]=_0x341e72,this[_0x418d58(0xc8d)]=_0x2fec18,this[_0x418d58(0x2b6)]=_0x2fec18,this['_homeEasing']=_0x3d7b8d,_0x2fec18<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler['prototype'][_0x4a80d9(0x8a4)]=function(){const _0x18dbe9=_0x4a80d9;if(this[_0x18dbe9(0xc8d)]<=0x0)return;const _0x23b71d=this[_0x18dbe9(0xc8d)],_0x4075a0=this[_0x18dbe9(0x2b6)],_0x3deafc=this[_0x18dbe9(0x359)];Imported['VisuMZ_0_CoreEngine']?(this[_0x18dbe9(0xa47)]=this[_0x18dbe9(0x131)](this[_0x18dbe9(0xa47)],this[_0x18dbe9(0x194)],_0x23b71d,_0x4075a0,_0x3deafc),this[_0x18dbe9(0x1b4)]=this[_0x18dbe9(0x131)](this[_0x18dbe9(0x1b4)],this['_targetHomeY'],_0x23b71d,_0x4075a0,_0x3deafc)):(this[_0x18dbe9(0xa47)]=(this[_0x18dbe9(0xa47)]*(_0x23b71d-0x1)+this[_0x18dbe9(0x194)])/_0x23b71d,this[_0x18dbe9(0x1b4)]=(this[_0x18dbe9(0x1b4)]*(_0x23b71d-0x1)+this['_targetHomeY'])/_0x23b71d);this[_0x18dbe9(0xc8d)]--;if(this['_homeDuration']<=0x0)this[_0x18dbe9(0x853)]();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x853)]=function(){const _0x3ab265=_0x4a80d9;this[_0x3ab265(0xa47)]=this['_targetHomeX'],this[_0x3ab265(0x1b4)]=this[_0x3ab265(0x19a)];},Sprite_Battler[_0x4a80d9(0xba6)]['updatePositionBattleCore']=function(){const _0x2d6d5a=_0x4a80d9;this['_baseX']=this['x'],this[_0x2d6d5a(0x1d5)]=this['y'],this['updateFloat'](),this[_0x2d6d5a(0x2fa)](),this['x']+=this[_0x2d6d5a(0x4ed)](),this['y']+=this[_0x2d6d5a(0xb7c)](),this['y']+=this[_0x2d6d5a(0x7a6)](),this['x']=Math[_0x2d6d5a(0x506)](this['x']),this['y']=Math[_0x2d6d5a(0x506)](this['y']);},Sprite_Battler['prototype'][_0x4a80d9(0x4ed)]=function(){let _0x4bbb44=0x0;return _0x4bbb44;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xb7c)]=function(){const _0x2c034b=_0x4a80d9;let _0x4cba0d=0x0;return this[_0x2c034b(0x437)]&&!this[_0x2c034b(0x437)][_0x2c034b(0xb9f)]()&&(_0x4cba0d-=this[_0x2c034b(0xc59)],_0x4cba0d-=this[_0x2c034b(0x920)]),_0x4cba0d;},Sprite_Battler[_0x4a80d9(0xba6)]['extraPositionScaledY']=function(){const _0x35a5a5=_0x4a80d9;let _0x23b9f9=0x0;if(this[_0x35a5a5(0x852)]&&this['constructor']!==Sprite_SvEnemy){if(_0x35a5a5(0x10d)===_0x35a5a5(0x326)){const _0x1c190e=_0x2e3718[_0x35a5a5(0xb97)][_0x35a5a5(0xcc2)];_0x1c190e[_0x35a5a5(0x670)](),_0x1c190e['setEnemyWindowMode'](![]),_0x1c190e[_0x35a5a5(0x1c4)]();const _0x45fe2f=_0x4bec49[_0x35a5a5(0xb97)][_0x35a5a5(0x989)];_0x45fe2f['scale']['y']=0x1;}else{const _0x4faa92=this['_distortionSprite'][_0x35a5a5(0xf4)]['y'];_0x23b9f9-=(_0x4faa92-0x1)*this[_0x35a5a5(0x8dc)];}}return _0x23b9f9;},Sprite_Battler[_0x4a80d9(0xba6)]['updateFlip']=function(){const _0x202474=_0x4a80d9,_0x39f207=this[_0x202474(0x437)]&&this[_0x202474(0x437)][_0x202474(0x11f)]();this[_0x202474(0x8ac)]=(_0x39f207?-0x1:0x1)*Math[_0x202474(0x630)](this[_0x202474(0xf4)]['x']);},Sprite_Battler[_0x4a80d9(0xba6)]['startFloat']=function(_0x2a3e2f,_0x42e7b2,_0x3121cd){const _0x471493=_0x4a80d9;if(!this[_0x471493(0x343)]())return;if(this[_0x471493(0x355)]===_0x2a3e2f)return;this['_targetFloatHeight']=_0x2a3e2f,this['_floatDuration']=_0x42e7b2,this['_floatWholeDuration']=_0x42e7b2,this['_floatEasing']=_0x3121cd||_0x471493(0xa70);if(_0x42e7b2<=0x0)this[_0x471493(0xc59)]=_0x2a3e2f;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4ce)]=function(){const _0x391f56=_0x4a80d9;if(this['_floatDuration']<=0x0)return;const _0x5ef578=this[_0x391f56(0x140)],_0xfcd595=this[_0x391f56(0x31b)],_0x3530ec=this[_0x391f56(0x6a6)];Imported[_0x391f56(0xb80)]?_0x391f56(0xfb)===_0x391f56(0xa54)?this[_0x391f56(0x282)][_0x391f56(0x576)](_0x7a330e,0x0,_0x2a77f4):this[_0x391f56(0xc59)]=this['applyEasing'](this[_0x391f56(0xc59)],this['_targetFloatHeight'],_0x5ef578,_0xfcd595,_0x3530ec):this[_0x391f56(0xc59)]=(this[_0x391f56(0xc59)]*(_0x5ef578-0x1)+this[_0x391f56(0x355)])/_0x5ef578;this[_0x391f56(0x140)]--;if(this[_0x391f56(0x140)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x925)]=function(){const _0x20f60c=_0x4a80d9;this[_0x20f60c(0xc59)]=this[_0x20f60c(0x355)];},Sprite_Battler['prototype'][_0x4a80d9(0xbc0)]=function(){const _0x43501a=_0x4a80d9;return this[_0x43501a(0x140)]>0x0;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4b9)]=function(_0x56b199,_0x4aea34){const _0x3473a1=_0x4a80d9;if(!this[_0x3473a1(0x343)]())return;if(_0x4aea34<=0x0)return;this[_0x3473a1(0x7d3)]=_0x56b199,this[_0x3473a1(0xb55)]=_0x4aea34,this['_jumpWholeDuration']=_0x4aea34;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x2fa)]=function(){const _0x4edf74=_0x4a80d9;if(this[_0x4edf74(0xb55)]<=0x0)return;const _0x502856=this['_jumpWholeDuration']-this[_0x4edf74(0xb55)],_0x43afc1=this[_0x4edf74(0x511)]/0x2,_0x1e98d1=this['_jumpMaxHeight'],_0x2d60c=-_0x1e98d1/Math[_0x4edf74(0x41b)](_0x43afc1,0x2);this['_jumpHeight']=_0x2d60c*Math[_0x4edf74(0x41b)](_0x502856-_0x43afc1,0x2)+_0x1e98d1,this['_jumpDuration']--;if(this[_0x4edf74(0xb55)]<=0x0)return this[_0x4edf74(0xcd5)]();},Sprite_Battler['prototype'][_0x4a80d9(0xcd5)]=function(){const _0x4307ee=_0x4a80d9;this[_0x4307ee(0x920)]=0x0;},Sprite_Battler['prototype']['isJumping']=function(){const _0x151675=_0x4a80d9;return this[_0x151675(0xb55)]>0x0;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x6cd)]=function(_0x2c1680,_0x3b3235,_0x7f9dc1){const _0x530c10=_0x4a80d9;if(this[_0x530c10(0x525)]===_0x2c1680)return;this[_0x530c10(0x525)]=_0x2c1680,this[_0x530c10(0x8f9)]=_0x3b3235,this[_0x530c10(0x41a)]=_0x3b3235,this['_opacityEasing']=_0x7f9dc1||_0x530c10(0xa70);if(_0x3b3235<=0x0)this[_0x530c10(0x2ff)]=_0x2c1680;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x21b)]=function(){const _0x2bd82d=_0x4a80d9;if(this[_0x2bd82d(0xc12)][_0x2bd82d(0x380)]==='Sprite_SvEnemy')return;if(this[_0x2bd82d(0x8f9)]<=0x0)return;const _0x538159=this['_opacityDuration'],_0x21846c=this[_0x2bd82d(0x41a)],_0x1cf286=this[_0x2bd82d(0xb52)];if(Imported[_0x2bd82d(0xb80)])this[_0x2bd82d(0x2ff)]=this['applyEasing'](this[_0x2bd82d(0x2ff)],this[_0x2bd82d(0x525)],_0x538159,_0x21846c,_0x1cf286);else{if('PElgF'!==_0x2bd82d(0xbba)){const _0x375a0f=_0x359bda['loadEnemy'](_0x54a5f2);_0x375a0f[_0x2bd82d(0x19f)](this['onStaticEnemyBitmapLoad'][_0x2bd82d(0x88a)](this,_0x375a0f));}else this['opacity']=(this[_0x2bd82d(0x2ff)]*(_0x538159-0x1)+this['_targetOpacity'])/_0x538159;}this[_0x2bd82d(0x8f9)]--;if(this[_0x2bd82d(0x8f9)]<=0x0)this[_0x2bd82d(0x86d)]();},Sprite_Battler[_0x4a80d9(0xba6)]['onOpacityEnd']=function(){const _0x29cd2a=_0x4a80d9;this['opacity']=this[_0x29cd2a(0x525)];},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x992)]=function(){const _0xe660b4=_0x4a80d9;return this[_0xe660b4(0x8f9)]>0x0;},Sprite_Battler['prototype']['updateShadow']=function(){const _0x574046=_0x4a80d9;this[_0x574046(0x8a3)][_0x574046(0x83f)]=this[_0x574046(0x437)][_0x574046(0x681)](),this[_0x574046(0x8ee)]();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x8ee)]=function(){const _0x3b7ae1=_0x4a80d9;if(!this[_0x3b7ae1(0x8a3)])return;this[_0x3b7ae1(0x8a3)]['y']=this[_0x3b7ae1(0x1d5)]-this['y']-0x2;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x20f)]=function(){const _0x1ab919=_0x4a80d9;if(!this[_0x1ab919(0x437)])return;this[_0x1ab919(0xc4c)]=this[_0x1ab919(0x437)][_0x1ab919(0x8fe)](),this[_0x1ab919(0x88b)]=this['_battler']['battlerShadowScaleY']();},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0x8fe)]=function(){const _0x2c6456=_0x4a80d9,_0x48afd3=this[_0x2c6456(0x172)]()?this[_0x2c6456(0x442)]():this[_0x2c6456(0x378)]();if(_0x48afd3){if(_0x2c6456(0x23f)===_0x2c6456(0xa07))_0x2a5077=_0x39408e['boxWidth']/0x2,_0x256b0b=_0x547de0[_0x2c6456(0x91f)]/0x2;else{const _0x5def93=_0x48afd3[_0x2c6456(0x6c8)];if(_0x5def93[_0x2c6456(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return'Fswfd'==='Fswfd'?Number(RegExp['$1'])*0.01:this[_0x2c6456(0x227)]();else{if(_0x5def93[_0x2c6456(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if('BBxOy'===_0x2c6456(0x80a))return Number(RegExp['$1'])||0x0;else{let _0x2cddee=_0x579eab[_0x2c6456(0x638)](_0x12beb2[_0x2c6456(0x945)]);_0x20470e['hpDamage']<0x0&&(_0x2cddee+=_0x36018f['abs'](_0x52aa2c[_0x2c6456(0x9c0)])),_0x5c2fb7[_0x2c6456(0x362)](_0x2bc7dd[_0x2c6456(0x945)],_0x2cddee);}}}}}return 0x1;},Game_BattlerBase[_0x4a80d9(0xba6)][_0x4a80d9(0xa53)]=function(){const _0x20eee3=_0x4a80d9,_0x32bb5c=this[_0x20eee3(0x172)]()?this[_0x20eee3(0x442)]():this[_0x20eee3(0x378)]();if(_0x32bb5c){if(_0x20eee3(0x694)!==_0x20eee3(0xa42)){const _0x2aafd6=_0x32bb5c[_0x20eee3(0x6c8)];if(_0x2aafd6['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2aafd6[_0x20eee3(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x20eee3(0xb93)!==_0x20eee3(0x63e))return Number(RegExp['$1'])||0x0;else this['repositionCancelButtonBorderStyle']();}}}else{_0x91dc73[_0x20eee3(0xba6)][_0x20eee3(0x1e8)][_0x20eee3(0x432)](this,_0xbd2f9d);if(this[_0x20eee3(0x681)]())this[_0x20eee3(0x30b)](_0x260449);}}return 0x1;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xa75)]=function(){const _0x4d3e12=_0x4a80d9;if(this[_0x4d3e12(0xc12)]===Sprite_SvEnemy)return;this[_0x4d3e12(0xa3f)](),this[_0x4d3e12(0x5e4)]();},Sprite_Battler[_0x4a80d9(0xba6)]['finalizeScale']=function(){const _0x1b3e11=_0x4a80d9,_0xe476eb=this['_distortionSprite'];_0xe476eb&&(_0xe476eb[_0x1b3e11(0xf4)]['x']=this[_0x1b3e11(0xbce)](),_0xe476eb[_0x1b3e11(0xf4)]['y']=this[_0x1b3e11(0x1bb)]());},Sprite_Battler[_0x4a80d9(0xba6)]['mainSpriteScaleX']=function(){const _0x408e01=_0x4a80d9;let _0x5793fa=0x1;return _0x5793fa*=this['_flipScaleX'],_0x5793fa*=this[_0x408e01(0x337)],_0x5793fa;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x1bb)]=function(){const _0x964c84=_0x4a80d9;return 0x1*this[_0x964c84(0xc0f)];},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x29a)]=function(){const _0x56a61d=_0x4a80d9;return this[_0x56a61d(0x2ce)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x33e)]=function(){const _0x34dfde=_0x4a80d9;return this[_0x34dfde(0x8dc)]*this[_0x34dfde(0x1bb)]();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x802)]=function(_0xd09bac,_0x417e87,_0x511bf1,_0x50a6ba){const _0x4ff68e=_0x4a80d9;if(!this[_0x4ff68e(0x343)]())return;if(!this[_0x4ff68e(0x852)])return;if(this[_0x4ff68e(0xb9c)]===_0xd09bac&&this[_0x4ff68e(0x726)]===_0x417e87)return;this['_targetGrowX']=_0xd09bac,this[_0x4ff68e(0x726)]=_0x417e87,this[_0x4ff68e(0x91a)]=_0x511bf1,this['_growWholeDuration']=_0x511bf1,this['_growEasing']=_0x50a6ba||'Linear',_0x511bf1<=0x0&&(this['_growX']=this[_0x4ff68e(0xb9c)],this['_growY']=this[_0x4ff68e(0x726)]);},Sprite_Battler['prototype'][_0x4a80d9(0xa3f)]=function(){const _0x25f08e=_0x4a80d9;if(this[_0x25f08e(0x91a)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x1d6c59=this['_growDuration'],_0x7e4b9b=this[_0x25f08e(0x971)],_0x3873d1=this[_0x25f08e(0x150)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x25f08e(0x70a)!==_0x25f08e(0x70a)){this[_0x25f08e(0x1f3)](_0x25f08e(0xc84));return;}else this[_0x25f08e(0x337)]=this[_0x25f08e(0x131)](this['_growX'],this[_0x25f08e(0xb9c)],_0x1d6c59,_0x7e4b9b,_0x3873d1),this[_0x25f08e(0xc0f)]=this[_0x25f08e(0x131)](this[_0x25f08e(0xc0f)],this[_0x25f08e(0x726)],_0x1d6c59,_0x7e4b9b,_0x3873d1);}else this['_growX']=(this[_0x25f08e(0x337)]*(_0x1d6c59-0x1)+this['_targetGrowX'])/_0x1d6c59,this[_0x25f08e(0xc0f)]=(this[_0x25f08e(0xc0f)]*(_0x1d6c59-0x1)+this[_0x25f08e(0x726)])/_0x1d6c59;this[_0x25f08e(0x91a)]--;if(this[_0x25f08e(0x91a)]<=0x0)this[_0x25f08e(0x103)]();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x103)]=function(){const _0x4e8c7b=_0x4a80d9;this[_0x4e8c7b(0x337)]=this['_targetGrowX'],this[_0x4e8c7b(0xc0f)]=this[_0x4e8c7b(0x726)];},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xadf)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x4a80d9(0xba6)]['startSkew']=function(_0x5834d9,_0x5b69db,_0x6efb63,_0x4072b5){const _0x28bdcf=_0x4a80d9;if(!this[_0x28bdcf(0x343)]())return;if(!this[_0x28bdcf(0x852)])return;if(this['_targetSkewX']===_0x5834d9&&this[_0x28bdcf(0x2a2)]===_0x5b69db)return;this[_0x28bdcf(0xcee)]=_0x5834d9,this[_0x28bdcf(0x2a2)]=_0x5b69db,this[_0x28bdcf(0x5a3)]=_0x6efb63,this[_0x28bdcf(0x557)]=_0x6efb63,this['_skewEasing']=_0x4072b5||_0x28bdcf(0xa70),_0x6efb63<=0x0&&(this[_0x28bdcf(0x852)][_0x28bdcf(0x927)]['x']=this[_0x28bdcf(0xcee)],this[_0x28bdcf(0x852)][_0x28bdcf(0x927)]['y']=this[_0x28bdcf(0x2a2)]);},Sprite_Battler['prototype']['updateSkew']=function(){const _0x2f4506=_0x4a80d9;if(this['_skewDuration']<=0x0)return;if(!this[_0x2f4506(0x852)])return;const _0x15ed30=this[_0x2f4506(0x5a3)],_0x9052e3=this[_0x2f4506(0x557)],_0x4d9fde=this[_0x2f4506(0xbe9)],_0x46b040=this[_0x2f4506(0x852)];if(Imported[_0x2f4506(0xb80)]){if(_0x2f4506(0x77f)===_0x2f4506(0x77f))_0x46b040[_0x2f4506(0x927)]['x']=this[_0x2f4506(0x131)](_0x46b040[_0x2f4506(0x927)]['x'],this[_0x2f4506(0xcee)],_0x15ed30,_0x9052e3,_0x4d9fde),_0x46b040[_0x2f4506(0x927)]['y']=this[_0x2f4506(0x131)](_0x46b040[_0x2f4506(0x927)]['y'],this['_targetSkewY'],_0x15ed30,_0x9052e3,_0x4d9fde);else{if(!_0x276f3a[_0x2f4506(0x1f8)]())return;if(!_0x127a71[_0x2f4506(0xacc)])return;_0x50867b['ConvertParams'](_0x3638c1,_0xc331cf);const _0x3f73a9=_0x341789[_0x2f4506(0xc05)](),_0x489c40=_0x214319['WaitForProjectile'];if(!_0x3f73a9)return;const _0x52a9ad=_0x45636a[_0x2f4506(0x967)];if(!_0x52a9ad)return;_0x52a9ad['createActionSequenceProjectile'](_0x1b4647);if(_0x489c40)_0x3f73a9[_0x2f4506(0xbaa)](_0x2f4506(0xb40));}}else _0x46b040[_0x2f4506(0x927)]['x']=(_0x46b040[_0x2f4506(0x927)]['x']*(_0x15ed30-0x1)+this[_0x2f4506(0xcee)])/_0x15ed30,_0x46b040['skew']['y']=(_0x46b040['skew']['y']*(_0x15ed30-0x1)+this[_0x2f4506(0x2a2)])/_0x15ed30;this[_0x2f4506(0x5a3)]--;if(this[_0x2f4506(0x5a3)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x121)]=function(){const _0x53f8e3=_0x4a80d9;this[_0x53f8e3(0x852)][_0x53f8e3(0x927)]['x']=this['_targetSkewX'],this[_0x53f8e3(0x852)]['skew']['y']=this[_0x53f8e3(0x2a2)];},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x272)]=function(){const _0x4407ef=_0x4a80d9;return this[_0x4407ef(0x5a3)]>0x0;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x199)]=function(_0x57118e,_0x3c274b,_0x126bfb,_0x4609b8){const _0x28e1c9=_0x4a80d9;if(!this[_0x28e1c9(0x343)]())return;if(!this[_0x28e1c9(0x852)])return;if(this[_0x28e1c9(0x8ba)]===_0x57118e)return;this['_targetAngle']=_0x57118e,this['_angleDuration']=_0x3c274b,this[_0x28e1c9(0x8de)]=_0x3c274b,this[_0x28e1c9(0x97c)]=_0x126bfb||_0x28e1c9(0xa70),this['_angleRevertOnFinish']=_0x4609b8;this[_0x28e1c9(0x8b0)]===undefined&&(this['_angleRevertOnFinish']=!![]);if(_0x3c274b<=0x0){if(_0x28e1c9(0x21d)==='hTdEn')return this[_0x28e1c9(0x22c)]()?0x0:0xa;else{this['_currentAngle']=_0x57118e;if(this[_0x28e1c9(0x8b0)]){if(_0x28e1c9(0x675)===_0x28e1c9(0x275)){if(_0x1f7800[_0x28e1c9(0x89c)]()){if(this[_0x28e1c9(0x466)]&&this['_enemies']['includes'](this[_0x28e1c9(0x466)])){const _0x4b8f12=this[_0x28e1c9(0x441)][_0x28e1c9(0x699)](this[_0x28e1c9(0x466)]);return this['forceSelect'](_0x4b8f12);}else return this[_0x28e1c9(0x1b2)]();}}else this[_0x28e1c9(0x8ba)]=0x0,this[_0x28e1c9(0xb85)]=0x0;}}}},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x6fb)]=function(){const _0x1b7eda=_0x4a80d9;this[_0x1b7eda(0x3c8)](),this[_0x1b7eda(0x316)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0x1487de=_0x4a80d9;if(this[_0x1487de(0xb31)]<=0x0)return;const _0x8cb355=this[_0x1487de(0xb31)],_0x65ce74=this[_0x1487de(0x8de)],_0x2081a0=this[_0x1487de(0x97c)];Imported['VisuMZ_0_CoreEngine']?this[_0x1487de(0xb85)]=this[_0x1487de(0x131)](this['_currentAngle'],this[_0x1487de(0x8ba)],_0x8cb355,_0x65ce74,_0x2081a0):this[_0x1487de(0xb85)]=(this[_0x1487de(0xb85)]*(_0x8cb355-0x1)+this[_0x1487de(0x8ba)])/_0x8cb355;this[_0x1487de(0xb31)]--;if(this[_0x1487de(0xb31)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x9e9)]=function(){const _0x4a140c=_0x4a80d9;this[_0x4a140c(0xb85)]=this[_0x4a140c(0x8ba)];if(this['_angleRevertOnFinish']){if(_0x4a140c(0x4ca)===_0x4a140c(0x4ca))this[_0x4a140c(0x8ba)]=0x0,this['_currentAngle']=0x0;else return this[_0x4a140c(0xa38)]()['anchorY'];}},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x4b1)]=function(){const _0x520e6e=_0x4a80d9;return this[_0x520e6e(0xb31)]>0x0;},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x316)]=function(){const _0x33cf78=_0x4a80d9;if(!this[_0x33cf78(0x852)])return;const _0x117609=this[_0x33cf78(0xb85)],_0x190616=this[_0x33cf78(0xf4)]['x'],_0x130704=this[_0x33cf78(0x437)][_0x33cf78(0x172)]()?-0x1:0x1;this[_0x33cf78(0x852)]['angle']=_0x117609*_0x190616*_0x130704;const _0x33402d=this['_distortionSprite'][_0x33cf78(0xf4)]['y'];this[_0x33cf78(0x852)]['y']=this[_0x33cf78(0x8dc)]*-0.5*(0x2-_0x33402d),this[_0x33cf78(0x852)]['y']=Math['ceil'](this['_distortionSprite']['y']);const _0xc26bc7=[this[_0x33cf78(0x5ae)],this['_svBattlerSprite'],this['_dragonbonesSpriteContainer']];for(const _0x27856b of _0xc26bc7){if(!_0x27856b)continue;_0x27856b['y']=this['height']*0.5;}this[_0x33cf78(0x8a3)]&&(_0x33cf78(0xc7a)!==_0x33cf78(0xc32)?(this[_0x33cf78(0xc4c)]=this[_0x33cf78(0xc4c)]??0x1,this[_0x33cf78(0x88b)]=this['_shadowScaleY']??0x1,this['_shadowSprite'][_0x33cf78(0xf4)]['x']=this[_0x33cf78(0x852)][_0x33cf78(0xf4)]['x']*this[_0x33cf78(0xc4c)],this[_0x33cf78(0x8a3)][_0x33cf78(0xf4)]['y']=this[_0x33cf78(0x852)][_0x33cf78(0xf4)]['y']*this[_0x33cf78(0x88b)]):_0x203f7e=_0x565c4e(_0x3a5a2e['$1']));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x73f)]=Sprite_Actor['prototype'][_0x4a80d9(0x798)],Sprite_Actor[_0x4a80d9(0xba6)]['createStateSprite']=function(){const _0x20d98c=_0x4a80d9;VisuMZ[_0x20d98c(0xbe1)][_0x20d98c(0x73f)]['call'](this),VisuMZ[_0x20d98c(0xbe1)][_0x20d98c(0x668)][_0x20d98c(0x5f0)][_0x20d98c(0xb89)]&&this[_0x20d98c(0x3ff)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xaa9)]=Sprite_Enemy['prototype'][_0x4a80d9(0xc67)],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xc67)]=function(){const _0x23f876=_0x4a80d9;VisuMZ['BattleCore']['Settings'][_0x23f876(0x5f0)][_0x23f876(0xa7b)]&&this[_0x23f876(0x3ff)](),VisuMZ['BattleCore'][_0x23f876(0xaa9)][_0x23f876(0x432)](this);},Sprite_Battler['prototype'][_0x4a80d9(0x3ff)]=function(){const _0x1c6508=_0x4a80d9;if(!ConfigManager[_0x1c6508(0x105)])return;if(this[_0x1c6508(0xc12)]===Sprite_SvEnemy)return;const _0x41e04b=VisuMZ['BattleCore']['Settings'][_0x1c6508(0x5f0)],_0x5b5e69=new Sprite_HpGauge();_0x5b5e69[_0x1c6508(0x2dd)]['x']=_0x41e04b['AnchorX'],_0x5b5e69[_0x1c6508(0x2dd)]['y']=_0x41e04b[_0x1c6508(0x3e1)],_0x5b5e69['scale']['x']=_0x5b5e69['scale']['y']=_0x41e04b[_0x1c6508(0x8ed)],this[_0x1c6508(0x503)]=_0x5b5e69,this['addChild'](this[_0x1c6508(0x503)]),Spriteset_Battle[_0x1c6508(0x9a7)]&&BattleManager[_0x1c6508(0x2f5)](this[_0x1c6508(0x503)]);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x835)]=Sprite_Battler['prototype']['setBattler'],Sprite_Battler['prototype'][_0x4a80d9(0xbd5)]=function(_0x2ffca2){const _0x53961b=_0x4a80d9,_0x4f9ace=this[_0x53961b(0x437)];VisuMZ[_0x53961b(0xbe1)][_0x53961b(0x835)][_0x53961b(0x432)](this,_0x2ffca2),this[_0x53961b(0x5ea)](_0x2ffca2);if(_0x4f9ace!==_0x2ffca2)this[_0x53961b(0x20f)]();},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x5ea)]=function(_0x360bae){const _0x1ff5ab=_0x4a80d9;if(!_0x360bae)return;if(!this['_hpGaugeSprite'])return;if(_0x360bae[_0x1ff5ab(0x172)]()){}else{if(_0x360bae[_0x1ff5ab(0x494)]()){if(_0x1ff5ab(0x34a)!==_0x1ff5ab(0x34a)){if(_0x4c71da['isEnemy']())return-0x1;if(_0x1459a4[_0x1ff5ab(0x494)]())return 0x1;}else{if(this[_0x1ff5ab(0xc12)]===Sprite_SvEnemy&&!_0x360bae[_0x1ff5ab(0x681)]())return;}}}this[_0x1ff5ab(0x503)][_0x1ff5ab(0x622)](_0x360bae,'hp');},Sprite_Battler['prototype'][_0x4a80d9(0x61d)]=function(){const _0x695b70=_0x4a80d9;return this[_0x695b70(0x437)]&&this['_battler'][_0x695b70(0x61d)]();},Sprite_Battler['prototype'][_0x4a80d9(0x23d)]=function(){const _0x1f724a=_0x4a80d9,_0x365fe0=this[_0x1f724a(0x5ae)][_0x1f724a(0xc0b)];if(!_0x365fe0)return;const _0x3a271a=_0x365fe0[_0x1f724a(0x2ce)];let _0x228e60=_0x365fe0[_0x1f724a(0x8dc)];if(this['_battler']['isDead']()){if(_0x1f724a(0x43b)==='FpGJT'){if(this['_frame'])_0x228e60=Math[_0x1f724a(0x78c)](0x0,this[_0x1f724a(0x5fa)][_0x1f724a(0x8dc)]-0x4);}else return this[_0x1f724a(0x4a2)];}this[_0x1f724a(0x5ae)]['setFrame'](0x0,0x0,_0x3a271a,_0x228e60),this['setFrame'](0x0,0x0,_0x3a271a,_0x228e60);},Sprite_Battler[_0x4a80d9(0xba6)]['updateHpGaugePosition']=function(){const _0x6ce0f4=_0x4a80d9;if(!this['_battler'])return;if(!this[_0x6ce0f4(0x503)])return;const _0xdedcff=VisuMZ['BattleCore'][_0x6ce0f4(0x668)][_0x6ce0f4(0x5f0)],_0x4f6bcb=this['_hpGaugeSprite'];_0x4f6bcb['visible']=this[_0x6ce0f4(0x8ca)]();const _0x3831d6=_0xdedcff[_0x6ce0f4(0x2b1)],_0x361942=_0xdedcff['OffsetY'];_0x4f6bcb['x']=_0x3831d6,_0x4f6bcb['x']+=this[_0x6ce0f4(0x437)]['battleUIOffsetX'](),_0x4f6bcb['y']=-this[_0x6ce0f4(0x8dc)]+_0x361942,_0x4f6bcb['y']+=this[_0x6ce0f4(0x437)][_0x6ce0f4(0xb18)]();if(Spriteset_Battle[_0x6ce0f4(0x9a7)]&&SceneManager['_scene'][_0x6ce0f4(0x967)]){if('opGzp'===_0x6ce0f4(0xb90))_0x4f6bcb['x']+=this['x'],_0x4f6bcb['y']+=this['y'];else return _0x465d3f[_0x6ce0f4(0x58e)]();}},Sprite_Battler['prototype'][_0x4a80d9(0x8ca)]=function(){const _0x232583=_0x4a80d9;if(!this[_0x232583(0x437)])return![];if(this[_0x232583(0x437)]['isActor']())return!![];if(this[_0x232583(0x437)]['isHidden']())return![];if(this[_0x232583(0x2ff)]<=0x0)return![];const _0x7c19e6=this[_0x232583(0x437)]['enemy']()[_0x232583(0x6c8)];if(_0x7c19e6[_0x232583(0x605)](/<SHOW HP GAUGE>/i))return!![];if(_0x7c19e6[_0x232583(0x605)](/<HIDE HP GAUGE>/i))return![];const _0xffee59=VisuMZ[_0x232583(0xbe1)]['Settings']['HpGauge'];if(_0xffee59[_0x232583(0x979)]){if(_0x232583(0x9b9)===_0x232583(0xa4a))this['selectNextCommandTpb']();else{if(_0xffee59[_0x232583(0xa93)]&&BattleManager[_0x232583(0x7d7)]())return!![];if(this[_0x232583(0x437)][_0x232583(0x49e)])return![];return this['_battler']['hasBeenDefeatedBefore']();}}return!![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x71e)]=Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x5a7)],Sprite_Battler[_0x4a80d9(0xba6)]['isMoving']=function(){const _0x56c786=_0x4a80d9;if(!this[_0x56c786(0x437)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x56c786(0xbe1)][_0x56c786(0x71e)][_0x56c786(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xca2)]=Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x163)],Sprite_Battler['prototype']['startMove']=function(_0x42a2ae,_0x551978,_0x25650e){const _0x2e0b47=_0x4a80d9;this[_0x2e0b47(0x343)]()&&(_0x2e0b47(0x7a8)===_0x2e0b47(0x7a8)?VisuMZ[_0x2e0b47(0xbe1)]['Sprite_Battler_startMove'][_0x2e0b47(0x432)](this,_0x42a2ae,_0x551978,_0x25650e):(_0x4a5c08[_0x2e0b47(0xbe1)]['ParseItemNotetags']&&_0x1c4dc4['BattleCore'][_0x2e0b47(0x2b7)][_0x2e0b47(0x432)](this,_0x5d4234),_0x5e01d4[_0x2e0b47(0xbe1)][_0x2e0b47(0xcb2)](_0x3c217e),_0x232b91['BattleCore']['Parse_Notetags_Targets'](_0x3930ba)));},Sprite_Battler[_0x4a80d9(0xba6)]['canMove']=function(){const _0x24dd33=_0x4a80d9;if(this['_battler']&&this[_0x24dd33(0x437)][_0x24dd33(0x50b)]())return![];if(this['_battler']&&!this[_0x24dd33(0x437)][_0x24dd33(0x6e6)]())return![];return $gameSystem[_0x24dd33(0x6e5)]();},Sprite_Battler[_0x4a80d9(0xba6)]['stepForward']=function(){},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x467)]=function(){const _0x3f010a=_0x4a80d9;this[_0x3f010a(0x163)](0x0,0x0,0xc);},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0xcb6)]=function(){},Sprite_Battler[_0x4a80d9(0xba6)][_0x4a80d9(0x68c)]=function(){const _0x5d4729=_0x4a80d9,_0x1812c9=VisuMZ['BattleCore']['Settings'][_0x5d4729(0x490)],_0x59e1d8=this['_battler']&&this['_battler'][_0x5d4729(0x172)]()?0x1:-0x1,_0x20a301=this['_baseX']-this[_0x5d4729(0xa47)]+_0x59e1d8*_0x1812c9[_0x5d4729(0xcbc)],_0x347419=this[_0x5d4729(0x1d5)]-this[_0x5d4729(0x1b4)]+_0x59e1d8*_0x1812c9[_0x5d4729(0x4fa)],_0x123e4c=_0x1812c9[_0x5d4729(0x5f1)];this[_0x5d4729(0x163)](_0x20a301,_0x347419,_0x123e4c);},Sprite_Battler[_0x4a80d9(0xba6)]['startShakeFlinch']=function(_0x755f7f,_0x270c24){const _0x476245=_0x4a80d9,_0x332963=VisuMZ[_0x476245(0xbe1)][_0x476245(0x668)][_0x476245(0x490)];this[_0x476245(0x81c)]=Math[_0x476245(0xbf1)]((_0x332963[_0x476245(0x43d)]??0x18)*_0x270c24),this[_0x476245(0x66c)]=Math[_0x476245(0x78c)](this[_0x476245(0x66c)],_0x755f7f);},Sprite_Battler[_0x4a80d9(0xba6)]['updateShakeFlinch']=function(){const _0x316af7=_0x4a80d9,_0x455ea4=VisuMZ[_0x316af7(0xbe1)][_0x316af7(0x668)][_0x316af7(0x490)];if(!(_0x455ea4[_0x316af7(0xcaa)]??![]))return;if(this[_0x316af7(0x81c)]>0x0){const _0x512538=this['_shakeFlinchDuration'];this[_0x316af7(0x66c)]=this[_0x316af7(0x66c)]*(_0x512538-0x1)/_0x512538,this[_0x316af7(0x81c)]--,this['_shakeFlinchDuration']<=0x0&&(this[_0x316af7(0x66c)]=0x0);}this[_0x316af7(0x66c)]>0x0?(this[_0x316af7(0x5ae)]['x']=Math[_0x316af7(0x584)](this[_0x316af7(0x66c)])*(Math[_0x316af7(0xa62)]()<0.5?-0x1:0x1),this[_0x316af7(0x1d5)]!==this['y']&&('TBucm'!=='lipDe'?(this[_0x316af7(0x5ae)]['y']=this[_0x316af7(0x8dc)]*0.5,this[_0x316af7(0x5ae)]['y']+=Math[_0x316af7(0x584)](this['_shakeFlinchPower'])*(Math[_0x316af7(0xa62)]()<0.5?-0x1:0x1)):(_0x3253fe['BattleCore'][_0x316af7(0xaad)][_0x316af7(0x432)](this),!this[_0x316af7(0x437)]&&this[_0x316af7(0x503)]&&(this[_0x316af7(0x503)][_0x316af7(0x83f)]=![])))):(this[_0x316af7(0x5ae)]['x']=0x0,this[_0x316af7(0x5ae)]['y']=this[_0x316af7(0x8dc)]*0.5);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x42e)]=Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x8f0)],Sprite_Actor['prototype'][_0x4a80d9(0x8f0)]=function(){const _0x1af197=_0x4a80d9;VisuMZ['BattleCore'][_0x1af197(0x42e)]['call'](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x2fc)]=function(){const _0x3ab95b=_0x4a80d9;return this[_0x3ab95b(0x852)]||this[_0x3ab95b(0x5ae)]||this;},VisuMZ[_0x4a80d9(0xbe1)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x4a80d9(0xba6)]['moveToStartPosition'],Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x125)]=function(){},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x96e)]=function(_0x50a076){const _0x4cca8a=_0x4a80d9;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x50a076)return;if(!_0x50a076[_0x4cca8a(0x343)]())return;VisuMZ[_0x4cca8a(0xbe1)][_0x4cca8a(0x539)][_0x4cca8a(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xabd)]=Sprite_Actor['prototype']['setActorHome'],Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x936)]=function(_0x17081d){const _0x40f592=_0x4a80d9;if(VisuMZ[_0x40f592(0xbe1)][_0x40f592(0x668)][_0x40f592(0x490)][_0x40f592(0x59c)]){if(_0x40f592(0xbc5)!==_0x40f592(0x2f4))VisuMZ[_0x40f592(0xbe1)][_0x40f592(0x668)]['Actor'][_0x40f592(0x59c)][_0x40f592(0x432)](this,_0x17081d);else{this['processBattleCoreJS'](_0x40f592(0x127));const _0x13bdb7=this[_0x40f592(0x1e5)];_0x3ed87b[_0x40f592(0xbe1)][_0x40f592(0x5b1)][_0x40f592(0x432)](this),this['_escapeRatio']=_0x13bdb7+_0x5032d2[_0x40f592(0xbe1)][_0x40f592(0x668)][_0x40f592(0x1c6)][_0x40f592(0x583)][_0x40f592(0x432)](this),this[_0x40f592(0x2a6)]=![],this[_0x40f592(0x960)](_0x40f592(0x807));}}else VisuMZ['BattleCore']['Sprite_Actor_setActorHome'][_0x40f592(0x432)](this,_0x17081d);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x14a)]=Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xbd5)],Sprite_Actor['prototype'][_0x4a80d9(0xbd5)]=function(_0x7cf361){const _0x3c1791=_0x4a80d9;VisuMZ[_0x3c1791(0xbe1)][_0x3c1791(0x14a)][_0x3c1791(0x432)](this,_0x7cf361),this[_0x3c1791(0x3fc)](_0x7cf361);},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x3fc)]=function(_0x2628fe){const _0x5dd528=_0x4a80d9;if(!_0x2628fe)return;if(!this['_mainSprite'])return;this[_0x5dd528(0x5ae)][_0x5dd528(0x2dd)]['x']=this[_0x5dd528(0x547)][_0x5dd528(0x9d9)](),this['_mainSprite'][_0x5dd528(0x2dd)]['y']=this['_actor'][_0x5dd528(0x396)](),this[_0x5dd528(0x943)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5ca)]=Sprite_Actor['prototype'][_0x4a80d9(0x333)],Sprite_Actor[_0x4a80d9(0xba6)]['update']=function(){const _0x11acda=_0x4a80d9;VisuMZ['BattleCore'][_0x11acda(0x5ca)][_0x11acda(0x432)](this),this[_0x11acda(0x547)]&&(this[_0x11acda(0x953)](),this['updateStyleOpacity']());},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x148)]=Sprite_Actor['prototype'][_0x4a80d9(0xb98)],Sprite_Actor['prototype'][_0x4a80d9(0xb98)]=function(){const _0x2d7573=_0x4a80d9;VisuMZ[_0x2d7573(0xbe1)]['Sprite_Actor_updateBitmap'][_0x2d7573(0x432)](this),this[_0x2d7573(0x5ae)]&&this['_mainSprite'][_0x2d7573(0xc0b)]&&this['_battler']&&(this[_0x2d7573(0x5ae)]['bitmap'][_0x2d7573(0xac1)]!==this[_0x2d7573(0x437)]['battlerSmoothImage']()&&(this['_mainSprite']['bitmap'][_0x2d7573(0xac1)]=this[_0x2d7573(0x437)][_0x2d7573(0x647)]()));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x839)]=Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x604)],Sprite_Actor['prototype'][_0x4a80d9(0x604)]=function(){const _0x1edf91=_0x4a80d9;VisuMZ[_0x1edf91(0xbe1)][_0x1edf91(0x839)][_0x1edf91(0x432)](this),this[_0x1edf91(0x1fa)]();},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x1fa)]=function(){const _0x57315f=_0x4a80d9;if(!this['_mainSprite'])return;if(!this[_0x57315f(0x8a3)])return;this['updateShadowVisibility'](),this['updateShadowPosition']();},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x953)]=function(){const _0x4419f9=_0x4a80d9;this[_0x4419f9(0x174)][_0x4419f9(0xf4)]['x']=0x1/(this[_0x4419f9(0xf4)]['x']||0.001),this[_0x4419f9(0x174)][_0x4419f9(0xf4)]['y']=0x1/(this[_0x4419f9(0xf4)]['y']||0.001);},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x77b)]=function(){const _0x47c898=_0x4a80d9;if(!$gameSystem[_0x47c898(0x6e5)]()&&this[_0x47c898(0xc12)]===Sprite_Actor){const _0x44b906=Scene_Battle[_0x47c898(0xba6)][_0x47c898(0x4bb)]();if([_0x47c898(0x7e5),'list',_0x47c898(0x120),_0x47c898(0x33a)][_0x47c898(0xcf9)](_0x44b906)){if(_0x47c898(0xc0a)==='iuoGB')this[_0x47c898(0x2ff)]=0x0;else{const _0x480620=_0x28a116['isActor']()?_0x43c394[_0x47c898(0x9a4)]:_0x4e6463[_0x47c898(0xc09)];_0x480620&&_0xdceca1[_0x47c898(0xbe1)][_0x47c898(0x668)]['BattleLog'][_0x47c898(0x5be)]&&(this[_0x47c898(0x510)](_0x47c898(0x5b9)),this['push'](_0x47c898(0xcdc)),this['push'](_0x47c898(0x917)),this[_0x47c898(0x510)]('addText',_0x480620['format'](_0x1507aa['name']())),this[_0x47c898(0x510)]('wait')),_0x3f255b['id']===_0x13335b[_0x47c898(0x3c3)]()&&this[_0x47c898(0x510)]('performCollapse',_0x196078);}}}},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x7b7)]=function(){const _0x250311=_0x4a80d9,_0x4eb7c3=this[_0x250311(0x547)];if(_0x4eb7c3){if('qGXvf'!==_0x250311(0x9d4)){const _0x5803e8=_0x4eb7c3[_0x250311(0x2fd)]();if(_0x4eb7c3[_0x250311(0xc57)]()||_0x4eb7c3[_0x250311(0x7f5)]())this[_0x250311(0x736)](_0x250311(0x95b));else{if(_0x5803e8===0x3)this[_0x250311(0x736)](_0x250311(0xc84));else{if(_0x5803e8===0x2)this[_0x250311(0x736)](_0x250311(0x8b3));else{if(this[_0x250311(0x9ed)])this[_0x250311(0x736)]('escape');else{if(_0x4eb7c3['isCharging']())this[_0x250311(0x736)](_0x250311(0xca3));else{if(_0x4eb7c3[_0x250311(0x280)]())_0x250311(0x820)!==_0x250311(0x820)?_0x556a50[_0x250311(0x37f)]=_0x58b479(_0x5b29b0['$1'])[_0x250311(0x7ff)]()[_0x250311(0x893)]():this[_0x250311(0x736)]('chant');else{if(_0x4eb7c3[_0x250311(0xc2b)]()||_0x4eb7c3[_0x250311(0x45b)]())this[_0x250311(0x736)](_0x250311(0x79a));else{if(_0x5803e8===0x1)this[_0x250311(0x736)](_0x250311(0xaaf));else{if(_0x4eb7c3[_0x250311(0xaa7)]())this[_0x250311(0x736)](_0x250311(0x6df));else{if(_0x4eb7c3[_0x250311(0x93b)]())'LMfIX'===_0x250311(0xa0d)?this[_0x250311(0x643)]():this['startMotion'](_0x250311(0x95b));else _0x4eb7c3[_0x250311(0x51c)]()?this[_0x250311(0x736)]('wait'):this['startMotion'](_0x250311(0x95b));}}}}}}}}}}else return!![];}},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xcb6)]=function(){const _0x5ab192=_0x4a80d9,_0x5799c0=0xa,_0x4d13e0=0x12c*_0x5799c0,_0x2546ee=0x1e*_0x5799c0;this[_0x5ab192(0x163)](_0x4d13e0,0x0,_0x2546ee);},Sprite_Actor['prototype'][_0x4a80d9(0x28d)]=function(){const _0x2944a5=_0x4a80d9;Sprite_Battler[_0x2944a5(0xba6)]['onMoveEnd'][_0x2944a5(0x432)](this);},Sprite_Actor[_0x4a80d9(0xba6)]['motionSpeed']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x4a80d9(0xba6)]['animationWait']=function(){const _0x354f86=_0x4a80d9;return Sprite_Battler[_0x354f86(0x369)];},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x8bb)]=function(){},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x1a9)]=function(){},Sprite_Actor[_0x4a80d9(0xba6)]['updateMotionCount']=function(){const _0x1e7bd2=_0x4a80d9;if(this[_0x1e7bd2(0x38d)]&&++this[_0x1e7bd2(0x787)]>=this['motionSpeed']()){if(this[_0x1e7bd2(0x38d)]['loop']){if(_0x1e7bd2(0x391)!==_0x1e7bd2(0x391)){if(!_0x26ad34[_0x1e7bd2(0x1f8)]())return;const _0xdfa413=_0x14095b[_0x1e7bd2(0xc05)]();if(!_0xdfa413)return;_0xdfa413['setWaitMode']('battleInjectAni');}else this[_0x1e7bd2(0x55a)]=(this[_0x1e7bd2(0x55a)]+0x1)%0x4;}else this[_0x1e7bd2(0x55a)]<0x2?this[_0x1e7bd2(0x55a)]++:this[_0x1e7bd2(0x7b7)]();this[_0x1e7bd2(0x787)]=0x0;}},Sprite_Actor['prototype'][_0x4a80d9(0x889)]=function(_0x428d06){const _0x4c251e=_0x4a80d9;if(_0x428d06===_0x4c251e(0x410))this['_checkOn']=!![];if(this[_0x4c251e(0x437)]&&this[_0x4c251e(0x437)][_0x4c251e(0x50b)]()){this[_0x4c251e(0x38d)]=Sprite_Actor[_0x4c251e(0x4a3)][_0x4c251e(0xc84)];return;}const _0x4b91bc=Sprite_Actor[_0x4c251e(0x4a3)][_0x428d06];this['_motion']=_0x4b91bc,this[_0x4c251e(0x787)]=0x0,this[_0x4c251e(0x55a)]=0x0;},Sprite_Actor['prototype'][_0x4a80d9(0x38a)]=function(_0x174bbc){const _0x163e2f=_0x4a80d9;if(this[_0x163e2f(0x61d)]())return;this[_0x163e2f(0x4b8)](),this[_0x163e2f(0x550)]['setup'](_0x174bbc),this[_0x163e2f(0x547)][_0x163e2f(0x74a)]();},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x4b8)]=function(){const _0x2468b7=_0x4a80d9;let _0x418931=-0x10,_0x11c94c=this['height']*0.5;const _0x808456=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x5604d4=this[_0x2468b7(0x437)][_0x2468b7(0xc03)]()[_0x2468b7(0xc3f)](_0x3c5dc7=>_0x3c5dc7&&_0x3c5dc7[_0x2468b7(0x6c8)][_0x2468b7(0x605)](_0x808456)?Number(RegExp['$1']):0x0),_0x3b4ad6=this[_0x2468b7(0x437)][_0x2468b7(0xc03)]()[_0x2468b7(0xc3f)](_0x49c1d9=>_0x49c1d9&&_0x49c1d9[_0x2468b7(0x6c8)][_0x2468b7(0x605)](_0x808456)?Number(RegExp['$2']):0x0);_0x418931=_0x5604d4['reduce']((_0x52b1ce,_0xb989cd)=>_0x52b1ce+_0xb989cd,_0x418931),_0x11c94c=_0x3b4ad6[_0x2468b7(0xca6)]((_0xea8ee2,_0x2611d1)=>_0xea8ee2+_0x2611d1,_0x11c94c),this[_0x2468b7(0x550)]['x']=_0x418931,this['_weaponSprite']['y']=_0x11c94c,this['_weaponSprite'][_0x2468b7(0x333)]();},Sprite_Weapon['prototype'][_0x4a80d9(0x622)]=function(_0x5a6c6c){const _0x3a625a=_0x4a80d9;this[_0x3a625a(0x669)]=_0x5a6c6c,this[_0x3a625a(0x25e)]=-0x1,this[_0x3a625a(0x55a)]=0x0,this[_0x3a625a(0x9c9)](),this['updateFrame']();},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x69f)]=function(){},Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xa6b)]=function(){const _0x8c0162=_0x4a80d9,_0x1f5539=VisuMZ[_0x8c0162(0xbe1)][_0x8c0162(0x668)]['ActionSequence'],_0xa01091=_0x1f5539[_0x8c0162(0x563)],_0x3e6981=_0x1f5539[_0x8c0162(0x9b2)],_0x146b02=_0x1f5539[_0x8c0162(0x811)];this['startMove'](-_0xa01091,-_0x3e6981,_0x146b02);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x379)]=Sprite_Actor['prototype'][_0x4a80d9(0xa5f)],Sprite_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xa5f)]=function(){const _0x274366=_0x4a80d9;this[_0x274366(0x61d)]()?this['updateStaticSvBattlerFrames']():(this[_0x274366(0x909)](),VisuMZ[_0x274366(0xbe1)][_0x274366(0x379)]['call'](this));},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x58d7bc=_0x4a80d9;if(this[_0x58d7bc(0x437)]&&this[_0x58d7bc(0x437)][_0x58d7bc(0x8e2)]){const _0x15811d=this['_battler'][_0x58d7bc(0x8e2)];this[_0x58d7bc(0x38d)]=Sprite_Actor[_0x58d7bc(0x4a3)][_0x15811d[_0x58d7bc(0x20d)]],this[_0x58d7bc(0x55a)]=_0x15811d[_0x58d7bc(0x771)];const _0x1325f2=this[_0x58d7bc(0x550)];_0x1325f2[_0x58d7bc(0x236)](_0x15811d[_0x58d7bc(0x3ac)],_0x15811d[_0x58d7bc(0x771)]),this[_0x58d7bc(0x4b8)]();}},Sprite_Weapon['prototype'][_0x4a80d9(0x236)]=function(_0x25f8c6,_0x11f6e6){const _0x38b3e7=_0x4a80d9;this[_0x38b3e7(0x669)]=_0x25f8c6,this[_0x38b3e7(0x25e)]=-Infinity,this[_0x38b3e7(0x55a)]=_0x11f6e6,this['loadBitmap'](),this[_0x38b3e7(0xa5f)]();},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x8f0)]=function(){const _0x3d064f=_0x4a80d9;Sprite_Battler[_0x3d064f(0xba6)][_0x3d064f(0x8f0)][_0x3d064f(0x432)](this),this[_0x3d064f(0x808)]=null,this['_appeared']=![],this[_0x3d064f(0x8d9)]='',this[_0x3d064f(0x279)]=0x0,this[_0x3d064f(0x723)]=null,this[_0x3d064f(0x1f6)]=0x0,this[_0x3d064f(0x374)]=0x0,this[_0x3d064f(0xa49)](),this[_0x3d064f(0xc67)]();},VisuMZ['BattleCore'][_0x4a80d9(0x97f)]=Sprite_Enemy['prototype'][_0x4a80d9(0x333)],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x39148d=_0x4a80d9;VisuMZ[_0x39148d(0xbe1)][_0x39148d(0x97f)][_0x39148d(0x432)](this),this[_0x39148d(0x943)]();},Sprite_Enemy[_0x4a80d9(0xba6)]['createMainSprite']=function(){const _0x185a82=_0x4a80d9;this['_mainSprite']=new Sprite(),this[_0x185a82(0x5ae)]['anchor']['x']=0.5,this[_0x185a82(0x5ae)][_0x185a82(0x2dd)]['y']=0x1,this[_0x185a82(0xd02)](this[_0x185a82(0x5ae)]),this[_0x185a82(0x845)]();},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x2fc)]=function(){const _0x45a972=_0x4a80d9;return this['_distortionSprite']||this[_0x45a972(0x5ae)]||this;},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x9c9)]=function(_0x4edbc5){const _0x16d5f3=_0x4a80d9;this[_0x16d5f3(0xc0b)]=new Bitmap(0x1,0x1);if(this[_0x16d5f3(0x681)]()){const _0x197c98=this['_enemy']['svBattlerData']();this['bitmap']=new Bitmap(_0x197c98[_0x16d5f3(0x2ce)],_0x197c98[_0x16d5f3(0x8dc)]),this['_mainSprite'][_0x16d5f3(0xc0b)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x16d5f3(0x6e5)]()){if(_0x16d5f3(0xbc4)==='zniAO')this[_0x16d5f3(0xa4d)]();else{const _0x31b35f=ImageManager['loadSvEnemy'](_0x4edbc5);_0x31b35f['addLoadListener'](this[_0x16d5f3(0x1ba)][_0x16d5f3(0x88a)](this,_0x31b35f));}}else{const _0x243748=ImageManager[_0x16d5f3(0x873)](_0x4edbc5);_0x243748[_0x16d5f3(0x19f)](this[_0x16d5f3(0x1ba)][_0x16d5f3(0x88a)](this,_0x243748));}}},Sprite_Enemy['prototype'][_0x4a80d9(0x1ba)]=function(_0xdcf7e9){const _0x5bfcd0=_0x4a80d9;this['_mainSprite'][_0x5bfcd0(0xc0b)]=_0xdcf7e9,this[_0x5bfcd0(0xc0b)]=new Bitmap(_0xdcf7e9[_0x5bfcd0(0x2ce)],_0xdcf7e9['height']);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5d0)]=Sprite_Enemy['prototype'][_0x4a80d9(0xc1d)],Sprite_Enemy['prototype']['setHue']=function(_0x5ddc96){const _0x117438=_0x4a80d9;this['_mainSprite']&&this['_mainSprite'][_0x117438(0xc1d)](_0x5ddc96);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x4dc)]=Sprite_Enemy['prototype'][_0x4a80d9(0x6b5)],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x6b5)]=function(){const _0x1143fd=_0x4a80d9;this[_0x1143fd(0x245)]()?VisuMZ[_0x1143fd(0xbe1)][_0x1143fd(0x4dc)][_0x1143fd(0x432)](this):(this[_0x1143fd(0x261)]=!this[_0x1143fd(0x808)][_0x1143fd(0x9b1)](),!this[_0x1143fd(0x261)]&&(this[_0x1143fd(0x2ff)]=0x0));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3f7)]=Sprite_Enemy[_0x4a80d9(0xba6)]['updateCollapse'],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xbb7)]=function(){const _0x10a1c9=_0x4a80d9;if(this[_0x10a1c9(0x245)]())VisuMZ[_0x10a1c9(0xbe1)][_0x10a1c9(0x3f7)][_0x10a1c9(0x432)](this);},Sprite_Enemy['prototype'][_0x4a80d9(0xa5f)]=function(){const _0x426a64=_0x4a80d9;Sprite_Battler[_0x426a64(0xba6)][_0x426a64(0xa5f)][_0x426a64(0x432)](this);const _0xd3ba10=this[_0x426a64(0x2fc)]()||this;if(!_0xd3ba10)return;!_0xd3ba10[_0x426a64(0xc0b)]&&(_0xd3ba10[_0x426a64(0xc0b)]=new Bitmap(this[_0x426a64(0x2ce)],this[_0x426a64(0x8dc)])),this[_0x426a64(0x723)]===_0x426a64(0x2d0)?this[_0x426a64(0x5ae)][_0x426a64(0xabb)](0x0,0x0,this[_0x426a64(0x5ae)][_0x426a64(0x2ce)],this['_effectDuration']):_0xd3ba10[_0x426a64(0xabb)](0x0,0x0,_0xd3ba10['bitmap'][_0x426a64(0x2ce)],this[_0x426a64(0xc0b)][_0x426a64(0x8dc)]);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x27b)]=Sprite_Enemy['prototype'][_0x4a80d9(0xcbb)],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xcbb)]=function(){const _0x2f989b=_0x4a80d9;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x2f989b(0x27b)][_0x2f989b(0x432)](this);},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x5a7)]=function(){const _0x4e6b99=_0x4a80d9;return Sprite_Battler['prototype'][_0x4e6b99(0x5a7)]['call'](this);},VisuMZ[_0x4a80d9(0xbe1)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x953)],Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x953)]=function(){const _0x17260e=_0x4a80d9;VisuMZ[_0x17260e(0xbe1)][_0x17260e(0x96b)][_0x17260e(0x432)](this),this[_0x17260e(0x198)]();},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x198)]=function(){const _0x5ce03f=_0x4a80d9,_0x3dca21=VisuMZ['BattleCore'][_0x5ce03f(0x668)][_0x5ce03f(0x916)];if(_0x3dca21[_0x5ce03f(0x7ce)]&&!_0x3dca21[_0x5ce03f(0xadd)]){if('tNnLa'!==_0x5ce03f(0x7dd)){this[_0x5ce03f(0x621)][_0x5ce03f(0x2ff)]=0x0;return;}else _0x13da3b['push']('applyImmortal',_0xb92238,_0x3a8988,!![]);}this[_0x5ce03f(0x621)]['x']=0x0,this[_0x5ce03f(0x621)]['x']+=this[_0x5ce03f(0x437)][_0x5ce03f(0x108)](),this[_0x5ce03f(0x621)]['y']=-this[_0x5ce03f(0xc0b)][_0x5ce03f(0x8dc)]-this['_stateIconSprite'][_0x5ce03f(0x8dc)]-0x4,this[_0x5ce03f(0x621)]['y']+=this[_0x5ce03f(0x437)][_0x5ce03f(0xb18)](),this[_0x5ce03f(0x621)]['scale']['x']=0x1/(this[_0x5ce03f(0xf4)]['x']||0.001),this[_0x5ce03f(0x621)][_0x5ce03f(0xf4)]['y']=0x1/(this[_0x5ce03f(0xf4)]['y']||0.001),this[_0x5ce03f(0x681)]()&&(this[_0x5ce03f(0x2ae)]['_stateSprite'][_0x5ce03f(0xf4)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x5ce03f(0x2ae)]['_stateSprite'][_0x5ce03f(0xf4)]['y']=0x1/(this[_0x5ce03f(0xf4)]['y']||0.001));},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc97)]=Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0xbd5)],Sprite_Enemy['prototype'][_0x4a80d9(0xbd5)]=function(_0xf48b66){const _0x5adada=_0x4a80d9;VisuMZ['BattleCore']['Sprite_Enemy_setBattler']['call'](this,_0xf48b66),this[_0x5adada(0x755)](_0xf48b66);},Sprite_Enemy[_0x4a80d9(0xba6)]['setSvBattlerSprite']=function(_0x598bc1){const _0x26683e=_0x4a80d9;!this[_0x26683e(0x2ae)]&&(this[_0x26683e(0x2ae)]=new Sprite_SvEnemy(_0x598bc1),this['attachSpritesToDistortionSprite']()),this[_0x26683e(0x2ae)][_0x26683e(0xbd5)](_0x598bc1);},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x681)]=function(){const _0x2caf0b=_0x4a80d9;return this[_0x2caf0b(0x808)]&&this['_enemy'][_0x2caf0b(0x681)]();},Sprite_Enemy[_0x4a80d9(0xba6)]['allowCollapse']=function(){const _0x6a2459=_0x4a80d9;if(this[_0x6a2459(0x681)]()){if(_0x6a2459(0xa6c)!=='LiHGd')return this[_0x6a2459(0x808)]['allowCollapse']();else{this[_0x6a2459(0x7d5)](_0x1455ed);for(const _0x628d8c of _0x546047[_0x6a2459(0x325)]){_0x628d8c[_0x6a2459(0x5e3)]&&_0x628d8c[_0x6a2459(0x5e3)]();}_0x507fcb[_0x6a2459(0x5b7)]();}}else return!![];},Sprite_Enemy[_0x4a80d9(0xba6)]['refreshMotion']=function(){const _0x1cb79a=_0x4a80d9;this[_0x1cb79a(0x681)]()&&this['_svBattlerSprite'][_0x1cb79a(0x7b7)]();},Sprite_Enemy[_0x4a80d9(0xba6)][_0x4a80d9(0x889)]=function(_0x25e251){const _0x5c62ab=_0x4a80d9;if(this[_0x5c62ab(0x681)]())this['_svBattlerSprite'][_0x5c62ab(0x889)](_0x25e251);},Sprite_Enemy['prototype'][_0x4a80d9(0x38a)]=function(_0x388786){const _0x5b5331=_0x4a80d9;if(this[_0x5b5331(0x681)]())this[_0x5b5331(0x2ae)][_0x5b5331(0x38a)](_0x388786);},Sprite_Enemy['prototype'][_0x4a80d9(0xa6b)]=function(){const _0x3542c6=_0x4a80d9,_0x3b3785=VisuMZ[_0x3542c6(0xbe1)][_0x3542c6(0x668)][_0x3542c6(0x8e0)],_0x336c01=_0x3b3785[_0x3542c6(0x563)],_0x4bb0fd=_0x3b3785[_0x3542c6(0x9b2)],_0x4286ac=_0x3b3785['StepDuration'];this[_0x3542c6(0x163)](_0x336c01,_0x4bb0fd,_0x4286ac);};function _0x3fe6(_0x1d4185,_0x5cf987){const _0x941ed7=_0x941e();return _0x3fe6=function(_0x3fe6a2,_0x21e0a7){_0x3fe6a2=_0x3fe6a2-0xf0;let _0x36433b=_0x941ed7[_0x3fe6a2];return _0x36433b;},_0x3fe6(_0x1d4185,_0x5cf987);}function Sprite_SvEnemy(){const _0x2bbb17=_0x4a80d9;this[_0x2bbb17(0x54a)](...arguments);}Sprite_SvEnemy[_0x4a80d9(0xba6)]=Object[_0x4a80d9(0x5e8)](Sprite_Actor[_0x4a80d9(0xba6)]),Sprite_SvEnemy['prototype'][_0x4a80d9(0xc12)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x4a80d9(0x54a)]=function(_0x562cbb){const _0x11fac0=_0x4a80d9;Sprite_Actor[_0x11fac0(0xba6)][_0x11fac0(0x54a)][_0x11fac0(0x432)](this,_0x562cbb),this[_0x11fac0(0xf4)]['x']=-0x1,this[_0x11fac0(0x174)][_0x11fac0(0xf4)]['x']=-0x1;},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x4b0)]=function(){},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x125)]=function(){},Sprite_SvEnemy['prototype'][_0x4a80d9(0x936)]=function(_0x1ca8c0){},Sprite_SvEnemy['prototype'][_0x4a80d9(0x604)]=function(){},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x8ee)]=function(){},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x953)]=function(){const _0x207c91=_0x4a80d9;this[_0x207c91(0x174)]['visible']=![];},Sprite_SvEnemy['prototype'][_0x4a80d9(0xb98)]=function(){const _0x55e275=_0x4a80d9;Sprite_Battler['prototype']['updateBitmap'][_0x55e275(0x432)](this);const _0x37648a=this[_0x55e275(0x547)][_0x55e275(0x211)]();if(this[_0x55e275(0x8d9)]!==_0x37648a){if(_0x55e275(0x3d6)!==_0x55e275(0x3cb))this[_0x55e275(0x8d9)]=_0x37648a,this[_0x55e275(0x5ae)]['bitmap']=ImageManager[_0x55e275(0x487)](_0x37648a);else{_0x42395d[_0x55e275(0xba6)]['callOkHandler'][_0x55e275(0x432)](this);if(this[_0x55e275(0x378)]()['isEnemy']())this[_0x55e275(0x89f)]=this[_0x55e275(0x378)]();if(this[_0x55e275(0x378)]()['isActor']())this[_0x55e275(0x466)]=this[_0x55e275(0x378)]();}}this['_mainSprite']&&this[_0x55e275(0x5ae)][_0x55e275(0xc0b)]&&this[_0x55e275(0x437)]&&(this[_0x55e275(0x5ae)][_0x55e275(0xc0b)]['smooth']!==this[_0x55e275(0x437)][_0x55e275(0x647)]()&&(this['_mainSprite'][_0x55e275(0xc0b)][_0x55e275(0xac1)]=this['_battler'][_0x55e275(0x647)]()));},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0xcb6)]=function(){},Sprite_SvEnemy['prototype'][_0x4a80d9(0x163)]=function(_0x2ac6f9,_0xbae2e2,_0x5eaf83){const _0x49fbd4=_0x4a80d9;if(this['parent'])this['parent'][_0x49fbd4(0x163)](_0x2ac6f9,_0xbae2e2,_0x5eaf83);},Sprite_SvEnemy['prototype'][_0x4a80d9(0x7b7)]=function(){const _0x16c875=_0x4a80d9,_0x434b69=this[_0x16c875(0x547)];if(_0x434b69){const _0x1a1752=_0x434b69[_0x16c875(0x2fd)]();if(_0x434b69[_0x16c875(0xc57)]()||_0x434b69[_0x16c875(0x7f5)]())this[_0x16c875(0x736)]('walk');else{if(_0x1a1752===0x3)this[_0x16c875(0x736)]('dead');else{if(_0x1a1752===0x2){if(_0x16c875(0x6f7)===_0x16c875(0x6f7))this[_0x16c875(0x736)]('sleep');else return!this[_0x16c875(0x68e)]();}else{if(_0x434b69[_0x16c875(0x280)]())this[_0x16c875(0x736)](_0x16c875(0x17f));else{if(_0x434b69[_0x16c875(0xc2b)]()||_0x434b69[_0x16c875(0x45b)]())_0x16c875(0x1c0)===_0x16c875(0x1c0)?this['startMotion']('guard'):_0x167ffb['setHandler'](_0x16c875(0x645),this[_0x16c875(0x1f2)]['bind'](this));else{if(_0x1a1752===0x1)this[_0x16c875(0x736)](_0x16c875(0xaaf));else{if(_0x434b69[_0x16c875(0xaa7)]())this['startMotion']('dying');else{if(_0x434b69[_0x16c875(0x93b)]()){if('gNUzc'!=='gNUzc'){let _0x45a784=this[_0x16c875(0xafa)]()?_0x4420eb['ALL_ACTORS']:_0xdf4c71[_0x16c875(0x5b8)];if(_0x54d709[_0x16c875(0xb80)]&&_0x3ae002[_0x16c875(0x982)]){this[_0x16c875(0x609)]=this[_0x16c875(0xafa)]()?_0x16c875(0x23c):_0x16c875(0xbdf),this[_0x16c875(0x730)]=_0xbfbdad[_0x16c875(0x696)](this[_0x16c875(0x609)]);const _0x2fee6c=_0x3b24c9[_0x16c875(0x208)][_0x16c875(0x668)][_0x16c875(0x942)]['TextFmt'];_0x45a784=_0x2fee6c['format'](this[_0x16c875(0x730)],_0x45a784);}this['addCommand'](_0x45a784,'selectAll');}else this[_0x16c875(0x736)](_0x16c875(0x95b));}else this['startMotion'](_0x434b69[_0x16c875(0xa38)]()[_0x16c875(0x83a)]||_0x16c875(0x95b));}}}}}}}}},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x824)]=function(){const _0x122afa=_0x4a80d9;return this[_0x122afa(0x4a2)]?this[_0x122afa(0x4a2)]['_offsetX']===0x0&&this[_0x122afa(0x4a2)][_0x122afa(0x7bc)]===0x0:'qYOzY'!=='qYOzY'?_0x1d124a[_0x122afa(0xbe1)][_0x122afa(0x668)][_0x122afa(0x490)][_0x122afa(0x7d4)]:!![];},Sprite_SvEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x271)]=function(){},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xa1f)]=Sprite_Animation[_0x4a80d9(0xba6)][_0x4a80d9(0x848)],Sprite_Animation[_0x4a80d9(0xba6)]['targetSpritePosition']=function(_0x361d1a){const _0x2dccd7=_0x4a80d9;return _0x361d1a[_0x2dccd7(0x852)]?this[_0x2dccd7(0xc6a)](_0x361d1a):VisuMZ[_0x2dccd7(0xbe1)]['Sprite_Animation_targetSpritePosition'][_0x2dccd7(0x432)](this,_0x361d1a);},Sprite_Animation[_0x4a80d9(0xba6)]['targetDistortionSpritePosition']=function(_0x1b0a07){const _0x3d4cea=_0x4a80d9;let _0x4a9304=_0x1b0a07['x'],_0x493ff5=_0x1b0a07['y'],_0x58242c=_0x1b0a07[_0x3d4cea(0x8dc)],_0x2bc435=_0x1b0a07[_0x3d4cea(0x852)][_0x3d4cea(0xf4)]['y'];_0x1b0a07['x']=_0x1b0a07[_0x3d4cea(0x9ec)]+_0x1b0a07[_0x3d4cea(0x4ed)](),_0x1b0a07['y']=_0x1b0a07[_0x3d4cea(0x1d5)]+_0x1b0a07[_0x3d4cea(0xb7c)](),_0x1b0a07[_0x3d4cea(0x8dc)]*=_0x2bc435;let _0x185501=VisuMZ[_0x3d4cea(0xbe1)][_0x3d4cea(0xa1f)][_0x3d4cea(0x432)](this,_0x1b0a07);return _0x1b0a07['x']=_0x4a9304,_0x1b0a07['y']=_0x493ff5,_0x1b0a07[_0x3d4cea(0x8dc)]=_0x58242c,_0x185501;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x10f)]=Sprite_AnimationMV[_0x4a80d9(0xba6)][_0x4a80d9(0x26e)],Sprite_AnimationMV[_0x4a80d9(0xba6)][_0x4a80d9(0x26e)]=function(){const _0x5aeb27=_0x4a80d9;VisuMZ['BattleCore'][_0x5aeb27(0x10f)][_0x5aeb27(0x432)](this);if(!SceneManager[_0x5aeb27(0x1f8)]())return;if(this[_0x5aeb27(0xc17)][_0x5aeb27(0x18c)]===0x3){if(_0x5aeb27(0xc64)!==_0x5aeb27(0xc64))return _0x9d3206[_0x5aeb27(0xbe1)][_0x5aeb27(0x668)][_0x5aeb27(0x490)][_0x5aeb27(0x655)]||![];else this['x']=Math[_0x5aeb27(0x961)](Graphics[_0x5aeb27(0x84d)]/0x2),this['y']=Math[_0x5aeb27(0x961)](Graphics[_0x5aeb27(0x91f)]/0x2);}else{if(this[_0x5aeb27(0x222)])return;}},Sprite_Damage[_0x4a80d9(0xba6)]['setupBattleCore']=function(_0x3989a0){const _0x45612e=_0x4a80d9,_0x130b6e=_0x3989a0[_0x45612e(0x886)]()||_0x3989a0[_0x45612e(0x4ac)]();if(_0x130b6e[_0x45612e(0x534)]||_0x130b6e['evaded']){if(_0x45612e(0xa43)!==_0x45612e(0xcac))this['_colorType']=0x0,this[_0x45612e(0x73a)]();else return this[_0x45612e(0x488)](_0xd97707);}else{if(_0x130b6e['hpAffected'])this[_0x45612e(0xbc6)]=_0x130b6e[_0x45612e(0x9c0)]>=0x0?0x0:0x1,this['createDigits'](_0x130b6e['hpDamage']);else{if(_0x3989a0['isAlive']()&&_0x130b6e[_0x45612e(0x4a9)]!==0x0){if(_0x45612e(0x47c)!=='fhgBz')return this[_0x45612e(0x51c)]()&&this[_0x45612e(0x51c)]()[_0x45612e(0x6af)]()&&this[_0x45612e(0x51c)]()[_0x45612e(0x2c0)]();else this[_0x45612e(0xbc6)]=_0x130b6e[_0x45612e(0x4a9)]>=0x0?0x2:0x3,this['createDigits'](_0x130b6e[_0x45612e(0x4a9)]);}}}if(_0x130b6e[_0x45612e(0x854)]){if(_0x45612e(0x894)!==_0x45612e(0x894))return this['chantStyle']()?this[_0x45612e(0x51c)]()&&this[_0x45612e(0x51c)]()[_0x45612e(0x6af)]()&&this[_0x45612e(0x51c)]()[_0x45612e(0x61f)]():this[_0x45612e(0x51c)]()&&this['currentAction']()[_0x45612e(0x6af)]()&&this[_0x45612e(0x51c)]()[_0x45612e(0x2c0)]();else this['setupCriticalEffect']();}},Sprite_Damage[_0x4a80d9(0xba6)][_0x4a80d9(0x622)]=function(_0x5fb46e){},Sprite_Damage[_0x4a80d9(0xba6)][_0x4a80d9(0xa37)]=function(_0x1a8da9){const _0x52f62d=_0x4a80d9;let _0x5a8447=this[_0x52f62d(0xb74)](_0x1a8da9);const _0xc084b=this['fontSize'](),_0x25ee36=Math[_0x52f62d(0x506)](_0xc084b*0.75);for(let _0x2afd10=0x0;_0x2afd10<_0x5a8447[_0x52f62d(0x6fc)];_0x2afd10++){const _0xed0968=this['createChildSprite'](_0x25ee36,_0xc084b);_0xed0968[_0x52f62d(0xc0b)][_0x52f62d(0x3ce)](_0x5a8447[_0x2afd10],0x0,0x0,_0x25ee36,_0xc084b,'center'),_0xed0968['x']=(_0x2afd10-(_0x5a8447[_0x52f62d(0x6fc)]-0x1)/0x2)*_0x25ee36,_0xed0968['dy']=-_0x2afd10;}},Sprite_Damage['prototype'][_0x4a80d9(0xb74)]=function(_0x2d9b59){const _0x106139=_0x4a80d9;let _0x3725db=Math['abs'](_0x2d9b59)[_0x106139(0x986)]();if(this[_0x106139(0xa7a)]()){if(_0x106139(0x3a1)!=='wYyuS')_0x3725db=VisuMZ[_0x106139(0xaa3)](_0x3725db);else return!![];}const _0x4eb153=VisuMZ[_0x106139(0xbe1)][_0x106139(0x668)]['Damage'];let _0x565b13='',_0x5fd388='';switch(this[_0x106139(0xbc6)]){case 0x0:_0x565b13=_0x4eb153[_0x106139(0xa1b)]||_0x106139(0xafb),_0x5fd388=TextManager['hp'];if(_0x2d9b59===0x0)_0x565b13='%1';break;case 0x1:_0x565b13=_0x4eb153['hpHealingFmt']||_0x106139(0x9e7),_0x5fd388=TextManager['hp'];break;case 0x2:_0x565b13=_0x4eb153[_0x106139(0x44c)]||_0x106139(0x405),_0x5fd388=TextManager['mp'];break;case 0x3:_0x565b13=_0x4eb153['mpHealingFmt']||_0x106139(0x810),_0x5fd388=TextManager['mp'];break;}return _0x565b13[_0x106139(0x7d6)](_0x3725db,_0x5fd388)['trim']();},Sprite_Damage[_0x4a80d9(0xba6)][_0x4a80d9(0xa7a)]=function(){const _0x13dd1a=_0x4a80d9;return Imported[_0x13dd1a(0xb80)]?VisuMZ[_0x13dd1a(0x208)][_0x13dd1a(0x668)][_0x13dd1a(0x9e3)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x4a80d9(0xba6)]['setupCriticalEffect']=function(){const _0x275690=_0x4a80d9,_0x1953e5=VisuMZ[_0x275690(0xbe1)][_0x275690(0x668)][_0x275690(0x6ea)];this['_flashColor']=_0x1953e5[_0x275690(0xb37)][_0x275690(0x8d8)](0x0),this[_0x275690(0x785)]=_0x1953e5[_0x275690(0x883)];},Sprite_Damage[_0x4a80d9(0xba6)]['setupTextPopup']=function(_0x506fb5,_0x4a4171){const _0xb5bce0=_0x4a80d9;this[_0xb5bce0(0x1da)]=_0x4a4171[_0xb5bce0(0x82c)]||[0x0,0x0,0x0,0x0],this[_0xb5bce0(0x1da)]=JsonEx[_0xb5bce0(0xa9b)](this['_flashColor']),this[_0xb5bce0(0x785)]=_0x4a4171[_0xb5bce0(0xb83)]||0x0;const _0x2fbaaf=this['fontSize'](),_0x14c55b=Math[_0xb5bce0(0x506)](_0x2fbaaf*0x1e),_0x13e04d=this['createChildSprite'](_0x14c55b,_0x2fbaaf);_0x13e04d[_0xb5bce0(0xc0b)][_0xb5bce0(0xbb3)]=ColorManager['getColor'](_0x4a4171[_0xb5bce0(0xbb3)]),_0x13e04d[_0xb5bce0(0xc0b)][_0xb5bce0(0x3ce)](_0x506fb5,0x0,0x0,_0x14c55b,_0x2fbaaf,_0xb5bce0(0x4c5)),_0x13e04d['dy']=0x0;},Sprite_Damage[_0x4a80d9(0xba6)][_0x4a80d9(0xb4a)]=function(_0x2f866b,_0x527dfd,_0x2bc586){const _0x4cff16=_0x4a80d9,_0xcdf0b=Math[_0x4cff16(0x78c)](this[_0x4cff16(0x885)](),ImageManager[_0x4cff16(0x867)]),_0x37d5a8=Math[_0x4cff16(0x506)](_0xcdf0b*0x1e),_0x1fe51e=this['createChildSprite'](_0x37d5a8,_0xcdf0b),_0x1e2db5=ImageManager[_0x4cff16(0xcbd)]/0x2,_0x453b3d=_0x1fe51e['bitmap'][_0x4cff16(0x5ab)](_0x527dfd+'\x20');_0x1fe51e[_0x4cff16(0xc0b)][_0x4cff16(0xbb3)]=ColorManager[_0x4cff16(0x714)](_0x2bc586['textColor']),_0x1fe51e['bitmap'][_0x4cff16(0x3ce)](_0x527dfd,_0x1e2db5,0x0,_0x37d5a8-_0x1e2db5,_0xcdf0b,_0x4cff16(0x4c5));const _0x386efa=Math['round']((_0xcdf0b-ImageManager['iconHeight'])/0x2),_0x2393b=_0x37d5a8/0x2-ImageManager['iconWidth']-_0x453b3d/0x2+_0x1e2db5/0x2,_0xe855ca=ImageManager[_0x4cff16(0x7c7)](_0x4cff16(0xb66)),_0x248dc9=ImageManager[_0x4cff16(0xcbd)],_0x412ab3=ImageManager['iconHeight'],_0x4f54b5=_0x2f866b%0x10*_0x248dc9,_0x1952ac=Math['floor'](_0x2f866b/0x10)*_0x412ab3;_0x1fe51e['bitmap'][_0x4cff16(0x55c)](_0xe855ca,_0x4f54b5,_0x1952ac,_0x248dc9,_0x412ab3,_0x2393b,_0x386efa),this[_0x4cff16(0x1da)]=_0x2bc586[_0x4cff16(0x82c)]||[0x0,0x0,0x0,0x0],this[_0x4cff16(0x1da)]=JsonEx[_0x4cff16(0xa9b)](this[_0x4cff16(0x1da)]),this['_flashDuration']=_0x2bc586[_0x4cff16(0xb83)]||0x0,_0x1fe51e['dy']=0x0;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xb8b)]=Sprite_Damage['prototype'][_0x4a80d9(0x4e9)],Sprite_Damage['prototype'][_0x4a80d9(0x4e9)]=function(_0x4df08d,_0xb3b733){const _0x2df641=_0x4a80d9;return _0xb3b733=Math[_0x2df641(0x961)](_0xb3b733*1.2),VisuMZ[_0x2df641(0xbe1)][_0x2df641(0xb8b)][_0x2df641(0x432)](this,_0x4df08d,_0xb3b733);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x6fd)]=Sprite_StateIcon[_0x4a80d9(0xba6)][_0x4a80d9(0xa5f)],Sprite_StateIcon[_0x4a80d9(0xba6)][_0x4a80d9(0xa5f)]=function(){const _0x148faa=_0x4a80d9;VisuMZ[_0x148faa(0xbe1)][_0x148faa(0x6fd)][_0x148faa(0x432)](this),this['opacity']=this[_0x148faa(0x38c)]>0x0?0xff:0x0;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x33f)]=Sprite_Weapon['prototype'][_0x4a80d9(0x9c9)],Sprite_Weapon['prototype'][_0x4a80d9(0x9c9)]=function(){const _0x340a58=_0x4a80d9;VisuMZ[_0x340a58(0xbe1)][_0x340a58(0x33f)]['call'](this),this['bitmap']&&(this[_0x340a58(0xc0b)][_0x340a58(0xac1)]=VisuMZ[_0x340a58(0xbe1)][_0x340a58(0x668)]['Actor'][_0x340a58(0x73e)]);},VisuMZ[_0x4a80d9(0xbe1)]['Sprite_Gauge_smoothness']=Sprite_Gauge[_0x4a80d9(0xba6)][_0x4a80d9(0xf9)],Sprite_Gauge[_0x4a80d9(0xba6)][_0x4a80d9(0xf9)]=function(){const _0x2546f8=_0x4a80d9;return this[_0x2546f8(0x513)]!==_0x2546f8(0xa67)?VisuMZ['BattleCore'][_0x2546f8(0x668)][_0x2546f8(0x5f0)][_0x2546f8(0x42c)]??0x14:VisuMZ['BattleCore'][_0x2546f8(0x9f7)][_0x2546f8(0x432)](this);};function Sprite_HpGauge(){const _0x1cb0fe=_0x4a80d9;this[_0x1cb0fe(0x54a)](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge['prototype'][_0x4a80d9(0xc12)]=Sprite_HpGauge,Sprite_HpGauge[_0x4a80d9(0xba6)]['initialize']=function(){const _0x59a19a=_0x4a80d9;Sprite_Gauge[_0x59a19a(0xba6)][_0x59a19a(0x54a)][_0x59a19a(0x432)](this);},Sprite_HpGauge[_0x4a80d9(0xba6)][_0x4a80d9(0x2ed)]=function(){return 0x0;},Sprite_HpGauge[_0x4a80d9(0xba6)][_0x4a80d9(0x39b)]=function(){const _0x42c7e8=_0x4a80d9;this[_0x42c7e8(0xc0b)][_0x42c7e8(0x2b9)]();const _0x143934=this[_0x42c7e8(0x555)]();!isNaN(_0x143934)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x1758fb=_0x4a80d9;this[_0x1758fb(0x54a)](...arguments);}Sprite_EnemyName[_0x4a80d9(0xba6)]=Object[_0x4a80d9(0x5e8)](Sprite_Name[_0x4a80d9(0xba6)]),Sprite_EnemyName['prototype'][_0x4a80d9(0xc12)]=Sprite_EnemyName,Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(){const _0x5ccee2=_0x4a80d9;Sprite_Name[_0x5ccee2(0xba6)]['initialize'][_0x5ccee2(0x432)](this),this[_0x5ccee2(0x5dd)]();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0x127870=_0x4a80d9;Sprite_Name['prototype']['initMembers'][_0x127870(0x432)](this),this['opacity']=0x0,this[_0x127870(0x26b)]=null,this[_0x127870(0x2dd)]['x']=0.5,this[_0x127870(0x2dd)]['y']=0x0;},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x5dd)]=function(){const _0x1ba925=_0x4a80d9;VisuMZ[_0x1ba925(0xbe1)][_0x1ba925(0x668)][_0x1ba925(0x916)][_0x1ba925(0x7ce)]&&(this[_0x1ba925(0x621)]=new Sprite_StateIcon(),this[_0x1ba925(0xd02)](this[_0x1ba925(0x621)]));},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0xaca)]=function(){const _0x502daa=_0x4a80d9;return Graphics[_0x502daa(0x84d)];},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x8fc)]=function(){const _0x3479df=_0x4a80d9;return this['_lineHeight']=this['_lineHeight']||Window_Base[_0x3479df(0xba6)][_0x3479df(0x4da)]()||0x24,this[_0x3479df(0xa61)]*0x4;},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x885)]=function(){const _0x5e9294=_0x4a80d9;return VisuMZ[_0x5e9294(0xbe1)][_0x5e9294(0x668)][_0x5e9294(0x916)][_0x5e9294(0x63d)]||$gameSystem[_0x5e9294(0x552)]();},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0xbf8)]=function(_0x237c16){const _0x1bae3f=_0x4a80d9;this[_0x1bae3f(0x26b)]=_0x237c16;},Sprite_EnemyName['prototype']['update']=function(){const _0x4acb9b=_0x4a80d9;Sprite_Name[_0x4acb9b(0xba6)][_0x4acb9b(0x333)][_0x4acb9b(0x432)](this),this[_0x4acb9b(0x67b)](),this[_0x4acb9b(0x26e)](),this[_0x4acb9b(0xa32)](),this[_0x4acb9b(0x21b)]();},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x39b)]=function(){const _0x113649=_0x4a80d9;this[_0x113649(0x5d7)]=undefined;const _0x19d66d=this['name'](),_0x3a497f=this[_0x113649(0xaca)](),_0x3926bf=Window_Base[_0x113649(0xba6)][_0x113649(0x4da)]();this[_0x113649(0xa5d)](),this[_0x113649(0xc0b)]['clear'](),this[_0x113649(0xc0b)]['drawText'](_0x19d66d,0x0,0x0,_0x3a497f,_0x3926bf,_0x113649(0x4c5));},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x67b)]=function(){const _0x15545f=_0x4a80d9;if(!this[_0x15545f(0x26b)])return;if(this[_0x15545f(0x437)]!==this[_0x15545f(0x26b)][_0x15545f(0x437)]){if(_0x15545f(0x5d4)===_0x15545f(0xa97))return _0x47042f[_0x15545f(0x997)]()[_0x15545f(0x1d5)]-_0x38d385[_0x15545f(0x997)]()[_0x15545f(0x1d5)];else this[_0x15545f(0x622)](this[_0x15545f(0x26b)][_0x15545f(0x437)]);}},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x26e)]=function(){const _0x1955ea=_0x4a80d9;if(!this['_linkedSprite'])return;this['_lineHeight']=this[_0x1955ea(0xa61)]||Window_Base[_0x1955ea(0xba6)][_0x1955ea(0x4da)](),this['x']=Math[_0x1955ea(0x961)](this[_0x1955ea(0x26b)][_0x1955ea(0x9ec)]),this['y']=Math[_0x1955ea(0x961)](this[_0x1955ea(0x26b)][_0x1955ea(0x1d5)]-this[_0x1955ea(0xa61)]*0.5);const _0x44cf0e=VisuMZ[_0x1955ea(0xbe1)][_0x1955ea(0x668)][_0x1955ea(0x916)];this['x']+=Math[_0x1955ea(0x961)](_0x44cf0e[_0x1955ea(0xb9e)]||0x0),this['y']+=Math['round'](_0x44cf0e[_0x1955ea(0x932)]||0x0);},Sprite_EnemyName[_0x4a80d9(0xba6)]['updateAttachedSprites']=function(){const _0x2c14b1=_0x4a80d9;this[_0x2c14b1(0x6f5)]();},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x6f5)]=function(){const _0x25499d=_0x4a80d9;if(!this[_0x25499d(0x621)])return;if(this[_0x25499d(0x437)]!==this[_0x25499d(0x621)][_0x25499d(0x437)]){if(_0x25499d(0x801)==='dfUtP')return _0xe28792[_0x25499d(0xbe1)]['Sprite_Gauge_smoothness'][_0x25499d(0x432)](this);else this[_0x25499d(0x621)][_0x25499d(0x622)](this[_0x25499d(0x437)]);}const _0x3728b8=this[_0x25499d(0xa7f)]();this['_lineHeight']=this[_0x25499d(0xa61)]||Window_Base[_0x25499d(0xba6)][_0x25499d(0x4da)](),this[_0x25499d(0x621)]['x']=Math[_0x25499d(0x961)]((_0x3728b8+ImageManager[_0x25499d(0xcbd)])/0x2)+0x8,this[_0x25499d(0x621)]['y']=this[_0x25499d(0xa61)]/0x2;const _0x395de3=VisuMZ[_0x25499d(0xbe1)][_0x25499d(0x668)][_0x25499d(0x916)];this[_0x25499d(0x621)]['x']+=_0x395de3[_0x25499d(0x566)]||0x0,this['_stateIconSprite']['y']+=_0x395de3[_0x25499d(0xa0c)]||0x0;},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x21b)]=function(){const _0x267190=_0x4a80d9,_0x3c1997=this[_0x267190(0xc35)]();if(_0x3c1997&&this['opacity']<0xff)this['opacity']+=0x10;else!_0x3c1997&&this['opacity']>0x0&&(_0x267190(0x41c)===_0x267190(0x41c)?this[_0x267190(0x2ff)]-=0x10:_0x12d6a3=_0x3793b9>=_0x59463f?_0x35d241:_0x488bb7);},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0xc35)]=function(){const _0x3929bd=_0x4a80d9;if(this[_0x3929bd(0xf6)]())return![];else{if(!this['_battler']){if(_0x3929bd(0x634)===_0x3929bd(0x1bc)){if(this[_0x3929bd(0x5eb)]===_0x3929bd(0xa98))return![];if(this[_0x3929bd(0x5eb)]==='all\x20enemies')return![];if(!this[_0x3929bd(0x899)]&&this['subject']()['isConfused']())return![];if(this[_0x3929bd(0x3ae)]())return!![];if(!this[_0x3929bd(0x6af)]())return![];return typeof this[_0x3929bd(0x6af)]()[_0x3929bd(0x37f)]===_0x3929bd(0xcbf);}else return![];}else{if(this[_0x3929bd(0x437)][_0x3929bd(0x50b)]())return![];else{if(!this[_0x3929bd(0x437)][_0x3929bd(0x662)]())return![];else{if(this[_0x3929bd(0xa20)]())return!![];else{if(this[_0x3929bd(0xbe0)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x3929bd(0x2ff)]>0x0){if(_0x3929bd(0xbb1)!=='ZgVJy')return![];else this['_cursorArea']['visible']=this['isOpen']();}}}}}}}}},Sprite_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0xf6)]=function(){const _0x17e90e=_0x4a80d9;return VisuMZ[_0x17e90e(0xbe1)][_0x17e90e(0x668)][_0x17e90e(0x916)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x4a80d9(0xba6)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x4a80d9(0xba6)]['isAlwaysVisible']=function(){const _0x46e45d=_0x4a80d9;return VisuMZ['BattleCore'][_0x46e45d(0x668)]['Enemy'][_0x46e45d(0xbea)];},Sprite_EnemyName[_0x4a80d9(0xba6)]['isIncludedInEnemyWindow']=function(){const _0x46263d=_0x4a80d9;if(VisuMZ[_0x46263d(0xbe1)]['Settings'][_0x46263d(0x916)][_0x46263d(0x7f1)]){if('XIlEN'!==_0x46263d(0xbb6))return this['_battler'][_0x46263d(0x904)]();else this[_0x46263d(0x2be)](!![]);}else return SceneManager[_0x46263d(0xb97)][_0x46263d(0x9bc)]&&SceneManager[_0x46263d(0xb97)][_0x46263d(0x9bc)][_0x46263d(0x7c0)]&&SceneManager[_0x46263d(0xb97)]['_enemyWindow']['_enemies'][_0x46263d(0xcf9)](this[_0x46263d(0x437)]);},Sprite_EnemyName[_0x4a80d9(0xba6)]['textWidth']=function(){const _0x9860e3=_0x4a80d9;if(!this[_0x9860e3(0x437)])return 0x0;if(this[_0x9860e3(0x5d7)])return this['_cacheTextWidth'];const _0x958647=this[_0x9860e3(0x380)]();return this[_0x9860e3(0xa5d)](),this[_0x9860e3(0x5d7)]=this[_0x9860e3(0xc0b)]['measureTextWidth'](_0x958647)||0x1,this[_0x9860e3(0x5d7)];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x4eb)]=Sprite_Battleback['prototype'][_0x4a80d9(0x993)],Sprite_Battleback[_0x4a80d9(0xba6)][_0x4a80d9(0x993)]=function(){const _0x58cd88=_0x4a80d9,_0x30d4b8=VisuMZ[_0x58cd88(0xbe1)][_0x58cd88(0x668)]['BattlebackScale'];if(!_0x30d4b8)return VisuMZ[_0x58cd88(0xbe1)][_0x58cd88(0x4eb)]['call'](this);const _0x30c333=String(_0x30d4b8['DefaultStyle'])||'MZ';switch(_0x30c333){case'MZ':VisuMZ[_0x58cd88(0xbe1)][_0x58cd88(0x4eb)]['call'](this);break;case'1:1':this[_0x58cd88(0x443)]();break;case _0x58cd88(0x99f):this[_0x58cd88(0x9de)]();break;case _0x58cd88(0x38b):this[_0x58cd88(0x47a)]();break;case _0x58cd88(0xc04):this[_0x58cd88(0xb64)]();break;}},Sprite_Battleback[_0x4a80d9(0xba6)][_0x4a80d9(0x443)]=function(){const _0x22e0fb=_0x4a80d9,_0x373cdf=VisuMZ[_0x22e0fb(0xbe1)][_0x22e0fb(0x668)][_0x22e0fb(0x75d)];if(_0x373cdf&&_0x373cdf['jsOneForOne'])return _0x373cdf[_0x22e0fb(0x8a5)]['call'](this);this[_0x22e0fb(0x2ce)]=Graphics[_0x22e0fb(0x2ce)],this[_0x22e0fb(0x8dc)]=Graphics[_0x22e0fb(0x8dc)];const _0x36ca42=0x1;this['scale']['x']=_0x36ca42,this[_0x22e0fb(0xf4)]['y']=_0x36ca42,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4a80d9(0xba6)][_0x4a80d9(0x9de)]=function(){const _0x9fe015=_0x4a80d9,_0x41d3ca=VisuMZ[_0x9fe015(0xbe1)][_0x9fe015(0x668)][_0x9fe015(0x75d)];if(_0x41d3ca&&_0x41d3ca[_0x9fe015(0x4bc)]){if(_0x9fe015(0x9cb)!==_0x9fe015(0x9cb))this[_0x9fe015(0x3d1)]['removeChild'](_0x369400);else return _0x41d3ca[_0x9fe015(0x4bc)][_0x9fe015(0x432)](this);}this[_0x9fe015(0x2ce)]=Graphics[_0x9fe015(0x2ce)],this[_0x9fe015(0x8dc)]=Graphics[_0x9fe015(0x8dc)];const _0x24ab48=this['width']/this[_0x9fe015(0xc0b)][_0x9fe015(0x2ce)],_0x564296=this[_0x9fe015(0x8dc)]/this[_0x9fe015(0xc0b)][_0x9fe015(0x8dc)],_0x252bbc=Math['max'](_0x24ab48,_0x564296);this[_0x9fe015(0xf4)]['x']=_0x252bbc,this[_0x9fe015(0xf4)]['y']=_0x252bbc,this['x']=(Graphics[_0x9fe015(0x2ce)]-this['width'])/0x2,this['y']=Graphics[_0x9fe015(0x8dc)]-this[_0x9fe015(0x8dc)];},Sprite_Battleback[_0x4a80d9(0xba6)][_0x4a80d9(0x47a)]=function(){const _0x42f17d=_0x4a80d9,_0xc87784=VisuMZ[_0x42f17d(0xbe1)][_0x42f17d(0x668)][_0x42f17d(0x75d)];if(_0xc87784&&_0xc87784[_0x42f17d(0xa76)])return _0xc87784['jsScaleDown'][_0x42f17d(0x432)](this);this['width']=Graphics[_0x42f17d(0x2ce)],this[_0x42f17d(0x8dc)]=Graphics[_0x42f17d(0x8dc)];const _0x36adb7=Math[_0x42f17d(0x834)](0x1,this[_0x42f17d(0x2ce)]/this['bitmap'][_0x42f17d(0x2ce)]),_0x17fb9e=Math[_0x42f17d(0x834)](0x1,this['height']/this['bitmap'][_0x42f17d(0x8dc)]),_0x478e20=Math[_0x42f17d(0x78c)](_0x36adb7,_0x17fb9e);this['scale']['x']=_0x478e20,this[_0x42f17d(0xf4)]['y']=_0x478e20,this['x']=(Graphics['width']-this[_0x42f17d(0x2ce)])/0x2,this['y']=Graphics[_0x42f17d(0x8dc)]-this[_0x42f17d(0x8dc)];},Sprite_Battleback[_0x4a80d9(0xba6)][_0x4a80d9(0xb64)]=function(){const _0x4c3889=_0x4a80d9,_0x4cea8f=VisuMZ[_0x4c3889(0xbe1)][_0x4c3889(0x668)][_0x4c3889(0x75d)];if(_0x4cea8f&&_0x4cea8f[_0x4c3889(0x17b)])return _0x4cea8f[_0x4c3889(0x17b)][_0x4c3889(0x432)](this);this[_0x4c3889(0x2ce)]=Graphics['width'],this[_0x4c3889(0x8dc)]=Graphics['height'];const _0x213c21=Math[_0x4c3889(0x78c)](0x1,this[_0x4c3889(0x2ce)]/this[_0x4c3889(0xc0b)][_0x4c3889(0x2ce)]),_0x37828b=Math[_0x4c3889(0x78c)](0x1,this['height']/this[_0x4c3889(0xc0b)][_0x4c3889(0x8dc)]),_0x42b510=Math[_0x4c3889(0x78c)](_0x213c21,_0x37828b);this[_0x4c3889(0xf4)]['x']=_0x42b510,this['scale']['y']=_0x42b510,this['x']=(Graphics['width']-this[_0x4c3889(0x2ce)])/0x2,this['y']=Graphics[_0x4c3889(0x8dc)]-this[_0x4c3889(0x8dc)];},Spriteset_Battle[_0x4a80d9(0x9a7)]=![],Spriteset_Battle['prototype'][_0x4a80d9(0x35a)]=function(){const _0x518459=_0x4a80d9;if(!$gameSystem[_0x518459(0x6e5)]())return![];return![];},Spriteset_Battle[_0x4a80d9(0xba6)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x4a80d9(0xba6)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x3c4)]=Spriteset_Battle[_0x4a80d9(0xba6)]['createLowerLayer'],Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9c8)]=function(){const _0x44a371=_0x4a80d9;VisuMZ['BattleCore'][_0x44a371(0x3c4)][_0x44a371(0x432)](this),this['createWeather'](),this['createEnemyNames']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xa4c)]=Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x333)],Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x565408=_0x4a80d9;VisuMZ[_0x565408(0xbe1)][_0x565408(0xa4c)][_0x565408(0x432)](this),this[_0x565408(0x63a)](),this[_0x565408(0x420)](),this[_0x565408(0x3b5)]();},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9c2)]=function(){const _0x19674e=_0x4a80d9;this[_0x19674e(0xcf2)]=new Weather(),this[_0x19674e(0x783)]['addChild'](this[_0x19674e(0xcf2)]);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x3b5)]=function(){const _0x3a08b1=_0x4a80d9;this[_0x3a08b1(0xcf2)]['type']=$gameScreen[_0x3a08b1(0x6d7)](),this[_0x3a08b1(0xcf2)]['power']=$gameScreen[_0x3a08b1(0x712)]();},Game_Interpreter[_0x4a80d9(0xba6)][_0x4a80d9(0x372)]=function(_0x251b1a){const _0x2e4981=_0x4a80d9;$gameScreen[_0x2e4981(0x969)](_0x251b1a[0x0],_0x251b1a[0x1],_0x251b1a[0x2]);if(_0x251b1a[0x3])this[_0x2e4981(0xca3)](_0x251b1a[0x2]);return!![];},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x6c7)]=Game_Interpreter['prototype'][_0x4a80d9(0x144)],Game_Interpreter['prototype']['command283']=function(_0x25665b){const _0x2758b7=_0x4a80d9;return SceneManager[_0x2758b7(0x1f8)]()?(SceneManager[_0x2758b7(0xb97)][_0x2758b7(0x967)]['changeBattlebacks'](_0x25665b[0x0],_0x25665b[0x1]),!![]):VisuMZ['BattleCore'][_0x2758b7(0x6c7)][_0x2758b7(0x432)](this,_0x25665b);},Spriteset_Battle[_0x4a80d9(0xba6)]['updateBattlebackBitmap']=function(_0x5ad7f8,_0xd54227){const _0x173c01=_0x4a80d9;_0x5ad7f8[_0x173c01(0xc0b)]=_0xd54227;},Spriteset_Battle['prototype'][_0x4a80d9(0x9c7)]=function(_0x4cc26c,_0x5946ff){const _0xb5ac94=_0x4a80d9;_0x4cc26c=_0x4cc26c||'',_0x5946ff=_0x5946ff||'';_0x4cc26c===''&&_0x5946ff===''&&(_0x4cc26c=this[_0xb5ac94(0x36e)][_0xb5ac94(0x2db)](),_0x5946ff=this[_0xb5ac94(0x3ef)][_0xb5ac94(0x75e)]());const _0x516d7c=ImageManager[_0xb5ac94(0x9ad)](_0x4cc26c),_0x55c8fe=ImageManager[_0xb5ac94(0x4f1)](_0x5946ff);_0x516d7c[_0xb5ac94(0x19f)](this[_0xb5ac94(0x6b4)]['bind'](this,this['_back1Sprite'],this[_0xb5ac94(0x3ef)],_0x516d7c,_0x55c8fe));},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x6b4)]=function(_0x41d72f,_0x42373d,_0x3313b6,_0x1c9df7){const _0x377510=_0x4a80d9;_0x1c9df7[_0x377510(0x19f)](this[_0x377510(0xba1)][_0x377510(0x88a)](this,_0x41d72f,_0x42373d,_0x3313b6,_0x1c9df7));},Spriteset_Battle['prototype']['updateBattlebackBitmap2']=function(_0x3806a4,_0x5d5f12,_0x584f50,_0x5f1367){const _0x5ec135=_0x4a80d9;_0x3806a4[_0x5ec135(0xc0b)]=_0x584f50,_0x5d5f12[_0x5ec135(0xc0b)]=_0x5f1367,_0x3806a4[_0x5ec135(0x993)](),_0x5d5f12[_0x5ec135(0x993)]();},VisuMZ['BattleCore'][_0x4a80d9(0x666)]=Spriteset_Battle['prototype'][_0x4a80d9(0xa8b)],Spriteset_Battle['prototype'][_0x4a80d9(0xa8b)]=function(){const _0x19fb54=_0x4a80d9;VisuMZ[_0x19fb54(0xbe1)][_0x19fb54(0x666)]['call'](this),this[_0x19fb54(0x145)]();},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x145)]=function(){const _0x57fdb9=_0x4a80d9;this[_0x57fdb9(0x12a)](),this['createUIContainer'](),this[_0x57fdb9(0xcf1)](),this[_0x57fdb9(0x674)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x12a)]=function(){const _0x303935=_0x4a80d9;this[_0x303935(0xb48)]=new Sprite(),this[_0x303935(0x783)][_0x303935(0xd02)](this[_0x303935(0xb48)]);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xcf1)]=function(){const _0x1621d3=_0x4a80d9;this[_0x1621d3(0x3d1)]=new Sprite(),Spriteset_Battle[_0x1621d3(0x9a7)]?_0x1621d3(0x3c0)!=='zjzHp'?_0x3f2f2f[_0x1621d3(0xbe1)]['Window_BattleLog_displayEvasion'][_0x1621d3(0x432)](this,_0x14b902):this[_0x1621d3(0xd02)](this[_0x1621d3(0x3d1)]):this[_0x1621d3(0x783)][_0x1621d3(0xd02)](this[_0x1621d3(0x3d1)]);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x674)]=function(){const _0x3b9487=_0x4a80d9;this[_0x3b9487(0x444)]=new Sprite(),this[_0x3b9487(0x444)]['x']=this[_0x3b9487(0x783)]['x'],this[_0x3b9487(0x444)]['y']=this['_battleField']['y'],this[_0x3b9487(0xd02)](this['_damageContainer']);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x8e1)]=function(){const _0x82f05b=_0x4a80d9;if(!this['isFlipped']())return;this[_0x82f05b(0xb48)][_0x82f05b(0xf4)]['x']=-0x1,this[_0x82f05b(0xb48)]['x']=this[_0x82f05b(0x783)][_0x82f05b(0x2ce)],this['_uiContainer']['scale']['x']=-0x1,this[_0x82f05b(0xae8)]['x']=this[_0x82f05b(0x783)][_0x82f05b(0x2ce)],this['_animationContainer'][_0x82f05b(0xf4)]['x']=-0x1,this[_0x82f05b(0x3d1)]['x']=this['_battleField'][_0x82f05b(0x2ce)],this[_0x82f05b(0x444)][_0x82f05b(0xf4)]['x']=-0x1,this[_0x82f05b(0x444)]['x']=this[_0x82f05b(0x783)]['x']+this[_0x82f05b(0x783)][_0x82f05b(0x2ce)];},Spriteset_Battle['prototype'][_0x4a80d9(0x8a1)]=function(){const _0x227795=_0x4a80d9;Imported['VisuMZ_0_CoreEngine']&&this[_0x227795(0xb76)]()&&this[_0x227795(0x90b)]();const _0x28058d=$gameTroop[_0x227795(0x767)](),_0x102071=[];for(const _0x4e95a2 of _0x28058d){_0x102071['push'](new Sprite_Enemy(_0x4e95a2));}_0x102071[_0x227795(0x915)](this[_0x227795(0x660)][_0x227795(0x88a)](this));for(const _0x4e4f64 of _0x102071){this[_0x227795(0xb48)][_0x227795(0xd02)](_0x4e4f64);}this[_0x227795(0x200)]=_0x102071;},Spriteset_Battle['prototype'][_0x4a80d9(0x240)]=function(){const _0xc1ecd1=_0x4a80d9;this['_actorSprites']=[];for(let _0x297690=0x0;_0x297690<$gameParty[_0xc1ecd1(0xab7)]();_0x297690++){const _0x30936f=$gameParty[_0xc1ecd1(0x58d)]()[_0x297690],_0xbef6da=new Sprite_Actor();_0xbef6da['moveToStartPositionBattleCore'](_0x30936f),_0xbef6da[_0xc1ecd1(0xbd5)](_0x30936f),_0xbef6da[_0xc1ecd1(0x333)](),this[_0xc1ecd1(0xab4)][_0xc1ecd1(0x510)](_0xbef6da),this[_0xc1ecd1(0xb48)]['addChild'](_0xbef6da);}},Spriteset_Battle['prototype'][_0x4a80d9(0x273)]=function(_0x196443,_0x5ee169,_0xdce4cf,_0x16d73e){const _0x507a55=_0x4a80d9,_0x39cdfb=this[_0x507a55(0x13a)](_0x5ee169),_0x5839ce=new(_0x39cdfb?Sprite_AnimationMV:Sprite_Animation)(),_0x32bbe6=this[_0x507a55(0x7d2)](_0x196443);if(this[_0x507a55(0x58b)](_0x196443[0x0])){if(_0x507a55(0xc1a)!==_0x507a55(0xcb0))_0xdce4cf=!_0xdce4cf;else return _0x441c65[_0x507a55(0xba6)][_0x507a55(0x8b2)][_0x507a55(0x432)](this);}_0x5839ce[_0x507a55(0x325)]=_0x196443,_0x5839ce['setup'](_0x32bbe6,_0x5ee169,_0xdce4cf,_0x16d73e),this['addAnimationSpriteToContainer'](_0x5839ce);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x36a)]=function(_0x21e7e6){const _0x247f73=_0x4a80d9;if(this[_0x247f73(0x5af)](_0x21e7e6)){if(_0x247f73(0xbb2)!==_0x247f73(0xbb2))for(const _0x5da177 of _0x1b624c[_0x247f73(0x138)]()){this[_0x247f73(0x2d4)][_0x247f73(0x510)]('addText',_0x13bb83[_0x247f73(0xacd)][_0x247f73(0x7d6)](_0x5da177)),this[_0x247f73(0x2d4)][_0x247f73(0x510)](_0x247f73(0xca3)),_0x1c0552=!![];}else this[_0x247f73(0x29f)]()[_0x247f73(0xd02)](_0x21e7e6),_0x21e7e6[_0x247f73(0x222)]=!![];}else _0x247f73(0xad5)===_0x247f73(0xb4f)?this[_0x247f73(0x2ff)]=0x0:(this[_0x247f73(0x3d1)][_0x247f73(0xd02)](_0x21e7e6),Spriteset_Battle[_0x247f73(0x9a7)]&&(this['_animationContainer']['x']=this['_effectsContainer']['x'],this[_0x247f73(0x3d1)]['y']=this[_0x247f73(0x9df)]['y']));this[_0x247f73(0x9af)][_0x247f73(0x510)](_0x21e7e6);},Spriteset_Battle[_0x4a80d9(0xba6)]['isAnimationShownOnBattlePortrait']=function(_0x4dc67c){const _0x3e9ab9=_0x4a80d9;if(!_0x4dc67c)return![];if(!_0x4dc67c['_animation'])return![];if(!_0x4dc67c[_0x3e9ab9(0x325)][0x0])return![];if(_0x4dc67c[_0x3e9ab9(0x325)][0x0]['isActor']&&!_0x4dc67c[_0x3e9ab9(0x325)][0x0][_0x3e9ab9(0x172)]())return![];if($gameSystem[_0x3e9ab9(0x6e5)]())return![];if(!this[_0x3e9ab9(0x29f)]())return![];if(_0x4dc67c['constructor']===Sprite_Animation){if(_0x4dc67c['_animation']['displayType']!==0x0)return![];}else{if(_0x4dc67c[_0x3e9ab9(0xc12)]===Sprite_AnimationMV){if(_0x4dc67c['_animation'][_0x3e9ab9(0x18c)]===0x3)return![];}}return!![];const _0xe24b5f=Window_BattleStatus[_0x3e9ab9(0xba6)]['battleLayoutStyle']();return['xp','portrait'][_0x3e9ab9(0x7ed)](_0xe24b5f);},Spriteset_Battle['prototype'][_0x4a80d9(0x29f)]=function(){const _0x4c21e2=_0x4a80d9;if(!SceneManager[_0x4c21e2(0xb97)])return null;if(!SceneManager[_0x4c21e2(0xb97)][_0x4c21e2(0x989)])return null;if(!SceneManager[_0x4c21e2(0xb97)][_0x4c21e2(0x989)][_0x4c21e2(0x9df)])return null;return SceneManager[_0x4c21e2(0xb97)][_0x4c21e2(0x989)]['_effectsContainer'];},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb70)]=function(_0x5a5f15){const _0x2ca488=_0x4a80d9;this[_0x2ca488(0x7d5)](_0x5a5f15);for(const _0x39819d of _0x5a5f15[_0x2ca488(0x325)]){_0x39819d[_0x2ca488(0x5e3)]&&(_0x2ca488(0xaae)!=='nvImc'?this[_0x2ca488(0xa0b)]():_0x39819d[_0x2ca488(0x5e3)]());}_0x5a5f15[_0x2ca488(0x5b7)]();},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x7d5)]=function(_0x4c4098){const _0x59d0c1=_0x4a80d9;this[_0x59d0c1(0x5af)](_0x4c4098)?_0x59d0c1(0x7ea)!=='NdGUf'?(_0x2a6041(_0x30892b[_0x59d0c1(0x7d6)](_0x59d0c1(0x75f))),_0x592409[_0x59d0c1(0x628)]()):this[_0x59d0c1(0x29f)]()[_0x59d0c1(0xbaf)](_0x4c4098):_0x59d0c1(0xcef)===_0x59d0c1(0x3a6)?(_0x4c58ed+=_0x3d4b2a,_0x5150e6+=_0x51e0bf):this[_0x59d0c1(0x3d1)]['removeChild'](_0x4c4098);this[_0x59d0c1(0x9df)][_0x59d0c1(0xbaf)](_0x4c4098),this['_animationContainer'][_0x59d0c1(0xbaf)](_0x4c4098),this['_animationSprites'][_0x59d0c1(0x249)](_0x4c4098);if(this['_fauxAnimationSprites'])this[_0x59d0c1(0xa6f)][_0x59d0c1(0x249)](_0x4c4098);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x759)]=Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xa56)],Spriteset_Battle['prototype'][_0x4a80d9(0xa56)]=function(){const _0x571c16=_0x4a80d9;VisuMZ[_0x571c16(0xbe1)][_0x571c16(0x759)][_0x571c16(0x432)](this),this[_0x571c16(0x63a)]();},Spriteset_Battle[_0x4a80d9(0xba6)]['updateBattlerContainer']=function(){const _0x2b25db=_0x4a80d9;this[_0x2b25db(0xb48)][_0x2b25db(0xad7)][_0x2b25db(0x915)](this[_0x2b25db(0x9eb)]['bind'](this)),this[_0x2b25db(0x34b)]();if(!this[_0x2b25db(0xb48)])return;this[_0x2b25db(0xb48)][_0x2b25db(0x2ff)]=this[_0x2b25db(0x1a0)]();},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x9eb)]=function(_0x17290f,_0x45f1fd){const _0x46f0eb=_0x4a80d9;if(VisuMZ['BattleCore'][_0x46f0eb(0x668)][_0x46f0eb(0x490)][_0x46f0eb(0x116)]){if(_0x17290f[_0x46f0eb(0x437)]&&_0x45f1fd[_0x46f0eb(0x437)]){if(_0x17290f[_0x46f0eb(0x437)][_0x46f0eb(0x172)]()&&_0x45f1fd['_battler']['isEnemy']())return _0x46f0eb(0x958)!==_0x46f0eb(0x51a)?0x1:![];else{if(_0x45f1fd['_battler'][_0x46f0eb(0x172)]()&&_0x17290f['_battler'][_0x46f0eb(0x494)]())return-0x1;}}}return _0x17290f['_baseY']!==_0x45f1fd[_0x46f0eb(0x1d5)]?_0x17290f[_0x46f0eb(0x1d5)]-_0x45f1fd[_0x46f0eb(0x1d5)]:_0x45f1fd[_0x46f0eb(0x478)]-_0x17290f[_0x46f0eb(0x478)];},Spriteset_Battle[_0x4a80d9(0xba6)]['putActiveBattlerOnTop']=function(){const _0x36c744=_0x4a80d9;if(!VisuMZ['BattleCore']['Settings'][_0x36c744(0x490)][_0x36c744(0x750)])return;const _0x37b00e=BattleManager[_0x36c744(0x139)];if(_0x37b00e){if(_0x37b00e[_0x36c744(0x172)]()&&!$gameSystem[_0x36c744(0x6e5)]())return;const _0x20d71e=_0x37b00e['battler']();if(_0x20d71e&&_0x37b00e[_0x36c744(0x172)]())this[_0x36c744(0xb48)]['addChild'](_0x20d71e);}},Spriteset_Battle[_0x4a80d9(0xba6)]['processEscape']=function(){const _0x206740=_0x4a80d9;for(const _0x4849f7 of $gameParty[_0x206740(0x564)]()){if(!_0x4849f7)continue;if(!_0x4849f7['battler']())continue;_0x4849f7['battler']()['forceEscapeSprite']=!![],_0x4849f7[_0x206740(0x997)]()[_0x206740(0xcb6)]();}},Spriteset_Battle['prototype'][_0x4a80d9(0x523)]=function(){const _0x22ee8f=_0x4a80d9;this['_uiContainer']=new Sprite();if(Spriteset_Battle[_0x22ee8f(0x9a7)])this[_0x22ee8f(0xd02)](this[_0x22ee8f(0xae8)]);else{if(_0x22ee8f(0x6f3)!==_0x22ee8f(0x868))this[_0x22ee8f(0x783)][_0x22ee8f(0xd02)](this[_0x22ee8f(0xae8)]);else return 0x0;}SceneManager['_scene'][_0x22ee8f(0xae8)]=this[_0x22ee8f(0xae8)];},Spriteset_Battle[_0x4a80d9(0xba6)]['createEnemyNames']=function(){const _0x34665=_0x4a80d9;if(VisuMZ['BattleCore'][_0x34665(0x668)][_0x34665(0x916)][_0x34665(0xadd)])return;this[_0x34665(0xb4c)]=new Sprite(),BattleManager[_0x34665(0x2f5)](this[_0x34665(0xb4c)]);for(const _0x1adbfa of this[_0x34665(0x200)]){const _0x24d032=new Sprite_EnemyName();this[_0x34665(0xb4c)][_0x34665(0xd02)](_0x24d032),_0x24d032['linkSprite'](_0x1adbfa);}},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x420)]=function(){const _0x24ee7d=_0x4a80d9;if(!this['_damageContainer'])return;if(!this[_0x24ee7d(0xae8)])return;const _0x1c80bf=Spriteset_Battle[_0x24ee7d(0x9a7)]?this[_0x24ee7d(0x444)]['x']:0x0,_0x517beb=Spriteset_Battle[_0x24ee7d(0x9a7)]?this[_0x24ee7d(0x444)]['y']:0x0,_0x1a5843=Imported[_0x24ee7d(0x619)]?this[_0x24ee7d(0x783)]['x']:0x0,_0x23bc54=Imported['VisuMZ_3_ActSeqCamera']?this[_0x24ee7d(0x783)]['y']:0x0;this[_0x24ee7d(0xae8)]['x']=_0x1c80bf+_0x1a5843,this['_uiContainer']['y']=_0x517beb+_0x23bc54;},BattleManager['addChildToUiContainer']=function(_0x3d326d){const _0xc10744=_0x4a80d9;if(!SceneManager['_scene'][_0xc10744(0xae8)])return;SceneManager[_0xc10744(0xb97)][_0xc10744(0xae8)][_0xc10744(0xd02)](_0x3d326d);},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0x1a0)]=function(){return 0xff;},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb2f)]=function(){return![];},Spriteset_Battle['prototype']['isAnyoneFloating']=function(){const _0x3aad5c=_0x4a80d9;return this[_0x3aad5c(0x86a)]()[_0x3aad5c(0x458)](_0x377ad3=>_0x377ad3['isFloating']());},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xc76)]=function(){const _0x25362f=_0x4a80d9;return this[_0x25362f(0x86a)]()['some'](_0x1442d4=>_0x1442d4[_0x25362f(0x2c7)]());},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xac3)]=function(){const _0x2bac69=_0x4a80d9;return this['battlerSprites']()['some'](_0x4126a0=>_0x4126a0[_0x2bac69(0xadf)]());},Spriteset_Battle[_0x4a80d9(0xba6)]['isAnyoneSkewing']=function(){const _0x22d3dd=_0x4a80d9;return this['battlerSprites']()[_0x22d3dd(0x458)](_0x5b3516=>_0x5b3516[_0x22d3dd(0x272)]());},Spriteset_Battle['prototype'][_0x4a80d9(0x1b9)]=function(){const _0x2be44e=_0x4a80d9;return this['battlerSprites']()['some'](_0x4b0ed0=>_0x4b0ed0[_0x2be44e(0x4b1)]());},Spriteset_Battle[_0x4a80d9(0xba6)][_0x4a80d9(0xb43)]=function(){const _0xf59d75=_0x4a80d9;return this[_0xf59d75(0x86a)]()[_0xf59d75(0x458)](_0x4f9df9=>_0x4f9df9[_0xf59d75(0x992)]());},VisuMZ[_0x4a80d9(0xbe1)]['Window_ItemList_maxCols']=Window_ItemList[_0x4a80d9(0xba6)][_0x4a80d9(0x1c3)],Window_ItemList[_0x4a80d9(0xba6)][_0x4a80d9(0x1c3)]=function(){const _0x47e3e1=_0x4a80d9;if(SceneManager['isSceneBattle']()){if(_0x47e3e1(0xbd6)===_0x47e3e1(0xa0f)){const _0x713d83=_0x391d94[_0x47e3e1(0x596)][_0x47e3e1(0x668)][_0x47e3e1(0x7cf)];_0x713d83&&_0x713d83['ActionEndUpdate']===![]&&this[_0x47e3e1(0xcf4)](0x1);}else return SceneManager[_0x47e3e1(0xb97)][_0x47e3e1(0x4bb)]()===_0x47e3e1(0x33a)?VisuMZ['BattleCore'][_0x47e3e1(0x668)][_0x47e3e1(0x7c4)]['SkillItemBorderCols']:VisuMZ[_0x47e3e1(0xbe1)][_0x47e3e1(0x668)][_0x47e3e1(0x7c4)][_0x47e3e1(0x45e)];}else return VisuMZ['BattleCore'][_0x47e3e1(0x4d4)][_0x47e3e1(0x432)](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x67d)]=Window_SkillList[_0x4a80d9(0xba6)][_0x4a80d9(0x1c3)],Window_SkillList[_0x4a80d9(0xba6)]['maxCols']=function(){const _0xe13188=_0x4a80d9;if(SceneManager[_0xe13188(0x1f8)]()){if('kLBIe'!==_0xe13188(0x5a5)){const _0xd1fc20=_0x4ce8ca[_0xe13188(0x442)]();_0xd94100[_0xe13188(0xbe1)]['Scene_Battle_selectNextCommand'][_0xe13188(0x432)](this);if(_0xd1fc20){if(_0xd1fc20===_0x15ea89['actor']())return;if(_0xd1fc20===_0x42d017[_0xe13188(0x139)])return;if(_0xd1fc20[_0xe13188(0x997)]())_0xd1fc20[_0xe13188(0x997)]()[_0xe13188(0x467)]();}}else return SceneManager['_scene'][_0xe13188(0x4bb)]()===_0xe13188(0x33a)?VisuMZ[_0xe13188(0xbe1)][_0xe13188(0x668)][_0xe13188(0x7c4)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0xe13188(0x668)][_0xe13188(0x7c4)]['SkillItemStandardCols'];}else return VisuMZ[_0xe13188(0xbe1)][_0xe13188(0x67d)][_0xe13188(0x432)](this);},VisuMZ['BattleCore']['Window_Options_addGeneralOptions']=Window_Options['prototype'][_0x4a80d9(0x623)],Window_Options[_0x4a80d9(0xba6)][_0x4a80d9(0x623)]=function(){const _0x426fd6=_0x4a80d9;VisuMZ[_0x426fd6(0xbe1)][_0x426fd6(0x2dc)][_0x426fd6(0x432)](this),this[_0x426fd6(0x7df)](),this[_0x426fd6(0xb36)]();},Window_Options[_0x4a80d9(0xba6)][_0x4a80d9(0x7df)]=function(){const _0x12374a=_0x4a80d9;if(VisuMZ['BattleCore']['Settings'][_0x12374a(0x51b)][_0x12374a(0xbbf)]){if(_0x12374a(0x9d3)!==_0x12374a(0x9d3)){let _0x43ef83=_0x12374a(0xb18);if(this[_0x12374a(0xa3e)](_0x43ef83))return this[_0x12374a(0x9cd)][_0x43ef83];return this['_cache'][_0x43ef83]=this[_0x12374a(0x7de)](this[_0x12374a(0x442)]()),this[_0x12374a(0x9cd)][_0x43ef83];}else this[_0x12374a(0x9aa)](),this[_0x12374a(0xc9e)]();}},Window_Options[_0x4a80d9(0xba6)][_0x4a80d9(0xb36)]=function(){const _0x45c249=_0x4a80d9;if(!VisuMZ[_0x45c249(0xbe1)]['Settings']['HpGauge'][_0x45c249(0xb57)])return;const _0x198860=TextManager['visualHpGauge'],_0x292f39=_0x45c249(0x105);this[_0x45c249(0x91d)](_0x198860,_0x292f39);},Window_Options[_0x4a80d9(0xba6)][_0x4a80d9(0x9aa)]=function(){const _0x505a24=_0x4a80d9,_0x4942e2=TextManager[_0x505a24(0xc4a)],_0x2fcaca=_0x505a24(0x29e);this[_0x505a24(0x91d)](_0x4942e2,_0x2fcaca);},Window_Options[_0x4a80d9(0xba6)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x44c8cc=_0x4a80d9,_0x32f3f9=TextManager[_0x44c8cc(0xb23)],_0x589813='autoBattleUseSkills';this[_0x44c8cc(0x91d)](_0x32f3f9,_0x589813);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x4f0)]=Window_Options[_0x4a80d9(0xba6)][_0x4a80d9(0xc47)],Window_Options[_0x4a80d9(0xba6)]['statusText']=function(_0x43268c){const _0x4e07e6=_0x4a80d9,_0x27d0fa=this[_0x4e07e6(0x4d5)](_0x43268c);return _0x27d0fa===_0x4e07e6(0x49d)?this[_0x4e07e6(0x4a6)]():VisuMZ[_0x4e07e6(0xbe1)][_0x4e07e6(0x4f0)][_0x4e07e6(0x432)](this,_0x43268c);},Window_Options['prototype'][_0x4a80d9(0x4a6)]=function(){const _0x5e9c22=_0x4a80d9,_0x3f35ac=VisuMZ[_0x5e9c22(0xbe1)][_0x5e9c22(0x668)][_0x5e9c22(0x51b)],_0x318a9f=this['getConfigValue'](_0x5e9c22(0x49d));return _0x318a9f?_0x3f35ac[_0x5e9c22(0x951)]:_0x3f35ac[_0x5e9c22(0x7c3)];},Window_ShopStatus[_0x4a80d9(0xba6)]['getItemDamageAmountLabelBattleCore']=function(){const _0xa83615=_0x4a80d9,_0x4ace1a=DataManager[_0xa83615(0x872)](this['_item']),_0x467160=VisuMZ[_0xa83615(0x12e)][_0x4ace1a];if(!_0x467160)return this[_0xa83615(0x177)]();const _0xcc600a=_0xa83615(0x8bd)[_0xa83615(0x7d6)](this[_0xa83615(0x180)]['damage'][_0xa83615(0xce4)]),_0x55f283=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0xa83615(0x180)][_0xa83615(0x83e)][_0xa83615(0xce4)]];return _0x467160[_0xcc600a][_0xa83615(0x7d6)](_0x55f283);},Window_ShopStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x93e)]=function(){const _0x49df16=_0x4a80d9,_0x55076b=DataManager[_0x49df16(0x872)](this[_0x49df16(0x180)]),_0x31773e=VisuMZ['DamageStyles'][_0x55076b];if(!_0x31773e)return this['getItemDamageAmountTextOriginal']();return _0x31773e[_0x49df16(0x78b)]['call'](this);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x181)]=Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)],Window_PartyCommand['prototype'][_0x4a80d9(0x54a)]=function(_0x233f6f){const _0x249d44=_0x4a80d9;VisuMZ['BattleCore'][_0x249d44(0x181)][_0x249d44(0x432)](this,_0x233f6f),this[_0x249d44(0x7f6)](_0x233f6f);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x7f6)]=function(_0x33c5aa){const _0x4722a0=_0x4a80d9,_0x3fc010=new Rectangle(0x0,0x0,_0x33c5aa[_0x4722a0(0x2ce)],_0x33c5aa['height']);this['_commandNameWindow']=new Window_Base(_0x3fc010),this['_commandNameWindow'][_0x4722a0(0x2ff)]=0x0,this[_0x4722a0(0xd02)](this[_0x4722a0(0xace)]),this[_0x4722a0(0xa89)]();},Window_PartyCommand[_0x4a80d9(0xba6)]['callUpdateHelp']=function(){const _0x24de9d=_0x4a80d9;Window_Command[_0x24de9d(0xba6)][_0x24de9d(0x8f4)][_0x24de9d(0x432)](this);if(this[_0x24de9d(0xace)])this[_0x24de9d(0xa89)]();},Window_PartyCommand[_0x4a80d9(0xba6)]['updateCommandNameWindow']=function(){const _0x133f0d=_0x4a80d9,_0x188da4=this[_0x133f0d(0xace)];_0x188da4['contents'][_0x133f0d(0x2b9)]();const _0x4f4d70=this[_0x133f0d(0x77e)](this[_0x133f0d(0x4a4)]());if(_0x4f4d70===_0x133f0d(0x6db)&&this[_0x133f0d(0x407)]()>0x0){const _0x2ac944=this['itemLineRect'](this[_0x133f0d(0x4a4)]());let _0x3046fc=this['commandName'](this[_0x133f0d(0x4a4)]());_0x3046fc=_0x3046fc[_0x133f0d(0x220)](/\\I\[(\d+)\]/gi,''),_0x188da4[_0x133f0d(0xa40)](),this[_0x133f0d(0xb50)](_0x3046fc,_0x2ac944),this[_0x133f0d(0x27f)](_0x3046fc,_0x2ac944),this[_0x133f0d(0x900)](_0x3046fc,_0x2ac944);}},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xb50)]=function(_0x1b3e26,_0x5c6c11){},Window_PartyCommand[_0x4a80d9(0xba6)]['commandNameWindowDrawText']=function(_0x207256,_0x53abeb){const _0x4ec832=_0x4a80d9,_0x227c25=this[_0x4ec832(0xace)];_0x227c25[_0x4ec832(0x3ce)](_0x207256,0x0,_0x53abeb['y'],_0x227c25['innerWidth'],_0x4ec832(0x4c5));},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x900)]=function(_0x6f6ca1,_0xb8e928){const _0x28b77d=_0x4a80d9,_0x192645=this[_0x28b77d(0xace)],_0x7fabd5=$gameSystem[_0x28b77d(0x360)](),_0x4e9af2=_0xb8e928['x']+Math[_0x28b77d(0x506)](_0xb8e928[_0x28b77d(0x2ce)]/0x2)+_0x7fabd5;_0x192645['x']=_0x192645[_0x28b77d(0x2ce)]/-0x2+_0x4e9af2,_0x192645['y']=Math['floor'](_0xb8e928[_0x28b77d(0x8dc)]/0x2);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x851)]=function(){const _0x2998ca=_0x4a80d9;this['addFightCommand'](),this['addAutoBattleCommand'](),this[_0x2998ca(0x465)](),this['addOptionsCommand'](),this[_0x2998ca(0xc83)]();},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xa78)]=function(){const _0x689170=_0x4a80d9,_0x45bcba=this['commandStyle'](),_0xb32f21=VisuMZ[_0x689170(0xbe1)]['Settings'][_0x689170(0x24b)][_0x689170(0x765)],_0x7c2af0=_0x45bcba===_0x689170(0x319)?TextManager['fight']:'\x5cI[%1]%2'[_0x689170(0x7d6)](_0xb32f21,TextManager[_0x689170(0x281)]),_0x3ab81c=this[_0x689170(0x912)]();this[_0x689170(0x91d)](_0x7c2af0,_0x689170(0x281),_0x3ab81c);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x912)]=function(){return!![];},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x492)]=function(){const _0xcd0143=_0x4a80d9;if(!this[_0xcd0143(0x80c)]())return;const _0x50bd8b=this[_0xcd0143(0xb73)](),_0x46e9e1=VisuMZ[_0xcd0143(0xbe1)][_0xcd0143(0x668)][_0xcd0143(0x24b)][_0xcd0143(0x56d)],_0x4cff6c=_0x50bd8b===_0xcd0143(0x319)?TextManager[_0xcd0143(0x7f7)]:_0xcd0143(0xb84)['format'](_0x46e9e1,TextManager[_0xcd0143(0x7f7)]),_0x5a8af2=this[_0xcd0143(0x3d7)]();this[_0xcd0143(0x91d)](_0x4cff6c,_0xcd0143(0x7f7),_0x5a8af2);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x80c)]=function(){const _0x38fc11=_0x4a80d9;return VisuMZ[_0x38fc11(0xbe1)]['Settings'][_0x38fc11(0x24b)][_0x38fc11(0x3e5)];},Window_PartyCommand[_0x4a80d9(0xba6)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x4a80d9(0x465)]=function(){},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xab9)]=function(){const _0x1acf56=_0x4a80d9;if(!this[_0x1acf56(0x228)]())return;const _0x52aec5=this[_0x1acf56(0xb73)](),_0x28cb4c=VisuMZ[_0x1acf56(0xbe1)]['Settings'][_0x1acf56(0x24b)][_0x1acf56(0x5d1)],_0x4b6cc5=_0x52aec5==='text'?TextManager['options']:'\x5cI[%1]%2'[_0x1acf56(0x7d6)](_0x28cb4c,TextManager[_0x1acf56(0x51f)]),_0x4c6fbd=this[_0x1acf56(0x724)]();this[_0x1acf56(0x91d)](_0x4b6cc5,'options',_0x4c6fbd);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x228)]=function(){const _0x2330e4=_0x4a80d9;return VisuMZ['BattleCore'][_0x2330e4(0x668)][_0x2330e4(0x24b)][_0x2330e4(0x1bd)];},Window_PartyCommand['prototype']['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4a80d9(0xba6)]['addEscapeCommand']=function(){const _0x5f1d5d=_0x4a80d9,_0x414a84=this[_0x5f1d5d(0xb73)](),_0x144a42=VisuMZ[_0x5f1d5d(0xbe1)][_0x5f1d5d(0x668)]['PartyCmd'][_0x5f1d5d(0x911)],_0x2d4622=_0x414a84===_0x5f1d5d(0x319)?TextManager[_0x5f1d5d(0xc41)]:_0x5f1d5d(0xb84)[_0x5f1d5d(0x7d6)](_0x144a42,TextManager[_0x5f1d5d(0xc41)]),_0x3b8d06=this[_0x5f1d5d(0xa36)]();this['addCommand'](_0x2d4622,_0x5f1d5d(0xc41),_0x3b8d06);},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xa36)]=function(){const _0x4288e4=_0x4a80d9;return BattleManager[_0x4288e4(0x8a7)]();},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xa7d)]=function(){const _0x24a5e6=_0x4a80d9;return VisuMZ[_0x24a5e6(0xbe1)][_0x24a5e6(0x668)][_0x24a5e6(0x24b)][_0x24a5e6(0x9b7)];},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x87f)]=function(_0x5eb28a){const _0x53104a=_0x4a80d9,_0x138580=this[_0x53104a(0x77e)](_0x5eb28a);if(_0x138580==='iconText')this[_0x53104a(0x4b6)](_0x5eb28a);else{if(_0x138580==='icon'){if(_0x53104a(0x775)!==_0x53104a(0x775))return!![];else this[_0x53104a(0x4c7)](_0x5eb28a);}else Window_Command[_0x53104a(0xba6)][_0x53104a(0x87f)][_0x53104a(0x432)](this,_0x5eb28a);}},Window_PartyCommand['prototype']['commandStyle']=function(){const _0x1992ab=_0x4a80d9;return VisuMZ['BattleCore'][_0x1992ab(0x668)][_0x1992ab(0x24b)]['CmdStyle'];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x595dd9){const _0xee9789=_0x4a80d9;if(_0x595dd9<0x0)return _0xee9789(0x319);const _0x9a6775=this[_0xee9789(0xb73)]();if(_0x9a6775!=='auto'){if(_0xee9789(0x938)!==_0xee9789(0x938)){this['_regionBattleback1']={},this['_regionBattleback2']={};if(!_0x17a67b)return;const _0x38b2dd=_0x5dd59b[_0xee9789(0x6c8)];if(!_0x38b2dd)return;const _0x893b18=_0x38b2dd['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x893b18)for(const _0x4b9253 of _0x893b18){_0x4b9253[_0xee9789(0x605)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xd090d6=_0x3937d6(_0x6cb3c7['$1']),_0xbc1845=_0x354a2c(_0x3765b6['$2']),_0x32b5bd=_0xbc1845===0x1?this[_0xee9789(0x82e)]:this[_0xee9789(0x6d0)],_0x11ebc0=_0x290b87(_0x3ade80['$3']);_0x32b5bd[_0xd090d6]=_0x11ebc0;}}else return _0x9a6775;}else{if(this[_0xee9789(0x407)]()>0x0){const _0x37041f=this[_0xee9789(0x641)](_0x595dd9);if(_0x37041f[_0xee9789(0x605)](/\\I\[(\d+)\]/i)){const _0x596f6d=this[_0xee9789(0xcf8)](_0x595dd9),_0x1e25ce=this[_0xee9789(0x475)](_0x37041f)[_0xee9789(0x2ce)];return _0x1e25ce<=_0x596f6d['width']?_0xee9789(0x3d3):_0xee9789(0x6db);}}}return'text';},Window_PartyCommand[_0x4a80d9(0xba6)]['drawItemStyleIconText']=function(_0x451d66){const _0x1cba17=_0x4a80d9,_0xe68363=this[_0x1cba17(0xcf8)](_0x451d66),_0x25c140=this[_0x1cba17(0x641)](_0x451d66),_0x4cae74=this['textSizeEx'](_0x25c140)[_0x1cba17(0x2ce)];this[_0x1cba17(0x15a)](this[_0x1cba17(0x455)](_0x451d66));const _0x4d2be5=this[_0x1cba17(0xa7d)]();if(_0x4d2be5==='right')this[_0x1cba17(0x1cf)](_0x25c140,_0xe68363['x']+_0xe68363[_0x1cba17(0x2ce)]-_0x4cae74,_0xe68363['y'],_0x4cae74);else{if(_0x4d2be5==='center'){if(_0x1cba17(0x7e8)!==_0x1cba17(0x7e8))this[_0x1cba17(0x2ff)]=this[_0x1cba17(0x525)];else{const _0x242733=_0xe68363['x']+Math[_0x1cba17(0x506)]((_0xe68363[_0x1cba17(0x2ce)]-_0x4cae74)/0x2);this[_0x1cba17(0x1cf)](_0x25c140,_0x242733,_0xe68363['y'],_0x4cae74);}}else this['drawTextEx'](_0x25c140,_0xe68363['x'],_0xe68363['y'],_0x4cae74);}},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x4c7)]=function(_0x234d5a){const _0x30858f=_0x4a80d9;this[_0x30858f(0x641)](_0x234d5a)[_0x30858f(0x605)](/\\I\[(\d+)\]/i);const _0x1c2a0e=Number(RegExp['$1'])||0x0,_0x3a3d96=this['itemLineRect'](_0x234d5a),_0x3618d9=_0x3a3d96['x']+Math[_0x30858f(0x506)]((_0x3a3d96[_0x30858f(0x2ce)]-ImageManager['iconWidth'])/0x2),_0x1e9a1d=_0x3a3d96['y']+(_0x3a3d96['height']-ImageManager[_0x30858f(0x867)])/0x2;this[_0x30858f(0xae1)](_0x1c2a0e,_0x3618d9,_0x1e9a1d);},Window_PartyCommand['prototype'][_0x4a80d9(0x670)]=function(){},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xbe7)]=function(){const _0x56074d=_0x4a80d9;Window_Command[_0x56074d(0xba6)]['activate']['call'](this);const _0x358c52=this['battleLayoutStyle']();if(_0x358c52==='border'){if('wSXzV'===_0x56074d(0x8cd)){const _0x34adeb=this[_0x56074d(0x87e)]();if(_0x34adeb>=0x0){const _0x18aa82=this['forActor']()?_0x56074d(0x23c):_0x56074d(0xbdf);_0x3bf1d['virtualClick'](_0x18aa82);}}else this[_0x56074d(0x6ce)]();}},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x4bb)]=function(){const _0x54cf6f=_0x4a80d9;if(this[_0x54cf6f(0x796)])return this[_0x54cf6f(0x796)];return this[_0x54cf6f(0x796)]=SceneManager[_0x54cf6f(0xb97)][_0x54cf6f(0x4bb)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x1ce)]=function(){const _0xc8068=_0x4a80d9,_0x38f687=VisuMZ[_0xc8068(0xbe1)][_0xc8068(0x668)][_0xc8068(0x24b)],_0x2c7d7d=this[_0xc8068(0x5c4)]();switch(_0x2c7d7d){case _0xc8068(0x281):this[_0xc8068(0x676)][_0xc8068(0x37e)](_0x38f687[_0xc8068(0x680)]);break;case _0xc8068(0x7f7):this[_0xc8068(0x676)]['setText'](_0x38f687[_0xc8068(0xa41)]);break;case _0xc8068(0x51f):this[_0xc8068(0x676)][_0xc8068(0x37e)](_0x38f687[_0xc8068(0x2d8)]);break;case _0xc8068(0xc41):this[_0xc8068(0x676)][_0xc8068(0x37e)](_0x38f687[_0xc8068(0x500)]);break;default:this[_0xc8068(0x676)][_0xc8068(0x37e)]('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x4a80d9(0x54a)],Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(_0x454dc6){const _0x5bfec7=_0x4a80d9;VisuMZ[_0x5bfec7(0xbe1)][_0x5bfec7(0x80e)]['call'](this,_0x454dc6),this['createCommandNameWindow'](_0x454dc6);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x7f6)]=function(_0x2699e8){const _0x38e09d=_0x4a80d9,_0xd1a574=new Rectangle(0x0,0x0,_0x2699e8[_0x38e09d(0x2ce)],_0x2699e8[_0x38e09d(0x8dc)]);this[_0x38e09d(0xace)]=new Window_Base(_0xd1a574),this[_0x38e09d(0xace)][_0x38e09d(0x2ff)]=0x0,this[_0x38e09d(0xd02)](this[_0x38e09d(0xace)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x4a80d9(0xba6)]['callUpdateHelp']=function(){const _0x249f5f=_0x4a80d9;Window_Command[_0x249f5f(0xba6)]['callUpdateHelp'][_0x249f5f(0x432)](this);if(this[_0x249f5f(0xace)])this[_0x249f5f(0xa89)]();},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xa89)]=function(){const _0x5b40ef=_0x4a80d9,_0x10b0a2=this[_0x5b40ef(0xace)];_0x10b0a2[_0x5b40ef(0x28f)]['clear']();const _0x42ac11=this['commandStyleCheck'](this[_0x5b40ef(0x4a4)]());if(_0x42ac11===_0x5b40ef(0x6db)&&this[_0x5b40ef(0x407)]()>0x0){const _0x5d43ae=this[_0x5b40ef(0xcf8)](this[_0x5b40ef(0x4a4)]());let _0xd2c61c=this['commandName'](this['index']());_0xd2c61c=_0xd2c61c[_0x5b40ef(0x220)](/\\I\[(\d+)\]/gi,''),_0x10b0a2['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0xd2c61c,_0x5d43ae),this['commandNameWindowDrawText'](_0xd2c61c,_0x5d43ae),this[_0x5b40ef(0x900)](_0xd2c61c,_0x5d43ae);}},Window_ActorCommand['prototype'][_0x4a80d9(0xb50)]=function(_0x18e49b,_0x134e8d){},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x27f)]=function(_0x10319a,_0x59e31c){const _0x597808=_0x4a80d9,_0x59a875=this[_0x597808(0xace)];_0x59a875[_0x597808(0x3ce)](_0x10319a,0x0,_0x59e31c['y'],_0x59a875[_0x597808(0x8cf)],_0x597808(0x4c5));},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x900)]=function(_0x5c285a,_0x4c5fdc){const _0x2a7c0f=_0x4a80d9,_0x255398=this['_commandNameWindow'],_0x17a132=$gameSystem['windowPadding'](),_0x5d897e=_0x4c5fdc['x']+Math[_0x2a7c0f(0x506)](_0x4c5fdc['width']/0x2)+_0x17a132;_0x255398['x']=_0x255398[_0x2a7c0f(0x2ce)]/-0x2+_0x5d897e,_0x255398['y']=Math[_0x2a7c0f(0x506)](_0x4c5fdc['height']/0x2);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x851)]=function(){const _0x11ff72=_0x4a80d9;if(!this['_actor'])return;const _0x411cc7=this['_actor'][_0x11ff72(0xc2e)]();for(const _0x12d6f4 of _0x411cc7){if(_0x11ff72(0x25c)===_0x11ff72(0x25c))this['makeBattleCommand'](_0x12d6f4['toUpperCase']()['trim']());else{_0x4dd97e[_0x11ff72(0xbe1)][_0x11ff72(0x597)][_0x11ff72(0x432)](this,_0xdd5b81);if(!_0x342e9e[_0x11ff72(0xc2b)]()){const _0x1dd8cf=this[_0x11ff72(0x997)]();_0x1dd8cf&&_0x1dd8cf[_0x11ff72(0xa6b)]();}this[_0x11ff72(0x3ba)](![]);}}},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x386)]=function(_0x5c82ee){const _0x4b25f=_0x4a80d9;_0x5c82ee===_0x4b25f(0x482)&&(_0x4b25f(0x4e7)!==_0x4b25f(0x4e7)?(_0x8e9968[_0x4b25f(0xba6)][_0x4b25f(0x54a)][_0x4b25f(0x432)](this,_0x3cd19e),this[_0x4b25f(0xf4)]['x']=-0x1,this[_0x4b25f(0x174)][_0x4b25f(0xf4)]['x']=-0x1):this[_0x4b25f(0x8e3)]());if([_0x4b25f(0x81a),'SKILLS']['includes'](_0x5c82ee)){if(_0x4b25f(0x8c3)!==_0x4b25f(0x8c3)){const _0x273ebc=_0x1228d3[_0x4b25f(0xbe1)]['Settings'][_0x4b25f(0x7c4)],_0x52d35d=_0x273ebc['CommandWidth']||0xc0,_0x419d93=this['windowAreaHeight'](),_0x146125=this[_0x4b25f(0x23a)]()?_0x3948c0[_0x4b25f(0x84d)]-_0x52d35d:0x0,_0x27c7be=_0x5a4910[_0x4b25f(0x91f)]-_0x419d93;return new _0x345b7e(_0x146125,_0x27c7be,_0x52d35d,_0x419d93);}else this[_0x4b25f(0x168)]();}_0x5c82ee==='GUARD'&&(_0x4b25f(0x700)!==_0x4b25f(0x37a)?this[_0x4b25f(0x587)]():_0x31554d[_0x4b25f(0xce8)]=!_0x4ce904['portraitFlipVert']);if(_0x5c82ee===_0x4b25f(0x4ad)){if('JbYiS'!=='ZkIbe')this['addItemCommand']();else{if(this[_0x4b25f(0x16f)]())return!![];return![];}}_0x5c82ee===_0x4b25f(0xbdc)&&('lOjWH'!==_0x4b25f(0xb56)?this[_0x4b25f(0xc83)]():(_0xa2ccdc&&_0x56ed0a[_0x4b25f(0x172)]()&&_0x5562ff[_0x4b25f(0x60d)](_0x3e9a00),this[_0x4b25f(0xcf7)]()));_0x5c82ee==='AUTO\x20BATTLE'&&this[_0x4b25f(0x492)]();if(_0x5c82ee['match'](/STYPE: (\d+)/i)){if(_0x4b25f(0x846)!==_0x4b25f(0x9ea)){const _0x36b749=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x36b749);}else return this[_0x4b25f(0x404)]()['trueRandomTarget']();}else{if(_0x5c82ee[_0x4b25f(0x605)](/STYPE: (.*)/i)){const _0x55f4bb=DataManager[_0x4b25f(0x8ea)](RegExp['$1']);this['addSkillTypeCommand'](_0x55f4bb);}}_0x5c82ee===_0x4b25f(0x3d5)&&(_0x4b25f(0x6f8)===_0x4b25f(0x6f8)?this['addSingleSkillCommands']():this['subject']()&&this[_0x4b25f(0x1e3)]()[_0x4b25f(0xb2b)]()?_0x5542a3[_0x4b25f(0xbe1)][_0x4b25f(0x38f)][_0x4b25f(0x432)](this):this[_0x4b25f(0x2b9)]());if(_0x5c82ee[_0x4b25f(0x605)](/SKILL: (\d+)/i)){const _0x4d483=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x4d483]);}else{if(_0x5c82ee['match'](/SKILL: (.*)/i)){if('sXrXG'===_0x4b25f(0x65b)){const _0x3d3175=DataManager[_0x4b25f(0x751)](RegExp['$1']);this[_0x4b25f(0x6b9)]($dataSkills[_0x3d3175]);}else return _0x445474['BattleCore'][_0x4b25f(0x59b)]['call'](this);}}_0x5c82ee===_0x4b25f(0x66a)&&Imported['VisuMZ_2_PartySystem']&&this['addPartyCommand'](),[_0x4b25f(0x419),_0x4b25f(0x38e)][_0x4b25f(0xcf9)](_0x5c82ee)&&Imported[_0x4b25f(0x270)]&&this[_0x4b25f(0x7a3)](),_0x5c82ee==='WEAPON\x20SWAP'&&Imported[_0x4b25f(0x704)]&&this['addWeaponSwapCommand'](!![]),_0x5c82ee===_0x4b25f(0x9a3)&&Imported['VisuMZ_2_BattleGridSystem']&&this['addBattleGridMoveCommand']();},Window_ActorCommand[_0x4a80d9(0xba6)]['addAttackCommand']=function(){const _0x58498b=_0x4a80d9,_0x3420d4=$dataSkills[this[_0x58498b(0x547)][_0x58498b(0xcd0)]()];if(!_0x3420d4)return;if(!this[_0x58498b(0x842)](_0x3420d4))return;const _0x31751e=this[_0x58498b(0xb73)](),_0x8b71ef=DataManager[_0x58498b(0x9d8)](_0x3420d4),_0x17107f=DataManager[_0x58498b(0x3bb)](_0x3420d4),_0x5c2132=_0x31751e===_0x58498b(0x319)?_0x8b71ef:_0x58498b(0xb84)[_0x58498b(0x7d6)](_0x17107f,_0x8b71ef);this[_0x58498b(0x91d)](_0x5c2132,_0x58498b(0x365),this['_actor'][_0x58498b(0xb2b)]());},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x587)]=function(){const _0x520c4c=_0x4a80d9,_0x376c3a=$dataSkills[this['_actor']['guardSkillId']()];if(!_0x376c3a)return;if(!this['canAddSkillCommand'](_0x376c3a))return;const _0x5355c1=this['commandStyle'](),_0x12b487=DataManager[_0x520c4c(0x9d8)](_0x376c3a),_0x64bba5=DataManager[_0x520c4c(0x3bb)](_0x376c3a),_0x4de5a0=_0x5355c1==='text'?_0x12b487:_0x520c4c(0xb84)['format'](_0x64bba5,_0x12b487);this['addCommand'](_0x4de5a0,'guard',this[_0x520c4c(0x547)][_0x520c4c(0xa57)]());},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x1cb)]=function(){const _0x3b7c94=_0x4a80d9,_0x185f6d=this[_0x3b7c94(0xb73)](),_0x51cfbd=VisuMZ[_0x3b7c94(0xbe1)][_0x3b7c94(0x668)][_0x3b7c94(0x8a8)][_0x3b7c94(0xa31)],_0x4b95a2=_0x185f6d===_0x3b7c94(0x319)?TextManager[_0x3b7c94(0x6af)]:_0x3b7c94(0xb84)[_0x3b7c94(0x7d6)](_0x51cfbd,TextManager[_0x3b7c94(0x6af)]),_0x6030a1=this[_0x3b7c94(0x636)]();this['addCommand'](_0x4b95a2,_0x3b7c94(0x6af),_0x6030a1);},Window_ActorCommand[_0x4a80d9(0xba6)]['isItemCommandEnabled']=function(){const _0x145c59=_0x4a80d9;return this[_0x145c59(0x547)]&&this[_0x145c59(0x547)]['canUseItemCommand']();},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x168)]=function(){const _0x581f8b=_0x4a80d9,_0x4a5058=this[_0x581f8b(0x547)]['skillTypes']();for(const _0x49298f of _0x4a5058){this[_0x581f8b(0x631)](_0x49298f);}},Window_ActorCommand[_0x4a80d9(0xba6)]['addSkillTypeCommand']=function(_0x4cd74f){const _0x1c9ba3=_0x4a80d9;let _0x4b4aef=$dataSystem[_0x1c9ba3(0x438)][_0x4cd74f];if(!_0x4b4aef)return;let _0x74c36c=_0x4b4aef;const _0x423c2a=this[_0x1c9ba3(0xb73)]();if(_0x423c2a==='text')_0x74c36c=_0x74c36c[_0x1c9ba3(0x220)](/\x1I\[(\d+)\]/gi,''),_0x74c36c=_0x74c36c[_0x1c9ba3(0x220)](/\\I\[(\d+)\]/gi,'');else{if(!_0x4b4aef[_0x1c9ba3(0x605)](/\\I\[(\d+)\]/i)){if(_0x1c9ba3(0x50f)===_0x1c9ba3(0x928)){if(_0x4ff3a8[_0x1c9ba3(0x967)][_0x1c9ba3(0x752)]())return!![];this[_0x1c9ba3(0x3f0)]='';}else{const _0x1a0711=Imported[_0x1c9ba3(0x4fe)]?VisuMZ['SkillsStatesCore']['Settings'][_0x1c9ba3(0x3e2)]:VisuMZ[_0x1c9ba3(0xbe1)][_0x1c9ba3(0x668)][_0x1c9ba3(0x8a8)],_0x3439dd=$dataSystem['magicSkills'][_0x1c9ba3(0xcf9)](_0x4cd74f),_0x40e70d=_0x3439dd?_0x1a0711[_0x1c9ba3(0x944)]:_0x1a0711[_0x1c9ba3(0x259)];_0x74c36c='\x5cI[%1]%2'['format'](_0x40e70d,_0x4b4aef);}}}this[_0x1c9ba3(0x91d)](_0x74c36c,_0x1c9ba3(0x7b6),!![],_0x4cd74f);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xcc0)]=function(){const _0x5b5223=_0x4a80d9,_0x1c8c79=this['_actor']['skillTypes'](),_0x30b5d0=this[_0x5b5223(0x547)][_0x5b5223(0x791)]();for(const _0x46f302 of _0x30b5d0){if(_0x5b5223(0x1fd)!==_0x5b5223(0x21c)){if(!_0x46f302)continue;if(Imported[_0x5b5223(0x4fe)]){if(_0x5b5223(0x902)!==_0x5b5223(0x902))return _0x11f1cd[_0x5b5223(0xbe1)][_0x5b5223(0x668)][_0x5b5223(0x7c4)][_0x5b5223(0x55d)];else{if(this[_0x5b5223(0x246)](_0x46f302))continue;if(this[_0x5b5223(0xc85)](_0x46f302))continue;}}else{if(!_0x1c8c79[_0x5b5223(0xcf9)](_0x46f302[_0x5b5223(0x225)]))continue;}this[_0x5b5223(0x6b9)](_0x46f302);}else{let _0x40e8c1=_0x5b5223(0xb18);if(this[_0x5b5223(0xa3e)](_0x40e8c1))return this[_0x5b5223(0x9cd)][_0x40e8c1];return this[_0x5b5223(0x9cd)][_0x40e8c1]=this[_0x5b5223(0x7de)](this[_0x5b5223(0x378)]()),this[_0x5b5223(0x9cd)][_0x40e8c1];}}},Window_ActorCommand[_0x4a80d9(0xba6)]['noSimilarSTypes']=function(_0x5d5f8d){const _0x46d831=_0x4a80d9,_0x4ff029=this[_0x46d831(0x547)]['skillTypes'](),_0x49e03c=_0x4ff029['filter'](_0x3e5ba9=>DataManager[_0x46d831(0x62c)](_0x5d5f8d)['includes'](_0x3e5ba9));return _0x49e03c['length']<=0x0;},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xc85)]=function(_0x59fa89){const _0x5ca8b0=_0x4a80d9;if(Imported[_0x5ca8b0(0x4fe)]){if(VisuMZ['SkillsStatesCore'][_0x5ca8b0(0xbdd)]>=1.24){if(this[_0x5ca8b0(0x547)]){if(!VisuMZ['SkillsStatesCore'][_0x5ca8b0(0x688)](this[_0x5ca8b0(0x547)],_0x59fa89))return!![];if(!VisuMZ[_0x5ca8b0(0x596)]['CheckVisibleSwitchNotetags'](this[_0x5ca8b0(0x547)],_0x59fa89))return!![];if(!VisuMZ[_0x5ca8b0(0x596)][_0x5ca8b0(0xcc3)](this[_0x5ca8b0(0x547)],_0x59fa89))return!![];}}else{if(!Window_SkillList[_0x5ca8b0(0xba6)][_0x5ca8b0(0x62a)][_0x5ca8b0(0x432)](this,_0x59fa89))return!![];if(!Window_SkillList['prototype'][_0x5ca8b0(0xc49)][_0x5ca8b0(0x432)](this,_0x59fa89))return!![];if(!Window_SkillList[_0x5ca8b0(0xba6)]['checkShowHideSkillNotetags'][_0x5ca8b0(0x432)](this,_0x59fa89))return!![];}}return![];},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x6b9)]=function(_0x225f6b){const _0x45e65d=_0x4a80d9;if(!_0x225f6b)return;if(!this[_0x45e65d(0x842)](_0x225f6b))return;const _0x6628ff=this[_0x45e65d(0xb73)](),_0x49d5de=DataManager[_0x45e65d(0x9d8)](_0x225f6b),_0x1c3566=DataManager['battleCommandIcon'](_0x225f6b),_0x212cc8=_0x6628ff===_0x45e65d(0x319)?_0x49d5de:_0x45e65d(0xb84)[_0x45e65d(0x7d6)](_0x1c3566,_0x49d5de),_0x4cbb8b=this[_0x45e65d(0x547)][_0x45e65d(0x98d)](_0x225f6b);this[_0x45e65d(0x91d)](_0x212cc8,'singleSkill',_0x4cbb8b,_0x225f6b['id']);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x842)]=function(_0x110692){const _0x20eab4=_0x4a80d9,_0x24dec7=_0x110692[_0x20eab4(0x6c8)];if(_0x24dec7[_0x20eab4(0x605)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x20eab4(0x188)](_0x110692['id']))return![];}if(_0x24dec7[_0x20eab4(0x605)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x20eab4(0xb5e)!==_0x20eab4(0xb5e)){const _0x1d6fee=_0x4bc37c[_0x20eab4(0xbe1)][_0x20eab4(0x668)][_0x20eab4(0x7c4)],_0x4ef4b1=_0x469033[_0x20eab4(0x3a3)]?0x4:0x3,_0x412ddc=_0x4ef4b1*0x80+(_0x4ef4b1-0x1)*0x8+0x4,_0x1e0917=this[_0x20eab4(0x442)](_0x135724),_0x3f550e=this[_0x20eab4(0xaa8)](_0x5b661b);let _0x96e96d=_0x3f550e['x']+this[_0x20eab4(0x8eb)];_0x1d6fee['ShowFacesListStyle']?_0x96e96d=_0x3f550e['x']+_0x5defb2[_0x20eab4(0x5a6)]+0x8:_0x96e96d+=_0x99ed1c[_0x20eab4(0xcbd)];const _0x1a1421=_0x5656c7[_0x20eab4(0x961)](_0xccbb16['min'](_0x3f550e['x']+_0x3f550e[_0x20eab4(0x2ce)]-_0x412ddc,_0x96e96d)),_0x461128=_0x9a0db7[_0x20eab4(0x961)](_0x3f550e['y']+(_0x3f550e['height']-_0x41e695[_0x20eab4(0xba6)]['bitmapHeight']())/0x2),_0x3aa591=_0x5eb7da[_0x20eab4(0x961)](_0x1a1421-_0x123455['iconWidth']/0x2-0x4),_0x407068=_0x40c5ba[_0x20eab4(0x961)](_0x3f550e['y']+(_0x3f550e['height']-_0xadb4b1[_0x20eab4(0x867)])/0x2+_0x36b02b[_0x20eab4(0x867)]/0x2);let _0xb0b26=_0x1a1421+0x88;const _0x36577a=_0x461128;this[_0x20eab4(0x970)](_0x1e0917,_0x1a1421-0x4+(_0x1d6fee['TpbGaugeOffsetX']||0x0),_0x461128+(_0x1d6fee[_0x20eab4(0x586)]||0x0)),this[_0x20eab4(0x4e1)](_0x1e0917,_0x1a1421+(_0x1d6fee['NameOffsetX']||0x0),_0x461128+(_0x1d6fee[_0x20eab4(0x932)]||0x0)),this[_0x20eab4(0x1aa)](_0x1e0917,_0x3aa591+(_0x1d6fee['StateIconOffsetX']||0x0),_0x407068+(_0x1d6fee[_0x20eab4(0x393)]||0x0)),this[_0x20eab4(0x1dd)](_0x1e0917,'hp',_0xb0b26+0x88*0x0+(_0x1d6fee[_0x20eab4(0x809)]||0x0),_0x36577a+(_0x1d6fee[_0x20eab4(0x169)]||0x0)),this[_0x20eab4(0x1dd)](_0x1e0917,'mp',_0xb0b26+0x88*0x1+(_0x1d6fee[_0x20eab4(0xc71)]||0x0),_0x36577a+(_0x1d6fee[_0x20eab4(0x430)]||0x0)),_0x29dbd4[_0x20eab4(0x3a3)]&&this[_0x20eab4(0x1dd)](_0x1e0917,'tp',_0xb0b26+0x88*0x2+(_0x1d6fee[_0x20eab4(0x40b)]||0x0),_0x36577a+(_0x1d6fee['TpGaugeOffsetY']||0x0));}else{if(!this['_actor'][_0x20eab4(0x17e)](_0x110692['id']))return![];}}const _0x3d6997=VisuMZ[_0x20eab4(0xbe1)][_0x20eab4(0x24f)](_0x110692,_0x20eab4(0x5cb));if(VisuMZ[_0x20eab4(0xbe1)]['JS'][_0x3d6997]){if(_0x20eab4(0x202)===_0x20eab4(0x202)){if(!VisuMZ[_0x20eab4(0xbe1)]['JS'][_0x3d6997]['call'](this,this[_0x20eab4(0x547)],_0x110692))return![];}else{const _0x37e577=this[_0x20eab4(0x6af)]()[_0x20eab4(0x37f)];return _0x37e577[_0x20eab4(0x605)](/(?:ENEMY|FOE)/i)&&_0x37e577[_0x20eab4(0x605)](/OR/i)&&_0x37e577[_0x20eab4(0x605)](/(?:ALLY|FRIEND)/i);}}return VisuMZ['BattleCore'][_0x20eab4(0x52d)](_0x110692);},VisuMZ[_0x4a80d9(0xbe1)]['CheckSkillCommandShowSwitches']=function(_0x3fc16d){const _0x50fb56=_0x4a80d9,_0x3fd689=_0x3fc16d[_0x50fb56(0x6c8)];if(_0x3fd689[_0x50fb56(0x605)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x25b79a=JSON[_0x50fb56(0x762)]('['+RegExp['$1'][_0x50fb56(0x605)](/\d+/g)+']');for(const _0x1f4ae9 of _0x25b79a){if(_0x50fb56(0x665)===_0x50fb56(0x3e6))this[_0x50fb56(0x736)]('walk');else{if(!$gameSwitches[_0x50fb56(0x638)](_0x1f4ae9))return![];}}return!![];}if(_0x3fd689[_0x50fb56(0x605)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3e9d46=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x30839c of _0x3e9d46){if(_0x50fb56(0x35f)!==_0x50fb56(0x35f))_0x13661f['removeCurrentAction'](),this[_0x50fb56(0xb7f)]();else{if(!$gameSwitches[_0x50fb56(0x638)](_0x30839c))return![];}}return!![];}if(_0x3fd689[_0x50fb56(0x605)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2a01cf=JSON[_0x50fb56(0x762)]('['+RegExp['$1'][_0x50fb56(0x605)](/\d+/g)+']');for(const _0x2e10d9 of _0x2a01cf){if($gameSwitches[_0x50fb56(0x638)](_0x2e10d9))return!![];}return![];}if(_0x3fd689['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('qLQad'==='huTFg')_0x4cdf40*=this[_0x50fb56(0x1e3)]()['pha'];else{const _0x39b00d=JSON[_0x50fb56(0x762)]('['+RegExp['$1'][_0x50fb56(0x605)](/\d+/g)+']');for(const _0x3a20de of _0x39b00d){if(!$gameSwitches['value'](_0x3a20de))return!![];}return![];}}if(_0x3fd689[_0x50fb56(0x605)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x35c35c=JSON[_0x50fb56(0x762)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x145cb0 of _0x35c35c){if('lxtlB'!==_0x50fb56(0x8d2)){const _0xeb7ce5=this[_0x50fb56(0x46b)](_0x50fb56(0x7b6),_0x2ac989[_0x50fb56(0x225)]);this[_0x50fb56(0x8b9)](_0xeb7ce5||0x0);}else{if(!$gameSwitches[_0x50fb56(0x638)](_0x145cb0))return!![];}}return![];}if(_0x3fd689['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x50fb56(0xc51)===_0x50fb56(0xc51)){const _0x4f37f0=JSON[_0x50fb56(0x762)]('['+RegExp['$1'][_0x50fb56(0x605)](/\d+/g)+']');for(const _0x5e0bd9 of _0x4f37f0){if($gameSwitches[_0x50fb56(0x638)](_0x5e0bd9))return![];}return!![];}else{const _0x59995e=_0x91ea3c['parse']('['+_0x2a3b34['$1'][_0x50fb56(0x605)](/\d+/g)+']');for(const _0x40781f of _0x59995e){if(!_0x118d5a['value'](_0x40781f))return![];}return!![];}}return!![];},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xc83)]=function(){const _0x3a2417=_0x4a80d9,_0x28be4f=this['commandStyle'](),_0x222f01=VisuMZ[_0x3a2417(0xbe1)]['Settings']['PartyCmd'][_0x3a2417(0x911)],_0x30cca3=_0x28be4f==='text'?TextManager['escape']:_0x3a2417(0xb84)[_0x3a2417(0x7d6)](_0x222f01,TextManager[_0x3a2417(0xc41)]),_0x13d9b9=this[_0x3a2417(0xa36)]();this[_0x3a2417(0x91d)](_0x30cca3,_0x3a2417(0xc41),_0x13d9b9);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xa36)]=function(){const _0x4aed07=_0x4a80d9;return BattleManager[_0x4aed07(0x8a7)]();},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x492)]=function(){const _0x4ac41e=_0x4a80d9,_0x3edc8a=this[_0x4ac41e(0xb73)](),_0x3c0e37=VisuMZ[_0x4ac41e(0xbe1)]['Settings'][_0x4ac41e(0x24b)]['CmdIconAutoBattle'],_0x4883fd=_0x3edc8a===_0x4ac41e(0x319)?TextManager[_0x4ac41e(0x7f7)]:_0x4ac41e(0xb84)['format'](_0x3c0e37,TextManager[_0x4ac41e(0x7f7)]),_0x373c3e=this[_0x4ac41e(0x3d7)]();this[_0x4ac41e(0x91d)](_0x4883fd,'autoBattle',_0x373c3e);},Window_ActorCommand['prototype'][_0x4a80d9(0x3d7)]=function(){return!![];},Window_ActorCommand[_0x4a80d9(0xba6)]['itemTextAlign']=function(){const _0x69d7dd=_0x4a80d9;return VisuMZ[_0x69d7dd(0xbe1)][_0x69d7dd(0x668)]['ActorCmd'][_0x69d7dd(0x9b7)];},Window_ActorCommand[_0x4a80d9(0xba6)]['drawItem']=function(_0x51ad4f){const _0x572557=_0x4a80d9,_0x70b30b=this[_0x572557(0x77e)](_0x51ad4f);if(_0x70b30b==='iconText'){if(_0x572557(0x189)!==_0x572557(0x189)){this['_text']=this['enemy']()['name']();const _0x3c918b=this[_0x572557(0x475)](this[_0x572557(0x22e)])[_0x572557(0x2ce)],_0x3fc7c2=_0x51e038[_0x572557(0x961)]((this['innerWidth']-_0x3c918b)/0x2);this['drawTextEx'](this['_text'],_0x3fc7c2,0x0,_0x3c918b+0x8);}else this['drawItemStyleIconText'](_0x51ad4f);}else _0x70b30b==='icon'?this[_0x572557(0x4c7)](_0x51ad4f):Window_Command['prototype']['drawItem']['call'](this,_0x51ad4f);this[_0x572557(0x26c)](_0x51ad4f);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0xb73)]=function(){const _0x402272=_0x4a80d9;return VisuMZ[_0x402272(0xbe1)][_0x402272(0x668)]['ActorCmd'][_0x402272(0x2c3)];},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x77e)]=function(_0x5dadab){const _0x2715f7=_0x4a80d9;if(_0x5dadab<0x0)return'text';const _0x26b357=this[_0x2715f7(0xb73)]();if(_0x26b357!==_0x2715f7(0x1a7))return _0x26b357;else{if(this[_0x2715f7(0x407)]()>0x0){if(_0x2715f7(0x19c)===_0x2715f7(0x213))return _0x148997[_0x2715f7(0xbe1)][_0x2715f7(0x668)]['BattleLayout'][_0x2715f7(0x745)];else{const _0x44fec9=this[_0x2715f7(0x641)](_0x5dadab);if(_0x44fec9[_0x2715f7(0x605)](/\\I\[(\d+)\]/i)){const _0x44ab44=this[_0x2715f7(0xcf8)](_0x5dadab),_0x32c861=this[_0x2715f7(0x475)](_0x44fec9)[_0x2715f7(0x2ce)];return _0x32c861<=_0x44ab44[_0x2715f7(0x2ce)]?_0x2715f7(0x3d3):'icon';}}}}return _0x2715f7(0x319);},Window_ActorCommand[_0x4a80d9(0xba6)]['drawItemStyleIconText']=function(_0x4f0d1d){const _0x5c8622=_0x4a80d9,_0x173d78=this['itemLineRect'](_0x4f0d1d),_0x44a4c7=this[_0x5c8622(0x641)](_0x4f0d1d),_0x3225ec=this['textSizeEx'](_0x44a4c7)[_0x5c8622(0x2ce)];this[_0x5c8622(0x15a)](this['isCommandEnabled'](_0x4f0d1d));const _0x5c813d=this['itemTextAlign']();if(_0x5c813d==='right')this[_0x5c8622(0x1cf)](_0x44a4c7,_0x173d78['x']+_0x173d78[_0x5c8622(0x2ce)]-_0x3225ec,_0x173d78['y'],_0x3225ec);else{if(_0x5c813d===_0x5c8622(0x4c5)){const _0x1da6b9=_0x173d78['x']+Math[_0x5c8622(0x506)]((_0x173d78[_0x5c8622(0x2ce)]-_0x3225ec)/0x2);this[_0x5c8622(0x1cf)](_0x44a4c7,_0x1da6b9,_0x173d78['y'],_0x3225ec);}else this['drawTextEx'](_0x44a4c7,_0x173d78['x'],_0x173d78['y'],_0x3225ec);}},Window_ActorCommand[_0x4a80d9(0xba6)]['drawItemStyleIcon']=function(_0x5c89d8){const _0x5b99d6=_0x4a80d9;this[_0x5b99d6(0x641)](_0x5c89d8)[_0x5b99d6(0x605)](/\\I\[(\d+)\]/i);const _0x10f352=Number(RegExp['$1'])||0x0,_0x1654c0=this[_0x5b99d6(0xcf8)](_0x5c89d8),_0x27917c=_0x1654c0['x']+Math[_0x5b99d6(0x506)]((_0x1654c0[_0x5b99d6(0x2ce)]-ImageManager[_0x5b99d6(0xcbd)])/0x2),_0x55400d=_0x1654c0['y']+(_0x1654c0[_0x5b99d6(0x8dc)]-ImageManager[_0x5b99d6(0x867)])/0x2;this[_0x5b99d6(0xae1)](_0x10f352,_0x27917c,_0x55400d);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x26c)]=function(_0x4f4ba6){const _0x4ac4ac=_0x4a80d9;if(!(VisuMZ[_0x4ac4ac(0xbe1)][_0x4ac4ac(0x668)][_0x4ac4ac(0x8a8)][_0x4ac4ac(0x3d2)]??!![]))return;const _0x8bc5b2=this[_0x4ac4ac(0x4d5)](_0x4f4ba6);if(![_0x4ac4ac(0x365),_0x4ac4ac(0x79a),_0x4ac4ac(0xafe)][_0x4ac4ac(0xcf9)](_0x8bc5b2))return;const _0x39610c=this['itemLineRect'](_0x4f4ba6);let _0x549211=null;if(_0x8bc5b2==='attack')_0x549211=$dataSkills[this['_actor'][_0x4ac4ac(0xcd0)]()];else _0x8bc5b2==='guard'?_0x4ac4ac(0xa52)===_0x4ac4ac(0x428)?this[_0x4ac4ac(0x7c0)]=![]:_0x549211=$dataSkills[this['_actor']['guardSkillId']()]:_0x549211=$dataSkills[this[_0x4ac4ac(0x653)][_0x4f4ba6][_0x4ac4ac(0x88f)]];this[_0x4ac4ac(0x990)](this[_0x4ac4ac(0x547)],_0x549211,_0x39610c['x'],_0x39610c['y'],_0x39610c[_0x4ac4ac(0x2ce)]);},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x990)]=function(_0x2d6de9,_0x5b4a76,_0x5c34b1,_0x2b1c46,_0x5a7d48){const _0x599309=_0x4a80d9;if(!_0x5b4a76)return;if(Imported[_0x599309(0x4fe)])Window_Command['prototype'][_0x599309(0x990)][_0x599309(0x432)](this,_0x2d6de9,_0x5b4a76,_0x5c34b1,_0x2b1c46,_0x5a7d48);else{if(_0x599309(0x821)===_0x599309(0x821))Window_SkillList[_0x599309(0xba6)][_0x599309(0x990)][_0x599309(0x432)](this,_0x5b4a76,_0x5c34b1,_0x2b1c46,_0x5a7d48);else{if(!this[_0x599309(0x444)])return;if(!_0x14d224)return;this[_0x599309(0x444)][_0x599309(0xbaf)](_0x18f74a);}}},Window_ActorCommand['prototype']['hide']=function(){},Window_ActorCommand['prototype'][_0x4a80d9(0xbe7)]=function(){const _0x1141d5=_0x4a80d9;Window_Command['prototype']['activate'][_0x1141d5(0x432)](this);const _0x235328=this[_0x1141d5(0x4bb)]();if(_0x235328===_0x1141d5(0x33a)){if(_0x1141d5(0x377)!==_0x1141d5(0x377)){if(!_0x54b1e4[_0x1141d5(0x6e5)]())return;const _0x5eaa72=this['battler']();if(!_0x5eaa72)return;if(_0x248376)this['setBattlerFacePoint'](_0x2b26f4+_0x5eaa72['_baseX'],_0x421350+_0x5eaa72[_0x1141d5(0x1d5)],![]);_0x100017+=_0x5eaa72[_0x1141d5(0x9ec)]-_0x5eaa72[_0x1141d5(0xa47)],_0x3dee08+=_0x5eaa72[_0x1141d5(0x1d5)]-_0x5eaa72[_0x1141d5(0x1b4)],_0x5eaa72[_0x1141d5(0x163)](_0x4d4df7,_0x4f909f,_0x49ae7a);if(_0x4cc43c[_0x1141d5(0xb80)])_0x5eaa72[_0x1141d5(0x3fd)](_0x484b06||_0x1141d5(0xa70));}else this[_0x1141d5(0x6ce)]();}},Window_ActorCommand[_0x4a80d9(0xba6)][_0x4a80d9(0x4bb)]=function(){const _0x1410d4=_0x4a80d9;if(this[_0x1410d4(0x796)])return this[_0x1410d4(0x796)];return this[_0x1410d4(0x796)]=SceneManager[_0x1410d4(0xb97)][_0x1410d4(0x4bb)](),this['_battleLayoutStyle'];},VisuMZ[_0x4a80d9(0xbe1)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x4a80d9(0xba6)]['setup'],Window_ActorCommand['prototype'][_0x4a80d9(0x622)]=function(_0x5a6067){const _0x29c265=_0x4a80d9,_0x40edfe=this[_0x29c265(0x4bb)]();if(_0x5a6067&&['xp',_0x29c265(0x120)][_0x29c265(0xcf9)](_0x40edfe))this[_0x29c265(0x5b4)](_0x5a6067);else _0x5a6067&&['border'][_0x29c265(0xcf9)](_0x40edfe)&&(this['resizeWindowBorderStyle'](_0x5a6067),this[_0x29c265(0x6ce)]());VisuMZ['BattleCore'][_0x29c265(0xcb3)][_0x29c265(0x432)](this,_0x5a6067),_0x5a6067&&$gameTroop[_0x29c265(0x564)]()[_0x29c265(0x6fc)]>0x0&&_0x5a6067['battler']()&&('vFTgl'!==_0x29c265(0x7fb)?_0x5a6067[_0x29c265(0x997)]()['stepForward']():(_0x7584f6==='BattleVictoryJS'&&(this[_0x29c265(0x22a)]=!![]),_0x15283d[_0x29c265(0x63c)](_0x29dfb3),_0x18989f['processBattleCoreJS'](_0x1bac6d)));},Window_ActorCommand[_0x4a80d9(0xba6)]['resizeWindowXPStyle']=function(_0x1f82bc){const _0x266c5a=_0x4a80d9,_0x5d5ced=VisuMZ[_0x266c5a(0xbe1)][_0x266c5a(0x668)][_0x266c5a(0x7c4)][_0x266c5a(0xbbc)],_0x47ae35=Math[_0x266c5a(0x961)](Graphics[_0x266c5a(0x84d)]/0x3),_0x64136c=Math[_0x266c5a(0x961)](Graphics['boxWidth']/$gameParty['battleMembers']()[_0x266c5a(0x6fc)]),_0x8901a9=Math[_0x266c5a(0x78c)](Math[_0x266c5a(0x834)](_0x47ae35,_0x64136c),_0x5d5ced),_0x3d32a9=this[_0x266c5a(0x28c)](VisuMZ['BattleCore'][_0x266c5a(0x668)]['BattleLayout'][_0x266c5a(0xaf5)]),_0x400fee=Math[_0x266c5a(0x506)]((Graphics['boxWidth']-Graphics[_0x266c5a(0x2ce)])/0x2),_0x1a7eb2=Graphics[_0x266c5a(0x84d)]-_0x400fee,_0x1465ef=(Math[_0x266c5a(0x961)](_0x64136c*_0x1f82bc[_0x266c5a(0x4a4)]())+Math[_0x266c5a(0x961)]((_0x64136c-_0x8901a9)/0x2))[_0x266c5a(0xb4e)](_0x400fee,_0x1a7eb2-_0x8901a9),_0x32fcb9=Math[_0x266c5a(0x961)](SceneManager[_0x266c5a(0xb97)][_0x266c5a(0x989)]['y']-_0x3d32a9);this[_0x266c5a(0x788)](_0x1465ef,_0x32fcb9,_0x8901a9,_0x3d32a9),this[_0x266c5a(0x758)](),this[_0x266c5a(0xb45)](0x1);},Window_ActorCommand[_0x4a80d9(0xba6)]['resizeWindowBorderStyle']=function(_0x2a677c){const _0x282e5c=_0x4a80d9,_0x2cba6e=SceneManager[_0x282e5c(0xb97)][_0x282e5c(0x5a8)]();this[_0x282e5c(0x788)](_0x2cba6e['x'],_0x2cba6e['y'],_0x2cba6e[_0x282e5c(0x2ce)],_0x2cba6e[_0x282e5c(0x8dc)]),this[_0x282e5c(0x758)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x4a80d9(0xba6)]['refreshDimmerBitmap']=function(){const _0x36c901=_0x4a80d9;if(this[_0x36c901(0x9f6)]){const _0x27b98b=this[_0x36c901(0x9f6)]['bitmap'],_0x5c7b76=this[_0x36c901(0x2ce)]-0x8,_0x26715c=this[_0x36c901(0x8dc)],_0x12d5b0=this['padding'],_0x483278=ColorManager[_0x36c901(0x7e0)](),_0x3942e4=ColorManager[_0x36c901(0xc2c)]();this[_0x36c901(0x9f6)]['x']=0x4,_0x27b98b['resize'](_0x5c7b76,_0x26715c),_0x27b98b['gradientFillRect'](0x0,0x0,_0x5c7b76,_0x12d5b0,_0x3942e4,_0x483278,!![]),_0x27b98b[_0x36c901(0x4d3)](0x0,_0x12d5b0,_0x5c7b76,_0x26715c-_0x12d5b0*0x2,_0x483278),_0x27b98b[_0x36c901(0xc0e)](0x0,_0x26715c-_0x12d5b0,_0x5c7b76,_0x12d5b0,_0x483278,_0x3942e4,!![]),this[_0x36c901(0x9f6)][_0x36c901(0xabb)](0x0,0x0,_0x5c7b76,_0x26715c);}},Window_ActorCommand[_0x4a80d9(0xba6)]['updateHelp']=function(){const _0x2663fa=_0x4a80d9;if(!this[_0x2663fa(0x547)])return;const _0x407652=VisuMZ[_0x2663fa(0xbe1)]['Settings']['ActorCmd'],_0x27435d=this[_0x2663fa(0x5c4)]();switch(_0x27435d){case _0x2663fa(0x365):this[_0x2663fa(0x84c)]($dataSkills[this[_0x2663fa(0x547)][_0x2663fa(0xcd0)]()]);break;case _0x2663fa(0x79a):this[_0x2663fa(0x84c)]($dataSkills[this['_actor'][_0x2663fa(0x43f)]()]);break;case _0x2663fa(0x7b6):const _0x366c9a=_0x407652[_0x2663fa(0xa3c)],_0xf9c023=_0x366c9a[_0x2663fa(0x7d6)]($dataSystem[_0x2663fa(0x438)][this['currentExt']()]);this['_helpWindow'][_0x2663fa(0x37e)](_0xf9c023);break;case'singleSkill':this[_0x2663fa(0x84c)]($dataSkills[this[_0x2663fa(0xc20)]()]);break;case _0x2663fa(0x6af):this['_helpWindow']['setText'](_0x407652[_0x2663fa(0x4ff)]);break;case _0x2663fa(0xc41):this['_helpWindow'][_0x2663fa(0x37e)](_0x407652[_0x2663fa(0x500)]);break;case _0x2663fa(0x7f7):this[_0x2663fa(0x676)][_0x2663fa(0x37e)](_0x407652[_0x2663fa(0xa41)]);break;default:this[_0x2663fa(0x676)][_0x2663fa(0x37e)]('');break;}},Window_ActorCommand['prototype'][_0x4a80d9(0xbb8)]=function(){const _0x2d74b6=_0x4a80d9;this['forceSelect'](0x0);if(this[_0x2d74b6(0x547)]&&ConfigManager[_0x2d74b6(0x7cb)]){const _0x375787=this['_actor']['lastCommandSymbol']();this[_0x2d74b6(0x841)](_0x375787);if(_0x375787===_0x2d74b6(0x7b6)){if('WzhGi'===_0x2d74b6(0xb10))this[_0x2d74b6(0x8f2)]()&&this[_0x2d74b6(0x75b)]();else{const _0x192bb4=this[_0x2d74b6(0x547)][_0x2d74b6(0x9ba)]();if(_0x192bb4){if(_0x2d74b6(0x561)==='WfjKw')!this['updateEventMain']()&&!this[_0x2d74b6(0x2d4)]['isBusy']()&&(this[_0x2d74b6(0xfa)]='action');else{const _0x1f1a3c=this[_0x2d74b6(0x46b)]('skill',_0x192bb4['stypeId']);this[_0x2d74b6(0x8b9)](_0x1f1a3c||0x0);}}}}else{if(_0x375787===_0x2d74b6(0xafe)){const _0x15c8ca=this[_0x2d74b6(0x547)][_0x2d74b6(0x9ba)]();if(_0x15c8ca){const _0x43d6a2=this[_0x2d74b6(0x46b)](_0x2d74b6(0xafe),_0x15c8ca['id']);this[_0x2d74b6(0x8b9)](_0x43d6a2||0x0);}}}}},Window_ActorCommand['prototype'][_0x4a80d9(0x46b)]=function(_0x20178b,_0x1c7b74){const _0x372cbd=_0x4a80d9;return this['_list'][_0x372cbd(0xc8f)](_0x22884e=>_0x22884e['symbol']===_0x20178b&&_0x22884e['ext']===_0x1c7b74);},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)],Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(_0x323b34){const _0x274a81=_0x4a80d9;VisuMZ[_0x274a81(0xbe1)][_0x274a81(0x3ad)][_0x274a81(0x432)](this,_0x323b34),this[_0x274a81(0x763)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x4bb)]=function(){const _0x3df4a4=_0x4a80d9;if(this[_0x3df4a4(0x796)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x3df4a4(0xb97)][_0x3df4a4(0x4bb)](),this[_0x3df4a4(0x796)];},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x763)]=function(){const _0x997cd3=_0x4a80d9;this[_0x997cd3(0x913)]=this['isFrameVisible']();const _0x3eadef=VisuMZ[_0x997cd3(0xbe1)][_0x997cd3(0x668)]['BattleLayout'];_0x3eadef[_0x997cd3(0xab1)]&&(this[_0x997cd3(0x2ff)]=0x0);},Window_BattleStatus['prototype'][_0x4a80d9(0x22c)]=function(){const _0xbcff4b=_0x4a80d9,_0x43b42a=VisuMZ['BattleCore'][_0xbcff4b(0x668)][_0xbcff4b(0x7c4)];if(_0x43b42a[_0xbcff4b(0x25f)])return!![];const _0x4658dd=this[_0xbcff4b(0x4bb)]();switch(_0x4658dd){case'list':case _0xbcff4b(0x33a):return!![];break;case _0xbcff4b(0x7e5):case'xp':case _0xbcff4b(0x120):default:return![];break;}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xb67)]=function(){const _0x3406ac=_0x4a80d9;return this[_0x3406ac(0x22c)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x4a80d9(0x1c3)]=function(){const _0x319fb3=_0x4a80d9,_0x154467=this[_0x319fb3(0x4bb)]();switch(_0x154467){case _0x319fb3(0xa03):return 0x1;break;case'xp':case _0x319fb3(0x120):return $gameParty['battleMembers']()[_0x319fb3(0x6fc)];break;case'default':default:return $gameParty[_0x319fb3(0xab7)]();break;}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x52c)]=function(){const _0x22645a=_0x4a80d9,_0x4e154f=this[_0x22645a(0x4bb)]();switch(_0x4e154f){case _0x22645a(0xa03):return Window_StatusBase[_0x22645a(0xba6)][_0x22645a(0x52c)][_0x22645a(0x432)](this);break;case _0x22645a(0x7e5):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x4a80d9(0x2ca)]=function(){const _0x54e961=_0x4a80d9,_0x20df1b=this[_0x54e961(0x4bb)]();switch(_0x20df1b){case _0x54e961(0xa03):return Window_StatusBase[_0x54e961(0xba6)]['rowSpacing']['call'](this);break;case _0x54e961(0x7e5):case'xp':case _0x54e961(0x120):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x4a80d9(0x71f)]=function(){const _0x4860d8=_0x4a80d9;if(this['isFrameVisible']()){if('oNkrH'!==_0x4860d8(0xa68))Window_StatusBase[_0x4860d8(0xba6)][_0x4860d8(0x71f)][_0x4860d8(0x432)](this);else{if(_0x3bfd41[_0x4860d8(0x89d)])return;this[_0x4860d8(0x3fe)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x4860d8(0x816)]();}}else _0x4860d8(0x398)==='wYYsB'?(this[_0x4860d8(0x800)]()&&this[_0x4860d8(0xfa)]===_0x4860d8(0x69d)&&(this[_0x4860d8(0x9e0)]=null),_0x4d0a26[_0x4860d8(0xbe1)][_0x4860d8(0x2d3)][_0x4860d8(0x432)](this)):this[_0x4860d8(0x8eb)]=0x8;},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x6ed)]=function(){const _0x207051=_0x4a80d9,_0x138b4d=VisuMZ[_0x207051(0xbe1)][_0x207051(0x668)][_0x207051(0x7c4)];_0x138b4d[_0x207051(0x25f)]?this[_0x207051(0xcd3)]=ImageManager[_0x207051(0x7c7)](_0x138b4d[_0x207051(0x25f)]):'uNvle'==='uNvle'?Window_StatusBase[_0x207051(0xba6)]['loadWindowskin'][_0x207051(0x432)](this):(_0x290e96[_0x207051(0xbe1)][_0x207051(0x90e)]['call'](this),_0x300397['clearForcedGameTroopSettingsBattleCore']());},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x578)]=function(_0x3af2ba){const _0x3e2ec6=_0x4a80d9,_0xb0050e=VisuMZ[_0x3e2ec6(0xbe1)][_0x3e2ec6(0x668)]['BattleLayout'];if(_0xb0050e[_0x3e2ec6(0xb32)])return;Window_StatusBase[_0x3e2ec6(0xba6)][_0x3e2ec6(0x578)][_0x3e2ec6(0x432)](this,_0x3af2ba);},Window_BattleStatus[_0x4a80d9(0xba6)]['requestRefresh']=function(){const _0x295864=_0x4a80d9;this[_0x295864(0x517)]=!![];},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x11aab3=_0x4a80d9;Window_StatusBase['prototype'][_0x11aab3(0x333)]['call'](this),this[_0x11aab3(0x84a)](),this['updateEffectContainers']();if(this[_0x11aab3(0x4bb)]()===_0x11aab3(0x33a))this[_0x11aab3(0x341)]();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0x13de5c=_0x4a80d9;if($gameTemp[_0x13de5c(0x49f)]())this[_0x13de5c(0x9b5)](),this[_0x13de5c(0x517)]=![],$gameTemp[_0x13de5c(0xcc4)]();else this[_0x13de5c(0x517)]&&(_0x13de5c(0x2c2)===_0x13de5c(0xa50)?(this[_0x13de5c(0x2d4)][_0x13de5c(0x510)]('addText',_0xaa2dbc[_0x13de5c(0x6d3)][_0x13de5c(0x7d6)](_0x555373[_0x13de5c(0x380)]())),this[_0x13de5c(0x2d4)][_0x13de5c(0x510)](_0x13de5c(0xca3))):(this['_requestRefresh']=![],this[_0x13de5c(0x1d6)](),this['updateAttachmentSprites']()));},Window_BattleStatus['prototype']['show']=function(){const _0x4bf234=_0x4a80d9;Window_StatusBase[_0x4bf234(0xba6)][_0x4bf234(0x3a5)][_0x4bf234(0x432)](this);if(!$gameSystem[_0x4bf234(0x6e5)]())this[_0x4bf234(0x1d6)]();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x670)]=function(){const _0x14e6b5=_0x4a80d9;if(this[_0x14e6b5(0xc12)]===Window_BattleStatus)return;Window_StatusBase[_0x14e6b5(0xba6)][_0x14e6b5(0x670)][_0x14e6b5(0x432)](this);},Window_BattleStatus['prototype'][_0x4a80d9(0x515)]=function(_0x42977f){const _0x1c3b20=_0x4a80d9,_0x428db2=this[_0x1c3b20(0x4bb)]();switch(_0x428db2){case'xp':case _0x1c3b20(0x120):break;case _0x1c3b20(0x7e5):case'list':case _0x1c3b20(0x33a):default:return Window_StatusBase[_0x1c3b20(0xba6)]['drawBackgroundRect'][_0x1c3b20(0x432)](this,_0x42977f);break;}},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x348)],Window_BattleStatus['prototype'][_0x4a80d9(0x348)]=function(_0x357d1e){const _0x278baf=_0x4a80d9,_0x3ca286=this[_0x278baf(0x4bb)]();switch(_0x3ca286){case _0x278baf(0xa03):this['drawItemImageListStyle'](_0x357d1e);break;case'xp':this[_0x278baf(0xb94)](_0x357d1e);break;case _0x278baf(0x120):this[_0x278baf(0xcd2)](_0x357d1e);break;case'default':case _0x278baf(0x33a):default:VisuMZ[_0x278baf(0xbe1)]['Window_BattleStatus_drawItemImage'][_0x278baf(0x432)](this,_0x357d1e);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x146d0a){const _0x312399=_0x4a80d9,_0x13d19a=this['battleLayoutStyle']();if(!$gameSystem[_0x312399(0x6e5)]())this['centerFrontViewSprite'](_0x146d0a);switch(_0x13d19a){case _0x312399(0xa03):this[_0x312399(0x43e)](_0x146d0a);break;case'xp':case _0x312399(0x120):case _0x312399(0x7e5):case _0x312399(0x33a):default:this[_0x312399(0x414)](_0x146d0a);break;}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x157)]=function(){const _0x19fa17=_0x4a80d9,_0x21d75e=this['battleLayoutStyle']();if(['xp'][_0x19fa17(0xcf9)](_0x21d75e)&&!$gameSystem[_0x19fa17(0x6e5)]()){if('xmmbH'!==_0x19fa17(0x24a))_0x333f3f['BattleCore'][_0x19fa17(0xceb)]['call'](this),_0x256aea['isSceneBattle']()&&this['requestMotion'](_0x19fa17(0xc84));else{this[_0x19fa17(0x2a8)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x19fa17(0xba6)][_0x19fa17(0x157)][_0x19fa17(0x432)](this);},Window_BattleStatus[_0x4a80d9(0xba6)]['centerFrontViewSprite']=function(_0x5f46d8){const _0x1bbf20=_0x4a80d9,_0x2d99e8=this[_0x1bbf20(0x442)](_0x5f46d8)[_0x1bbf20(0x997)]();if(!_0x2d99e8)return;const _0x5b4037=this[_0x1bbf20(0x4bb)](),_0x8b65a3=this[_0x1bbf20(0xaa8)](_0x5f46d8);let _0xec6a0c=Math[_0x1bbf20(0x961)](_0x8b65a3['x']+_0x8b65a3[_0x1bbf20(0x2ce)]/0x2)+this['padding'];if([_0x1bbf20(0xa03)][_0x1bbf20(0xcf9)](_0x5b4037)){if('IHoVf'===_0x1bbf20(0x637))_0xec6a0c=_0x8b65a3['width']/$gameParty['battleMembers']()[_0x1bbf20(0x6fc)],_0xec6a0c*=_0x5f46d8,_0xec6a0c+=_0x8b65a3[_0x1bbf20(0x2ce)]/$gameParty[_0x1bbf20(0x58d)]()[_0x1bbf20(0x6fc)]/0x2;else{const _0x45e281=_0x55d0e4[_0x1bbf20(0xbe1)]['Settings'][_0x1bbf20(0x490)],_0x28a5da=this[_0x1bbf20(0x437)]&&this[_0x1bbf20(0x437)][_0x1bbf20(0x172)]()?0x1:-0x1,_0x326512=this[_0x1bbf20(0x9ec)]-this['_homeX']+_0x28a5da*_0x45e281['FlinchDistanceX'],_0x1c9eb1=this['_baseY']-this[_0x1bbf20(0x1b4)]+_0x28a5da*_0x45e281[_0x1bbf20(0x4fa)],_0x360432=_0x45e281[_0x1bbf20(0x5f1)];this[_0x1bbf20(0x163)](_0x326512,_0x1c9eb1,_0x360432);}}let _0x3dc5a9=Math[_0x1bbf20(0x961)](this['frontviewSpriteY'](_0x5f46d8,_0x2d99e8,_0x8b65a3));_0x2d99e8[_0x1bbf20(0x3f8)](_0xec6a0c,_0x3dc5a9),this[_0x1bbf20(0xbd1)](_0x2d99e8,0x1),_0x2d99e8[_0x1bbf20(0x3a5)](),this['updateEffectsContainer'](),this[_0x1bbf20(0xa34)]();},Window_BattleStatus[_0x4a80d9(0xba6)]['frontviewSpriteY']=function(_0x557f92,_0x30e38f,_0x1f90fa){const _0x168214=_0x4a80d9,_0x33190b=VisuMZ[_0x168214(0xbe1)][_0x168214(0x668)][_0x168214(0x7c4)],_0x5a8f74=this[_0x168214(0x4bb)]();if(_0x5a8f74==='xp'){if('aHVRT'!==_0x168214(0x6b7))_0x3b8738=_0x581bed>=_0x447278?_0xb015a:_0x490d89;else{const _0x2f151a=_0x33190b[_0x168214(0x4c8)];switch(_0x2f151a[_0x168214(0x303)]()['trim']()){case _0x168214(0x8e7):return _0x1f90fa['height']-_0x30e38f['_shadowSprite'][_0x168214(0x8dc)]/0x4;break;case _0x168214(0x4c5):const _0x28bf49=_0x33190b[_0x168214(0x53b)];return(_0x1f90fa[_0x168214(0x8dc)]+(_0x30e38f[_0x168214(0x8dc)]||_0x28bf49))/0x2;break;case _0x168214(0xb75):return 0x0;case'name':default:return this[_0x168214(0x2ea)](_0x1f90fa);break;}}}else{if(_0x5a8f74===_0x168214(0x120)){}}return _0x30e38f[_0x168214(0x8dc)];},Sprite_Name[_0x4a80d9(0xba6)][_0x4a80d9(0x8fc)]=function(){return 0x24;},Sprite_Name[_0x4a80d9(0xba6)][_0x4a80d9(0x39b)]=function(){const _0x397f87=_0x4a80d9,_0x535899=this[_0x397f87(0x380)](),_0x393945=this[_0x397f87(0xaca)](),_0x44041c=this[_0x397f87(0x8fc)]();this[_0x397f87(0xa5d)](),this[_0x397f87(0xc0b)]['clear'](),this[_0x397f87(0xc0b)][_0x397f87(0x3d4)](_0x535899,0x4,0x0,_0x393945,_0x44041c,_0x397f87(0x10b));},Bitmap[_0x4a80d9(0xba6)][_0x4a80d9(0x3d4)]=function(_0x23451e,_0x3720fb,_0xea35dc,_0x5c3b0e,_0x4f5644,_0x70587){const _0x105df4=_0x4a80d9,_0x1aa00a=this['context'],_0xb1ca23=_0x1aa00a[_0x105df4(0x36d)];_0x5c3b0e=_0x5c3b0e||0xffffffff;let _0x1864bc=_0x3720fb,_0x5c843e=Math['round'](_0xea35dc+0x18/0x2+this[_0x105df4(0x885)]*0.35);_0x70587===_0x105df4(0x4c5)&&(_0x1864bc+=_0x5c3b0e/0x2),_0x70587===_0x105df4(0x413)&&('NLaTw'==='NLaTw'?_0x1864bc+=_0x5c3b0e:this[_0x105df4(0x93f)]=_0x105df4(0x40a)),_0x1aa00a[_0x105df4(0x155)](),_0x1aa00a[_0x105df4(0xc63)]=this[_0x105df4(0xb26)](),_0x1aa00a[_0x105df4(0x40f)]=_0x70587,_0x1aa00a[_0x105df4(0x3b4)]=_0x105df4(0xbc9),_0x1aa00a['globalAlpha']=0x1,this[_0x105df4(0x828)](_0x23451e,_0x1864bc,_0x5c843e,_0x5c3b0e),_0x1aa00a[_0x105df4(0x36d)]=_0xb1ca23,this[_0x105df4(0x450)](_0x23451e,_0x1864bc,_0x5c843e,_0x5c3b0e),_0x1aa00a[_0x105df4(0xc6c)](),this[_0x105df4(0x973)]['update']();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x2ea)]=function(_0x308f07){const _0x50b0c3=_0x4a80d9;return this[_0x50b0c3(0x54d)](_0x308f07)-this[_0x50b0c3(0xb22)]();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x880)]=function(_0x4ef60f){const _0x369b4e=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x369b4e(0x668)][_0x369b4e(0x7c4)]['ShowFacesListStyle'])return;const _0x2ff73d=this[_0x369b4e(0x442)](_0x4ef60f),_0x9de55e=this['itemRect'](_0x4ef60f);_0x9de55e[_0x369b4e(0x2ce)]=ImageManager[_0x369b4e(0x5a6)],_0x9de55e[_0x369b4e(0x8dc)]-=0x2,this['drawActorFace'](_0x2ff73d,_0x9de55e['x']+0x1,_0x9de55e['y']+0x1,_0x9de55e[_0x369b4e(0x2ce)],_0x9de55e[_0x369b4e(0x8dc)]);},Window_BattleStatus['prototype']['drawItemStatusListStyle']=function(_0x54e027){const _0x41d7b4=_0x4a80d9,_0x9c6696=VisuMZ['BattleCore']['Settings'][_0x41d7b4(0x7c4)],_0xfc6119=$dataSystem[_0x41d7b4(0x3a3)]?0x4:0x3,_0x54ec6a=_0xfc6119*0x80+(_0xfc6119-0x1)*0x8+0x4,_0x30e1c5=this['actor'](_0x54e027),_0x1f2972=this[_0x41d7b4(0xaa8)](_0x54e027);let _0x51cccd=_0x1f2972['x']+this[_0x41d7b4(0x8eb)];if(_0x9c6696[_0x41d7b4(0x593)])_0x41d7b4(0x104)!==_0x41d7b4(0x104)?(this['_battlePortrait']='',this[_0x41d7b4(0x442)]()&&this[_0x41d7b4(0x442)]()[_0x41d7b4(0x6c8)][_0x41d7b4(0x605)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x41d7b4(0x195)]=_0x2bfc82(_0x5d3126['$1']))):_0x51cccd=_0x1f2972['x']+ImageManager['faceWidth']+0x8;else{if('tAnnt'!==_0x41d7b4(0x76b))_0x51cccd+=ImageManager[_0x41d7b4(0xcbd)];else{if(this[_0x41d7b4(0x681)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x41d7b4(0xa38)]()[_0x41d7b4(0xb3d)];}else return!![];}}const _0x39dfce=Math[_0x41d7b4(0x961)](Math['min'](_0x1f2972['x']+_0x1f2972[_0x41d7b4(0x2ce)]-_0x54ec6a,_0x51cccd)),_0x4d17d3=Math['round'](_0x1f2972['y']+(_0x1f2972[_0x41d7b4(0x8dc)]-Sprite_Name['prototype'][_0x41d7b4(0x8fc)]())/0x2),_0x27989a=Math[_0x41d7b4(0x961)](_0x39dfce-ImageManager[_0x41d7b4(0xcbd)]/0x2-0x4),_0x583c07=Math[_0x41d7b4(0x961)](_0x1f2972['y']+(_0x1f2972[_0x41d7b4(0x8dc)]-ImageManager[_0x41d7b4(0x867)])/0x2+ImageManager[_0x41d7b4(0x867)]/0x2);let _0x16a7b7=_0x39dfce+0x88;const _0xcf127f=_0x4d17d3;this[_0x41d7b4(0x970)](_0x30e1c5,_0x39dfce-0x4+(_0x9c6696[_0x41d7b4(0x9b4)]||0x0),_0x4d17d3+(_0x9c6696[_0x41d7b4(0x586)]||0x0)),this[_0x41d7b4(0x4e1)](_0x30e1c5,_0x39dfce+(_0x9c6696[_0x41d7b4(0xb9e)]||0x0),_0x4d17d3+(_0x9c6696[_0x41d7b4(0x932)]||0x0)),this['placeStateIcon'](_0x30e1c5,_0x27989a+(_0x9c6696[_0x41d7b4(0xaa5)]||0x0),_0x583c07+(_0x9c6696[_0x41d7b4(0x393)]||0x0)),this[_0x41d7b4(0x1dd)](_0x30e1c5,'hp',_0x16a7b7+0x88*0x0+(_0x9c6696[_0x41d7b4(0x809)]||0x0),_0xcf127f+(_0x9c6696['HpGaugeOffsetY']||0x0)),this[_0x41d7b4(0x1dd)](_0x30e1c5,'mp',_0x16a7b7+0x88*0x1+(_0x9c6696[_0x41d7b4(0xc71)]||0x0),_0xcf127f+(_0x9c6696[_0x41d7b4(0x430)]||0x0)),$dataSystem[_0x41d7b4(0x3a3)]&&this[_0x41d7b4(0x1dd)](_0x30e1c5,'tp',_0x16a7b7+0x88*0x2+(_0x9c6696[_0x41d7b4(0x40b)]||0x0),_0xcf127f+(_0x9c6696[_0x41d7b4(0x68a)]||0x0));},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xb94)]=function(_0x3ab3d1){const _0x37aa8c=_0x4a80d9;if(!$gameSystem['isSideView']())return;VisuMZ[_0x37aa8c(0xbe1)][_0x37aa8c(0x364)][_0x37aa8c(0x432)](this,_0x3ab3d1);},Window_BattleStatus['prototype'][_0x4a80d9(0x414)]=function(_0x200009){const _0x49f7a7=_0x4a80d9,_0x4d5e83=VisuMZ[_0x49f7a7(0xbe1)][_0x49f7a7(0x668)][_0x49f7a7(0x7c4)],_0x3181a3=this['actor'](_0x200009),_0x364ebe=this[_0x49f7a7(0xaa8)](_0x200009),_0x5bc805=Math[_0x49f7a7(0x961)](_0x364ebe['x']+(_0x364ebe[_0x49f7a7(0x2ce)]-0x80)/0x2),_0x41d39a=this['nameY'](_0x364ebe);let _0x3ae564=_0x5bc805-ImageManager[_0x49f7a7(0xcbd)]/0x2-0x4,_0x24b433=_0x41d39a+ImageManager['iconHeight']/0x2;_0x3ae564-ImageManager[_0x49f7a7(0xcbd)]/0x2<_0x364ebe['x']&&(_0x49f7a7(0x4d9)===_0x49f7a7(0x4d9)?(_0x3ae564=_0x5bc805+ImageManager[_0x49f7a7(0xcbd)]/0x2-0x4,_0x24b433=_0x41d39a-ImageManager[_0x49f7a7(0x867)]/0x2):(_0x3ac088[_0x49f7a7(0xbe1)]['Sprite_Actor_setBattler'][_0x49f7a7(0x432)](this,_0x412db6),this[_0x49f7a7(0x3fc)](_0x388b7b)));const _0x5c7789=_0x5bc805,_0x12f2cf=this[_0x49f7a7(0x54d)](_0x364ebe);this[_0x49f7a7(0x970)](_0x3181a3,_0x5bc805+(_0x4d5e83[_0x49f7a7(0x9b4)]||0x0),_0x41d39a+(_0x4d5e83[_0x49f7a7(0x586)]||0x0)),this[_0x49f7a7(0x4e1)](_0x3181a3,_0x5bc805+(_0x4d5e83[_0x49f7a7(0xb9e)]||0x0),_0x41d39a+(_0x4d5e83['NameOffsetY']||0x0)),this[_0x49f7a7(0x1aa)](_0x3181a3,_0x3ae564+(_0x4d5e83[_0x49f7a7(0xaa5)]||0x0),_0x24b433+(_0x4d5e83[_0x49f7a7(0x393)]||0x0)),this[_0x49f7a7(0x1dd)](_0x3181a3,'hp',_0x5c7789+(_0x4d5e83['HpGaugeOffsetX']||0x0),_0x12f2cf+(_0x4d5e83[_0x49f7a7(0x169)]||0x0)),this['placeGauge'](_0x3181a3,'mp',_0x5c7789+(_0x4d5e83['MpGaugeOffsetX']||0x0),_0x12f2cf+this['gaugeLineHeight']()+(_0x4d5e83[_0x49f7a7(0x430)]||0x0)),$dataSystem[_0x49f7a7(0x3a3)]&&this[_0x49f7a7(0x1dd)](_0x3181a3,'tp',_0x5c7789+(_0x4d5e83[_0x49f7a7(0x40b)]||0x0),_0x12f2cf+this[_0x49f7a7(0xb22)]()*0x2+(_0x4d5e83[_0x49f7a7(0x68a)]||0x0));},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xc90)]=function(_0x46b821){const _0x22b97f=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x22b97f(0x668)][_0x22b97f(0x7c4)][_0x22b97f(0x985)])return![];if(_0x46b821[_0x22b97f(0xa33)]())return!![];return Imported[_0x22b97f(0x97d)]&&_0x46b821['getMenuImage']();},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0x1be)]=function(){const _0x619680=_0x4a80d9;if(this['actor']()[_0x619680(0x6c8)][_0x619680(0x605)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x619680(0x442)]()[_0x619680(0x6c8)][_0x619680(0x605)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4a80d9(0xba6)][_0x4a80d9(0xc94)]=function(){const _0x352141=_0x4a80d9;if(this[_0x352141(0x442)]()['note'][_0x352141(0x605)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x352141(0x591)===_0x352141(0x591))return Number(RegExp['$1']);else return;}else{if(this['actor']()[_0x352141(0x6c8)][_0x352141(0x605)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xcd2)]=function(_0x591675){const _0x2db43e=_0x4a80d9,_0x28b09=this[_0x2db43e(0x442)](_0x591675);if(this[_0x2db43e(0xc90)](_0x28b09)){const _0x1582e8=_0x2db43e(0x4c3)[_0x2db43e(0x7d6)](_0x28b09[_0x2db43e(0xb8e)]()),_0x1d9a56=this[_0x2db43e(0x4d6)](_0x1582e8,Sprite),_0x3ded0d=_0x28b09[_0x2db43e(0x794)]();_0x3ded0d!==''?_0x1d9a56[_0x2db43e(0xc0b)]=ImageManager[_0x2db43e(0x707)](_0x3ded0d):_0x1d9a56['bitmap']=ImageManager['_emptyBitmap'];const _0x29f871=this['itemRect'](_0x591675);_0x1d9a56['anchor']['x']=0.5,_0x1d9a56[_0x2db43e(0x2dd)]['y']=0x1;let _0x2f1bb7=Math[_0x2db43e(0x961)](_0x29f871['x']+_0x29f871[_0x2db43e(0x2ce)]/0x2)+this['padding'];_0x2f1bb7+=_0x28b09[_0x2db43e(0x1be)]();let _0x3f89b4=Math[_0x2db43e(0x961)](this[_0x2db43e(0x8dc)]);_0x3f89b4+=_0x28b09['getBattlePortraitOffsetY'](),_0x1d9a56[_0x2db43e(0x788)](_0x2f1bb7,_0x3f89b4);const _0x1de25d=VisuMZ[_0x2db43e(0xbe1)]['Settings'][_0x2db43e(0x7c4)]['PortraitScale'];_0x1d9a56[_0x2db43e(0xf4)]['x']=_0x1de25d,_0x1d9a56[_0x2db43e(0xf4)]['y']=_0x1de25d,_0x1d9a56[_0x2db43e(0x3a5)]();}else{if(_0x2db43e(0x499)===_0x2db43e(0x499)){const _0xba41ce=this[_0x2db43e(0x8b4)](_0x591675);this[_0x2db43e(0x737)](_0x28b09,_0xba41ce['x'],_0xba41ce['y'],_0xba41ce['width'],_0xba41ce[_0x2db43e(0x8dc)]);}else{if(!_0x268f56[_0x2db43e(0xbe1)][_0x2db43e(0xbe3)])return![];const _0x3d2993=_0x3f6c5e[_0x2db43e(0x564)]()[_0x2db43e(0x435)](_0x582a9d=>_0x582a9d[_0x2db43e(0x972)]()&&_0x582a9d['canInput']());return _0x3d2993[_0x2db43e(0x6fc)]>0x0&&_0xb78442[_0x2db43e(0x442)]()!==_0x3d2993[_0x3d2993[_0x2db43e(0x6fc)]-0x1];}}},Window_BattleStatus['prototype'][_0x4a80d9(0x4d6)]=function(_0x369ced,_0x3d75ce){const _0x1ee754=_0x4a80d9,_0x1b0241=this[_0x1ee754(0x6aa)];if(_0x1b0241[_0x369ced]){if(_0x1ee754(0x5c5)===_0x1ee754(0x9ff))this[_0x1ee754(0x852)][_0x1ee754(0xd02)](this[_0x1ee754(0x2ae)]);else return _0x1b0241[_0x369ced];}else{if(_0x1ee754(0x3e3)===_0x1ee754(0xa11))_0x22b620['push'](_0x1ee754(0x46f),_0xd69964,_0x49ed58);else{const _0x543832=new _0x3d75ce();return _0x1b0241[_0x369ced]=_0x543832,this[_0x1ee754(0x5c1)](_0x543832),this[_0x1ee754(0x5c1)](this[_0x1ee754(0x6d9)]),_0x543832;}}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x366)]=function(){const _0x5877da=_0x4a80d9;this[_0x5877da(0xff)](),this[_0x5877da(0xba9)](),Window_StatusBase[_0x5877da(0xba6)]['_createClientArea'][_0x5877da(0x432)](this),this['_createDamageContainer']();},Window_BattleStatus['prototype'][_0x4a80d9(0xff)]=function(){const _0x5a37b8=_0x4a80d9;this[_0x5a37b8(0x6d9)]=new Sprite(),this[_0x5a37b8(0x6d9)][_0x5a37b8(0x5da)]=[new PIXI[(_0x5a37b8(0x5da))][(_0x5a37b8(0xa21))]()],this[_0x5a37b8(0x6d9)][_0x5a37b8(0x3ab)]=new Rectangle(),this[_0x5a37b8(0x6d9)]['move'](this[_0x5a37b8(0x336)],this[_0x5a37b8(0x336)]),this['addChild'](this[_0x5a37b8(0x6d9)]);},Window_BattleStatus[_0x4a80d9(0xba6)]['_createEffectsContainer']=function(){const _0x2928b8=_0x4a80d9;this['_effectsContainer']=new Sprite(),this['addChild'](this[_0x2928b8(0x9df)]);},Window_BattleStatus['prototype'][_0x4a80d9(0x56b)]=function(){const _0x106fb4=_0x4a80d9;this[_0x106fb4(0x9df)]&&this['addChild'](this[_0x106fb4(0x9df)]);},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xb63)]=function(){const _0x27a64b=_0x4a80d9;this['_damageContainer']=new Sprite(),this['addChild'](this[_0x27a64b(0x444)]);},Window_BattleStatus[_0x4a80d9(0xba6)]['_createCursorSprite']=function(){const _0x4e153e=_0x4a80d9;this[_0x4e153e(0x77c)]=new Sprite();for(let _0x11a796=0x0;_0x11a796<0x9;_0x11a796++){_0x4e153e(0x921)==='PkXxH'?_0x161c75[_0x4e153e(0x8f7)]([_0x2be91c]):this['_cursorSprite'][_0x4e153e(0xd02)](new Sprite());}this[_0x4e153e(0x6d9)][_0x4e153e(0xd02)](this[_0x4e153e(0x77c)]);},Window_BattleStatus['prototype'][_0x4a80d9(0x30f)]=function(){const _0x1a0bcb=_0x4a80d9;Window_StatusBase[_0x1a0bcb(0xba6)]['_updateClientArea'][_0x1a0bcb(0x432)](this),this[_0x1a0bcb(0x7dc)]();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x7dc)]=function(){const _0x48a633=_0x4a80d9,_0x527769=this['_padding'];this[_0x48a633(0x6d9)]['move'](_0x527769,_0x527769),this['_cursorArea']['x']=_0x527769-this[_0x48a633(0x987)]['x'],this[_0x48a633(0x6d9)]['y']=_0x527769-this[_0x48a633(0x987)]['y'];if(this[_0x48a633(0x8cf)]>0x0&&this[_0x48a633(0x64d)]>0x0)this[_0x48a633(0x6d9)][_0x48a633(0x83f)]=this['isOpen']();else{if(_0x48a633(0x66d)===_0x48a633(0x473)){if(_0x1584b6['value'](_0x10aaad))return![];}else this[_0x48a633(0x6d9)]['visible']=![];}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x5e1)]=function(){const _0x26bd5f=_0x4a80d9;Window_StatusBase[_0x26bd5f(0xba6)][_0x26bd5f(0x5e1)][_0x26bd5f(0x432)](this),this[_0x26bd5f(0x5ef)]();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x5ef)]=function(){const _0x1b5375=_0x4a80d9,_0x245dbf=this['_cursorArea'][_0x1b5375(0x6d1)][_0x1b5375(0x71a)](new Point(0x0,0x0)),_0x2c216b=this[_0x1b5375(0x6d9)][_0x1b5375(0x3ab)];_0x2c216b['x']=_0x245dbf['x']+this[_0x1b5375(0x987)]['x'],_0x2c216b['y']=_0x245dbf['y']+this['origin']['y'],_0x2c216b[_0x1b5375(0x2ce)]=this[_0x1b5375(0x8cf)],_0x2c216b['height']=this[_0x1b5375(0x64d)];},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x709)]=function(_0xb8c2fb){const _0xfbec5e=_0x4a80d9;if(this[_0xfbec5e(0x4bb)]()!==_0xfbec5e(0x120))return;this[_0xfbec5e(0xcd2)](_0xb8c2fb[_0xfbec5e(0x4a4)]());},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x25d)]=function(_0x4cd4db,_0x22550f){const _0x12d0af=_0x4a80d9;if(!this['_damageContainer'])return;if(!_0x4cd4db)return;if(!_0x22550f)return;const _0x38df79=this[_0x12d0af(0xaa8)](_0x22550f[_0x12d0af(0x4a4)]());_0x38df79['x']+=_0x38df79[_0x12d0af(0x2ce)]/0x2+this['padding'],_0x4cd4db['x']=_0x38df79['x'],_0x4cd4db['y']=_0x38df79['y'],this[_0x12d0af(0x444)]['addChild'](_0x4cd4db);},Window_BattleStatus['prototype'][_0x4a80d9(0x541)]=function(_0x213b0a){const _0x5b02aa=_0x4a80d9;if(!this[_0x5b02aa(0x444)])return;if(!_0x213b0a)return;this[_0x5b02aa(0x444)][_0x5b02aa(0xbaf)](_0x213b0a);},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x341)]=function(){const _0x4db526=_0x4a80d9;if(!this[_0x4db526(0x187)]())return;if(!this[_0x4db526(0x690)])this[_0x4db526(0x402)]();this[_0x4db526(0x8b5)](),this[_0x4db526(0x955)]();},Window_BattleStatus['prototype'][_0x4a80d9(0x187)]=function(){const _0x130965=_0x4a80d9;if(this[_0x130965(0xc12)]!==Window_BattleStatus)return![];if(!SceneManager[_0x130965(0x1f8)]())return![];return VisuMZ[_0x130965(0xbe1)][_0x130965(0x668)][_0x130965(0x7c4)][_0x130965(0x30c)];},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x402)]=function(){const _0x124eed=_0x4a80d9;this['_borderPortraitSprite']=new Sprite();const _0x20741b=SceneManager[_0x124eed(0xb97)],_0x1694a2=_0x20741b[_0x124eed(0xad7)][_0x124eed(0x699)](_0x20741b[_0x124eed(0xc02)]);_0x20741b[_0x124eed(0xbd1)](this[_0x124eed(0x690)],_0x1694a2),this[_0x124eed(0x690)][_0x124eed(0x2dd)]['x']=0.5,this[_0x124eed(0x690)][_0x124eed(0x2dd)]['y']=0x1;const _0x10d7ed=VisuMZ['BattleCore'][_0x124eed(0x668)]['BattleLayout'][_0x124eed(0x49a)];this[_0x124eed(0x690)][_0x124eed(0xf4)]['x']=_0x10d7ed,this[_0x124eed(0x690)][_0x124eed(0xf4)]['y']=_0x10d7ed,this[_0x124eed(0x690)]['y']=this['y']+this[_0x124eed(0x8dc)],this[_0x124eed(0xb3b)]=0x0;},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xb9b)]=function(){const _0x2aeeb1=_0x4a80d9;return BattleManager[_0x2aeeb1(0xc57)]();},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x8b5)]=function(){const _0x47ff0d=_0x4a80d9;this[_0x47ff0d(0x690)][_0x47ff0d(0x83f)]=this[_0x47ff0d(0xb9b)]();const _0x390288=BattleManager[_0x47ff0d(0x442)](),_0x334e07=_0x390288?_0x390288[_0x47ff0d(0x794)]()||'':'';if(_0x390288===this[_0x47ff0d(0x690)][_0x47ff0d(0x442)]&&_0x334e07===this[_0x47ff0d(0x690)][_0x47ff0d(0xc1c)])return;this[_0x47ff0d(0x690)]['actor']=_0x390288||this[_0x47ff0d(0x690)][_0x47ff0d(0x442)],this[_0x47ff0d(0x690)][_0x47ff0d(0xc1c)]=_0x334e07;if(!_0x390288)return;else{if(_0x334e07===''){this['_borderPortraitSprite'][_0x47ff0d(0xc0b)]=ImageManager['_emptyBitmap'],this['_borderPortraitSprite'][_0x47ff0d(0xc1c)]='';return;}else{const _0x3d53b7=ImageManager[_0x47ff0d(0x707)](_0x334e07);this[_0x47ff0d(0x690)][_0x47ff0d(0x2ff)]=0x0,_0x3d53b7[_0x47ff0d(0x19f)](this['processBorderActor'][_0x47ff0d(0x88a)](this,_0x3d53b7));}}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x98b)]=function(_0x5a70a9){const _0x1ebf20=_0x4a80d9;this[_0x1ebf20(0xb3b)]=0x14,this[_0x1ebf20(0x690)][_0x1ebf20(0xc0b)]=_0x5a70a9;SceneManager[_0x1ebf20(0xb97)][_0x1ebf20(0x23a)]()?(this[_0x1ebf20(0x690)]['x']=0x0,this[_0x1ebf20(0x83b)]=Math[_0x1ebf20(0xbf1)](_0x5a70a9[_0x1ebf20(0x2ce)]/0x2)):_0x1ebf20(0x100)===_0x1ebf20(0x100)?(this[_0x1ebf20(0x690)]['x']=this[_0x1ebf20(0x2ce)],this[_0x1ebf20(0x83b)]=this[_0x1ebf20(0x2ce)]*0x3/0x4):_0x3f776a=_0x2740cc;this[_0x1ebf20(0x690)]['opacity']=0x0,this[_0x1ebf20(0x690)]['y']=this['y']+this[_0x1ebf20(0x8dc)];const _0x54fdda=BattleManager[_0x1ebf20(0x442)]();_0x54fdda&&(this['_borderPortraitTargetX']+=_0x54fdda[_0x1ebf20(0x1be)](),this['_borderPortraitSprite']['y']+=_0x54fdda[_0x1ebf20(0xc94)]());},Window_BattleStatus['prototype'][_0x4a80d9(0x955)]=function(){const _0x462941=_0x4a80d9;if(this[_0x462941(0xb3b)]>0x0){const _0x2bc0b1=this[_0x462941(0xb3b)],_0x8cbce9=this[_0x462941(0x690)];_0x8cbce9['x']=(_0x8cbce9['x']*(_0x2bc0b1-0x1)+this[_0x462941(0x83b)])/_0x2bc0b1,_0x8cbce9[_0x462941(0x2ff)]=(_0x8cbce9[_0x462941(0x2ff)]*(_0x2bc0b1-0x1)+0xff)/_0x2bc0b1,this[_0x462941(0xb3b)]--;}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0x7da)]=function(){const _0x1afaca=_0x4a80d9;return;this[_0x1afaca(0x9df)]&&(_0x1afaca(0x67f)!==_0x1afaca(0x67f)?this[_0x1afaca(0xcd3)]=_0x1d0af4[_0x1afaca(0x7c7)](_0x271460['StatusWindowSkinFilename']):(this[_0x1afaca(0x9df)]['x']=this['x'],this[_0x1afaca(0x9df)]['y']=this['y']));if(this[_0x1afaca(0x444)]){if(_0x1afaca(0x3db)!==_0x1afaca(0x3db)){if(!_0x1e6b4d[_0x1afaca(0xb97)])return;if(!_0x179615[_0x1afaca(0xb97)][_0x1afaca(0x967)])return;if(!_0x837d65[_0x1afaca(0xb80)])return;_0x3f9130['ConvertParams'](_0x534dde,_0x581bcb);const _0x4b3cfe=_0x557bef[_0x1afaca(0xc05)](),_0x1d4853=_0x3100ff[_0x1afaca(0x961)](_0x117375[_0x1afaca(0x77a)]),_0x289c2c=_0x48f375[_0x1afaca(0x961)](_0x32e6d4[_0x1afaca(0xcc6)]);_0x260a90['requestPointAnimation'](_0x1d4853,_0x289c2c,_0x614e34['AnimationID'],_0x3b7685[_0x1afaca(0x33d)],_0x46b521[_0x1afaca(0x254)]),_0x49d1dd['WaitComplete']&&_0x4b3cfe&&(_0x450c0c['_scene']['_spriteset'][_0x1afaca(0x1e9)](),_0x4b3cfe[_0x1afaca(0xbaa)](_0x1afaca(0x134)));}else this['_damageContainer']['x']=this['x'],this[_0x1afaca(0x444)]['y']=this['y'];}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xbc2)]=function(){const _0x5d51ad=_0x4a80d9,_0x1059ac=VisuMZ[_0x5d51ad(0xbe1)][_0x5d51ad(0x668)][_0x5d51ad(0x7c4)];if(_0x1059ac[_0x5d51ad(0xcd8)]){const _0x28dd48=new Sprite();_0x28dd48['bitmap']=ImageManager[_0x5d51ad(0x7c7)](_0x1059ac[_0x5d51ad(0xcd8)]),_0x28dd48['x']=_0x1059ac[_0x5d51ad(0xb01)]||0x0,_0x28dd48['y']=_0x1059ac['StatusWindowAttachmentBackOffsetY']||0x0,this['addChildToBack'](_0x28dd48),this[_0x5d51ad(0xc92)]=_0x28dd48;}if(_0x1059ac[_0x5d51ad(0x536)]){const _0x5dd602=new Sprite();_0x5dd602[_0x5d51ad(0xc0b)]=ImageManager[_0x5d51ad(0x7c7)](_0x1059ac[_0x5d51ad(0x536)]),_0x5dd602['x']=_0x1059ac['StatusWindowAttachmentFrontOffsetX']||0x0,_0x5dd602['y']=_0x1059ac[_0x5d51ad(0x411)]||0x0,this[_0x5d51ad(0xd02)](_0x5dd602),this['_frontAttachmentSprite']=_0x5dd602;}},Window_BattleStatus[_0x4a80d9(0xba6)][_0x4a80d9(0xa34)]=function(){const _0x9a2bc8=_0x4a80d9;this[_0x9a2bc8(0x412)]&&this['addChild'](this['_frontAttachmentSprite']),this[_0x9a2bc8(0xc92)]&&(_0x9a2bc8(0xce9)==='Sgrot'?this['addChildToBack'](this[_0x9a2bc8(0xc92)]):this[_0x9a2bc8(0x621)][_0x9a2bc8(0x622)](this[_0x9a2bc8(0x437)]));},Window_BattleActor['prototype']['isCurrentItemEnabled']=function(){const _0x787331=_0x4a80d9;return this[_0x787331(0xc3b)]();},Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0xc3b)]=function(){const _0x3aeb21=_0x4a80d9,_0x537b29=BattleManager['inputtingAction']();if(!_0x537b29)return!![];if(!_0x537b29[_0x3aeb21(0x6af)]())return!![];const _0x3786ef=this[_0x3aeb21(0x442)](this['index']()),_0x47d383=_0x537b29[_0x3aeb21(0x6af)]()[_0x3aeb21(0x6c8)];if(_0x537b29[_0x3aeb21(0xa8c)]()){if(_0x3786ef===BattleManager['actor']())return![];}if(_0x537b29['isForDeadFriend']()){if(_0x3aeb21(0x86c)===_0x3aeb21(0x5f2)){this[_0x3aeb21(0x641)](_0x582b55)['match'](/\\I\[(\d+)\]/i);const _0x12ce92=_0x127473(_0x3964dd['$1'])||0x0,_0xf35094=this[_0x3aeb21(0xcf8)](_0x4289f5),_0xa45e2d=_0xf35094['x']+_0x2da1f3[_0x3aeb21(0x506)]((_0xf35094['width']-_0x5cd162['iconWidth'])/0x2),_0x15546b=_0xf35094['y']+(_0xf35094[_0x3aeb21(0x8dc)]-_0x2a25b6[_0x3aeb21(0x867)])/0x2;this[_0x3aeb21(0xae1)](_0x12ce92,_0xa45e2d,_0x15546b);}else{if(!_0x3786ef[_0x3aeb21(0x50b)]())return![];}}if(_0x537b29['isForAliveFriend']()){if(_0x3aeb21(0x65d)===_0x3aeb21(0x9c3)){_0x4012d4[_0x3aeb21(0xba6)][_0x3aeb21(0xbe7)][_0x3aeb21(0x432)](this);const _0x51cf56=this[_0x3aeb21(0x4bb)]();_0x51cf56===_0x3aeb21(0x33a)&&this[_0x3aeb21(0x6ce)]();}else{if(!_0x3786ef[_0x3aeb21(0x431)]())return![];}}return!![];},Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0x2a0)]=function(_0x154150){const _0x5ec59d=_0x4a80d9;this[_0x5ec59d(0x644)]=_0x154150;},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x790)]=Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0x53d)],Window_BattleActor[_0x4a80d9(0xba6)]['processTouch']=function(){const _0x373a7c=_0x4a80d9;Window_BattleStatus[_0x373a7c(0xba6)][_0x373a7c(0x53d)]['call'](this),this[_0x373a7c(0x644)]?this[_0x373a7c(0xa0b)]():'eEpFo'===_0x373a7c(0xc5e)?_0x413711[_0x373a7c(0xbaa)](_0x373a7c(0x74c)):VisuMZ['BattleCore']['Window_BattleActor_processTouch']['call'](this);},Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0xa0b)]=function(){const _0xd0904e=_0x4a80d9,_0x87a410=SceneManager[_0xd0904e(0xb97)][_0xd0904e(0x9bc)];if(!_0x87a410)return;this['_doubleTouch']=![];const _0x125c04=this[_0xd0904e(0x87e)]();if(_0x125c04>=0x0){this[_0xd0904e(0x8b9)](_0x125c04);if(TouchInput['isClicked']()){const _0x20ed1b=$gameParty[_0xd0904e(0x767)]()[_0x125c04],_0xe82ff3=_0x87a410[_0xd0904e(0x441)]['indexOf'](_0x20ed1b);_0xe82ff3>=0x0&&(_0xd0904e(0xa02)==='iLtfn'?(this[_0xd0904e(0x9e0)]=this[_0xd0904e(0x37c)],this[_0xd0904e(0x9e0)][_0xd0904e(0x6ac)]=_0xd0904e(0xb4d),this['_inputting']=!![],this[_0xd0904e(0x37c)]=null):(_0x87a410[_0xd0904e(0x8b9)](_0xe82ff3),_0x87a410[_0xd0904e(0x9fd)]()));}}},Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0x857)]=function(){const _0x4f884e=_0x4a80d9;if(this['_enemyWindowMode']){if(_0x4f884e(0xcff)!==_0x4f884e(0xcff)){const _0x1d3776=_0x401ed7[_0x4f884e(0xb97)]['_statusWindow'];_0x1d3776&&_0x1d3776['refreshActorPortrait'](this);}else this[_0x4f884e(0x25e)]++,this[_0x4f884e(0x7c0)]=!![];}const _0x5b9b45=Window_BattleStatus[_0x4f884e(0xba6)][_0x4f884e(0x857)][_0x4f884e(0x432)](this);if(this[_0x4f884e(0x644)]){if('jGcAx'!=='vojbN')this[_0x4f884e(0x7c0)]=![];else{if(!_0x20b4c5[_0x4f884e(0x1f8)]())return;if(!_0x152c5d['VisuMZ_3_ActSeqCamera'])return;_0x529ef8['ConvertParams'](_0x27c55f,_0x34e76e);const _0x44ce00=_0x5cf56f[_0x4f884e(0x2f7)]();_0x44ce00[_0x4f884e(0x403)]=_0x4f9d6a[_0x4f884e(0x728)];}}return _0x5b9b45;},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleActor_show']=Window_BattleActor[_0x4a80d9(0xba6)]['show'],Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0x3a5)]=function(){const _0xe85d2c=_0x4a80d9;VisuMZ[_0xe85d2c(0xbe1)][_0xe85d2c(0x770)][_0xe85d2c(0x432)](this);const _0x73a426=BattleManager['inputtingAction']();if(_0x73a426){if('nPYqu'==='nPYqu'){const _0x535d6f=$gameParty[_0xe85d2c(0x564)]();if(_0x73a426[_0xe85d2c(0x323)]()&&_0x535d6f['length']>0x1){if(_0xe85d2c(0x1a3)===_0xe85d2c(0x1a3))this[_0xe85d2c(0xc53)]('pagedown',this[_0xe85d2c(0x1b7)][_0xe85d2c(0x88a)](this));else return!![];}}else this['_tpbNeedsPartyCommand']=![];}},VisuMZ['BattleCore'][_0x4a80d9(0xb92)]=Window_BattleActor['prototype'][_0x4a80d9(0x670)],Window_BattleActor['prototype']['hide']=function(){const _0x103521=_0x4a80d9;VisuMZ[_0x103521(0xbe1)]['Window_BattleActor_hide']['call'](this),delete this[_0x103521(0x44d)]['pageup'],delete this[_0x103521(0x44d)][_0x103521(0x23c)];},Window_BattleActor[_0x4a80d9(0xba6)][_0x4a80d9(0x1b7)]=function(){const _0x59948e=_0x4a80d9,_0x3d189e=BattleManager[_0x59948e(0x642)]();if(_0x3d189e)_0x3d189e[_0x59948e(0xa64)](_0x59948e(0xa98));this[_0x59948e(0x9fd)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xaeb)]=Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)],Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(_0x2215ff){const _0x483b98=_0x4a80d9;this['_lastEnemy']=null,VisuMZ[_0x483b98(0xbe1)][_0x483b98(0xaeb)][_0x483b98(0x432)](this,_0x2215ff);if(Imported[_0x483b98(0x7fd)]){if('IxUML'!==_0x483b98(0x602)){const _0x7c3cb8=_0x537c5b[_0x483b98(0x762)]('['+_0x1c6ea0['$1'][_0x483b98(0x605)](/\d+/g)+']');for(const _0x2c82fc of _0x7c3cb8){if(_0x4442d6[_0x483b98(0x638)](_0x2c82fc))return!![];}return![];}else{if(VisuMZ[_0x483b98(0x560)]['version']<1.12){let _0x39bfbe='';_0x39bfbe+=_0x483b98(0x57d),_0x39bfbe+=_0x483b98(0x6fe),_0x39bfbe+=_0x483b98(0x8bc),alert(_0x39bfbe),SceneManager[_0x483b98(0x628)]();}}}},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x1c3)]=function(){const _0x168ff7=_0x4a80d9;return this[_0x168ff7(0x407)]();},VisuMZ['BattleCore'][_0x4a80d9(0x9f5)]=Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x3a5)],Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x3a5)]=function(){const _0x33990c=_0x4a80d9;VisuMZ[_0x33990c(0xbe1)]['Window_BattleEnemy_show'][_0x33990c(0x432)](this),this['y']=Graphics[_0x33990c(0x8dc)]*0xa,this[_0x33990c(0x1ae)]()&&this[_0x33990c(0xa4d)]();},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x670)],Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x670)]=function(){const _0x5e21c2=_0x4a80d9;VisuMZ[_0x5e21c2(0xbe1)][_0x5e21c2(0x776)][_0x5e21c2(0x432)](this),$gameParty[_0x5e21c2(0x8b9)](null),delete this[_0x5e21c2(0x44d)][_0x5e21c2(0xbdf)],delete this[_0x5e21c2(0x44d)][_0x5e21c2(0x23c)];},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x79d)]=function(){const _0x3c22dc=_0x4a80d9;let _0x13fdfa=$gameTroop[_0x3c22dc(0x564)]();const _0x46f56d=BattleManager[_0x3c22dc(0x642)]();if(_0x46f56d){_0x46f56d[_0x3c22dc(0x323)]()&&_0x13fdfa['length']>0x1&&this[_0x3c22dc(0xc53)](_0x3c22dc(0xbdf),this['selectAllEnemies']['bind'](this));if(_0x46f56d[_0x3c22dc(0x16f)]()){const _0x5e5b30=$gameParty[_0x3c22dc(0x564)]();_0x13fdfa=_0x13fdfa[_0x3c22dc(0x179)](_0x5e5b30);if(_0x46f56d[_0x3c22dc(0x323)]()&&_0x5e5b30[_0x3c22dc(0x6fc)]>0x1){if(_0x3c22dc(0xa22)!==_0x3c22dc(0x678))this[_0x3c22dc(0xc53)](_0x3c22dc(0x23c),this[_0x3c22dc(0x1b7)]['bind'](this));else{if(_0x58af3a[_0x3c22dc(0x49f)]())this[_0x3c22dc(0x9b5)](),this[_0x3c22dc(0x517)]=![],_0x1c247a['clearBattleRefreshRequest']();else this[_0x3c22dc(0x517)]&&(this[_0x3c22dc(0x517)]=![],this[_0x3c22dc(0x1d6)](),this[_0x3c22dc(0xa34)]());}}}}return _0x13fdfa;},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x1d6)]=function(){const _0x353121=_0x4a80d9;this[_0x353121(0x441)]=this[_0x353121(0x79d)](),this['sortEnemies'](),Window_Selectable[_0x353121(0xba6)][_0x353121(0x1d6)][_0x353121(0x432)](this);},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x4a8)]=function(){const _0x5bb2b3=_0x4a80d9;this[_0x5bb2b3(0x441)][_0x5bb2b3(0x915)]((_0x2d64e3,_0x2a245d)=>{const _0x4a7fd8=_0x5bb2b3;if(_0x2d64e3[_0x4a7fd8(0x172)]()!==_0x2a245d[_0x4a7fd8(0x172)]()){if(_0x4a7fd8(0xc88)!==_0x4a7fd8(0x78d)){if(_0x2d64e3[_0x4a7fd8(0x494)]())return-0x1;if(_0x2a245d[_0x4a7fd8(0x494)]())return 0x1;}else{const _0x617eb3=_0x1850e8['prototype'][_0x4a7fd8(0x335)]()*0x2+0x4;let _0x45c47b=_0x28d93c['boxWidth']-_0x617eb3;_0x137e96[_0x4a7fd8(0xb80)]&&_0x4c4a7d['isSideButtonLayout']()&&(_0x45c47b+=_0x617eb3);const _0x4273f2=this[_0x4a7fd8(0x36f)](),_0x2f42c1=_0x301b80[_0x4a7fd8(0x91f)]-_0x4273f2-this['statusWindowRect']()[_0x4a7fd8(0x8dc)]+_0x5dfe81[_0x4a7fd8(0xba6)]['extraHeight'](),_0x3acf00=0x0;return new _0x3d5cfb(_0x3acf00,_0x4273f2,_0x45c47b,_0x2f42c1);}}if(_0x2d64e3[_0x4a7fd8(0x172)]()&&_0x2a245d[_0x4a7fd8(0x172)]())return _0x2d64e3['index']()-_0x2a245d['index']();if(_0x2d64e3[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x9ec)]===_0x2a245d[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x9ec)])return _0x4a7fd8(0xbf5)!=='fiNqM'?_0x2d64e3[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x1d5)]-_0x2a245d[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x1d5)]:!![];else{if(_0x4a7fd8(0x585)==='dCyvi')return _0x2d64e3[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x9ec)]-_0x2a245d[_0x4a7fd8(0x997)]()[_0x4a7fd8(0x9ec)];else{if(!_0x405905[_0x4a7fd8(0x1f8)]())return![];if(!_0x137a3d)return![];if(!_0x24f154[_0x4a7fd8(0x6af)]())return![];if(_0x3ea63e[_0x4a7fd8(0x6af)]()[_0x4a7fd8(0x6c8)][_0x4a7fd8(0x605)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x1c15c3[_0x4a7fd8(0x9e1)](_0x220544[_0x4a7fd8(0x6af)]()))return!![];return![];}}}),SceneManager[_0x5bb2b3(0x6c1)]()&&this[_0x5bb2b3(0x441)][_0x5bb2b3(0x519)]();},Window_BattleEnemy[_0x4a80d9(0xba6)]['autoSelect']=function(){const _0x5d5100=_0x4a80d9,_0x3a0b0d=VisuMZ[_0x5d5100(0xbe1)][_0x5d5100(0x668)]['Enemy'];_0x3a0b0d[_0x5d5100(0xaef)]?this[_0x5d5100(0x184)]():_0x5d5100(0xa9e)!==_0x5d5100(0x5c8)?this['autoSelectPriority']():this[_0x5d5100(0x997)]()['refreshMotion']();},Window_BattleEnemy['prototype'][_0x4a80d9(0x184)]=function(){const _0x49d3c2=_0x4a80d9,_0x10fc33=BattleManager['inputtingAction']();if(_0x10fc33&&_0x10fc33['isForAnyone']()){if(_0x49d3c2(0x738)===_0x49d3c2(0x78f))return this[_0x49d3c2(0x547)]&&this['_actor']['canUseItemCommand']();else{if(_0x10fc33['isForAnyoneFocusFriends']()){if(_0x49d3c2(0xb41)===_0x49d3c2(0xb41)){if(this[_0x49d3c2(0x466)]&&this[_0x49d3c2(0x441)][_0x49d3c2(0xcf9)](this[_0x49d3c2(0x466)])){const _0x12a50a=this[_0x49d3c2(0x441)][_0x49d3c2(0x699)](this[_0x49d3c2(0x466)]);return this[_0x49d3c2(0x232)](_0x12a50a);}else return this['autoSelectPriority']();}else this[_0x49d3c2(0x63c)]('EscapeSuccessJS'),_0x1dccdd['_spriteset'][_0x49d3c2(0x8ef)](),_0x5692ab[_0x49d3c2(0xbe1)][_0x49d3c2(0xa01)][_0x49d3c2(0x432)](this),this[_0x49d3c2(0x960)](_0x49d3c2(0x284));}}}if(this[_0x49d3c2(0x89f)]&&this['_enemies'][_0x49d3c2(0xcf9)](this[_0x49d3c2(0x89f)])){const _0x3821f7=this['_enemies'][_0x49d3c2(0x699)](this[_0x49d3c2(0x89f)]);this[_0x49d3c2(0x232)](_0x3821f7);}else this[_0x49d3c2(0x1b2)]();},Window_BattleEnemy['prototype'][_0x4a80d9(0x1b2)]=function(){const _0x347f8c=_0x4a80d9,_0x3570f1=BattleManager[_0x347f8c(0x642)]();if(_0x3570f1&&_0x3570f1[_0x347f8c(0x16f)]()){const _0x5e93f2=$gameParty['aliveMembers']()[0x0];let _0x2d4a0b=this[_0x347f8c(0x441)][_0x347f8c(0x699)](_0x5e93f2);const _0x50ca33=_0x3570f1[_0x347f8c(0x6af)]()['scope'];if(_0x50ca33[_0x347f8c(0x605)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x347f8c(0x232)](_0x2d4a0b);return;}else{if(_0x50ca33['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x347f8c(0x232)](_0x2d4a0b-0x1);return;}}}const _0x3fecf2=VisuMZ['BattleCore'][_0x347f8c(0x668)][_0x347f8c(0x916)];let _0x11f238=![];$gameSystem['isSideView']()?_0x347f8c(0x70b)!==_0x347f8c(0x829)?_0x11f238=_0x3fecf2['SideviewSelect']:(this[_0x347f8c(0xbf9)][_0x347f8c(0xc2a)](),this['_itemWindow'][_0x347f8c(0xc2a)]()):_0x11f238=_0x3fecf2[_0x347f8c(0x6fa)],this[_0x347f8c(0x232)](_0x11f238?this[_0x347f8c(0x407)]()-0x1:0x0);},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0x305)]=function(){const _0x241586=_0x4a80d9;Window_Selectable[_0x241586(0xba6)][_0x241586(0x305)][_0x241586(0x432)](this);if(this[_0x241586(0x378)]()[_0x241586(0x494)]())this['_lastEnemy']=this[_0x241586(0x378)]();if(this['enemy']()[_0x241586(0x172)]())this[_0x241586(0x466)]=this[_0x241586(0x378)]();},Window_BattleEnemy['prototype'][_0x4a80d9(0x8b9)]=function(_0x44c107){const _0x2119a5=_0x4a80d9;Window_Selectable[_0x2119a5(0xba6)]['select'][_0x2119a5(0x432)](this,_0x44c107),$gameTroop['select'](this[_0x2119a5(0x378)]()),$gameParty[_0x2119a5(0x8b9)](this[_0x2119a5(0x378)]());if(!this['enemy']())return;if(this[_0x2119a5(0x1ae)]()){const _0x158774=SceneManager[_0x2119a5(0xb97)]['_actorWindow'];if(this[_0x2119a5(0x378)]()['isActor']())_0x158774[_0x2119a5(0x8b9)](this[_0x2119a5(0x378)]()[_0x2119a5(0x4a4)]());else{if(_0x2119a5(0x329)!=='VLESl')_0x158774['deselect']();else{const _0x1ce812=_0x5640e5['BattleCore'][_0x2119a5(0x668)][_0x2119a5(0x8e0)],_0x5f479b=_0x1ce812['StepDistanceX'],_0x51e5f6=_0x1ce812[_0x2119a5(0x9b2)],_0x2b57ec=_0x1ce812[_0x2119a5(0x811)];this[_0x2119a5(0x163)](-_0x5f479b,-_0x51e5f6,_0x2b57ec);}}}},Window_BattleEnemy[_0x4a80d9(0xba6)]['meetsSelectFrontviewActorConditions']=function(){const _0x24bb9a=_0x4a80d9;if(!this[_0x24bb9a(0x83f)])return![];if($gameSystem[_0x24bb9a(0x6e5)]())return![];const _0x5d2706=SceneManager[_0x24bb9a(0xb97)]['battleLayoutStyle'](),_0x380a35=['default','list','xp','portrait',_0x24bb9a(0x33a)];return _0x380a35[_0x24bb9a(0xcf9)](_0x5d2706);},Window_BattleEnemy[_0x4a80d9(0xba6)]['openBattleActorWindow']=function(){const _0x315284=_0x4a80d9,_0x251c65=SceneManager[_0x315284(0xb97)][_0x315284(0xcc2)];_0x251c65[_0x315284(0x3a5)](),_0x251c65['setEnemyWindowMode'](!![]),_0x251c65[_0x315284(0x1d6)](),_0x251c65[_0x315284(0x1c4)]();const _0x3f865b=SceneManager[_0x315284(0xb97)]['battleLayoutStyle'](),_0x1d1f96=['xp',_0x315284(0x120),_0x315284(0x33a)];if(_0x1d1f96[_0x315284(0xcf9)](_0x3f865b)){if(_0x315284(0xa88)===_0x315284(0xa88)){const _0x47f9a9=SceneManager[_0x315284(0xb97)][_0x315284(0x989)];_0x47f9a9[_0x315284(0xf4)]['y']=0x0;}else _0x87fd1f[_0x315284(0xba6)][_0x315284(0x333)][_0x315284(0x432)](this),this[_0x315284(0x156)](),this['updateCancel']();}},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0xc31)]=function(){const _0x5b1675=_0x4a80d9,_0x4b31b6=SceneManager[_0x5b1675(0xb97)]['_actorWindow'];_0x4b31b6[_0x5b1675(0x670)](),_0x4b31b6[_0x5b1675(0x2a0)](![]),_0x4b31b6['deselect']();const _0x40c309=SceneManager['_scene'][_0x5b1675(0x989)];_0x40c309[_0x5b1675(0xf4)]['y']=0x1;},Window_BattleEnemy[_0x4a80d9(0xba6)]['selectAllEnemies']=function(){const _0x24e185=_0x4a80d9,_0x4f900a=BattleManager['inputtingAction']();if(_0x4f900a)_0x4f900a[_0x24e185(0xa64)](_0x24e185(0xbf0));this['processOk']();},Window_BattleEnemy['prototype'][_0x4a80d9(0x1b7)]=function(){const _0x437a52=_0x4a80d9,_0x4099d9=BattleManager[_0x437a52(0x642)]();if(_0x4099d9)_0x4099d9['setTargetBattlerKey']('all\x20actors');this[_0x437a52(0x9fd)]();},Window_BattleEnemy[_0x4a80d9(0xba6)]['isCurrentItemEnabled']=function(){return this['isActionSelectionValid']();},Window_BattleEnemy[_0x4a80d9(0xba6)][_0x4a80d9(0xc3b)]=function(){const _0x544925=_0x4a80d9,_0x29aed0=BattleManager[_0x544925(0x642)]();if(!_0x29aed0)return!![];if(!_0x29aed0[_0x544925(0x6af)]())return!![];const _0x582f76=this[_0x544925(0x378)](),_0x293eff=_0x29aed0[_0x544925(0x6af)]()[_0x544925(0x6c8)];if(_0x29aed0[_0x544925(0xa8c)]()){if(_0x582f76===BattleManager[_0x544925(0x442)]())return![];}return!![];},Window_BattleItem[_0x4a80d9(0xba6)][_0x4a80d9(0xcf9)]=function(_0x5b852a){const _0x184fbd=_0x4a80d9;if(!_0x5b852a)return![];return _0x5b852a['occasion']===0x0||_0x5b852a[_0x184fbd(0x90c)]===0x1;};function Window_AutoBattleCancel(){const _0x2c34c5=_0x4a80d9;this[_0x2c34c5(0x54a)](...arguments);}Window_AutoBattleCancel[_0x4a80d9(0xba6)]=Object['create'](Window_Base[_0x4a80d9(0xba6)]),Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0xc12)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(_0xa18ed0){const _0x507431=_0x4a80d9;Window_Base[_0x507431(0xba6)]['initialize'][_0x507431(0x432)](this,_0xa18ed0),this[_0x507431(0xb45)](this[_0x507431(0x3f9)]()),this[_0x507431(0x1d6)]();},Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0x3f9)]=function(){const _0x12ec43=_0x4a80d9;return VisuMZ[_0x12ec43(0xbe1)][_0x12ec43(0x668)][_0x12ec43(0x51b)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0x1d6)]=function(){const _0xc66ff=_0x4a80d9;this['contents'][_0xc66ff(0x2b9)]();const _0x6697b4=VisuMZ[_0xc66ff(0xbe1)]['Settings'][_0xc66ff(0x51b)]['AutoBattleMsg'],_0x21cbbb=_0x6697b4[_0xc66ff(0x7d6)](this[_0xc66ff(0xb46)](),this[_0xc66ff(0x118)]()),_0xb6bdea=this[_0xc66ff(0x475)](_0x21cbbb)[_0xc66ff(0x2ce)],_0x998b46=Math[_0xc66ff(0x506)]((this[_0xc66ff(0x8cf)]-_0xb6bdea)/0x2);this[_0xc66ff(0x1cf)](_0x21cbbb,_0x998b46,0x0,_0xb6bdea);},Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0xb46)]=function(){const _0x25ef48=_0x4a80d9;return Imported[_0x25ef48(0xb80)]?TextManager[_0x25ef48(0x696)]('ok'):VisuMZ[_0x25ef48(0xbe1)][_0x25ef48(0x668)][_0x25ef48(0x51b)][_0x25ef48(0x15d)];},Window_AutoBattleCancel['prototype'][_0x4a80d9(0x118)]=function(){const _0x156945=_0x4a80d9;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x156945(0x696)](_0x156945(0x645)):VisuMZ['BattleCore'][_0x156945(0x668)][_0x156945(0x51b)][_0x156945(0xcde)];},Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x53f5e5=_0x4a80d9;Window_Base[_0x53f5e5(0xba6)][_0x53f5e5(0x333)][_0x53f5e5(0x432)](this),this[_0x53f5e5(0x156)](),this[_0x53f5e5(0x8df)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x15a13c=_0x4a80d9;this['visible']=BattleManager[_0x15a13c(0x8fb)];},Window_AutoBattleCancel[_0x4a80d9(0xba6)][_0x4a80d9(0x8df)]=function(){const _0x3828d9=_0x4a80d9;if(!BattleManager['_autoBattle'])return;(Input[_0x3828d9(0x70c)]('ok')||Input[_0x3828d9(0x70c)](_0x3828d9(0x645))||TouchInput[_0x3828d9(0xb61)]()||TouchInput[_0x3828d9(0x312)]())&&(SoundManager[_0x3828d9(0x3e7)](),BattleManager[_0x3828d9(0x8fb)]=![],Input[_0x3828d9(0x2b9)](),TouchInput[_0x3828d9(0x2b9)]());};function Window_EnemyName(){const _0x1edd29=_0x4a80d9;this[_0x1edd29(0x54a)](...arguments);}Window_EnemyName['prototype']=Object[_0x4a80d9(0x5e8)](Window_StatusBase[_0x4a80d9(0xba6)]),Window_EnemyName['prototype'][_0x4a80d9(0xc12)]=Window_EnemyName,Window_EnemyName['prototype'][_0x4a80d9(0x54a)]=function(_0x4a60c5){const _0x196822=_0x4a80d9;this[_0x196822(0x34e)]=_0x4a60c5,this['_text']='';const _0x130f7b=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x196822(0x4da)]()*0x4);Window_StatusBase['prototype'][_0x196822(0x54a)][_0x196822(0x432)](this,_0x130f7b),this[_0x196822(0xb45)](0x2),this[_0x196822(0x7fe)]=0x0;},Window_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x71f)]=function(){this['padding']=0x0;},Window_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x378)]=function(){const _0x58fba1=_0x4a80d9;return $gameTroop[_0x58fba1(0x767)]()[this[_0x58fba1(0x34e)]];},Window_EnemyName['prototype']['update']=function(){const _0x16b1d4=_0x4a80d9;Window_StatusBase[_0x16b1d4(0xba6)][_0x16b1d4(0x333)]['call'](this),this[_0x16b1d4(0x378)]()&&this[_0x16b1d4(0x378)]()[_0x16b1d4(0x380)]()!==this[_0x16b1d4(0x22e)]&&(_0x16b1d4(0xc99)!==_0x16b1d4(0x4e8)?(this[_0x16b1d4(0x22e)]=this[_0x16b1d4(0x378)]()[_0x16b1d4(0x380)](),this[_0x16b1d4(0x1d6)]()):(this[_0x16b1d4(0x29f)]()[_0x16b1d4(0xd02)](_0x4fd0eb),_0x499de9['battleStatusSprite']=!![])),this[_0x16b1d4(0x21b)](),this[_0x16b1d4(0x26e)]();},Window_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0x21b)]=function(){const _0x4c2b71=_0x4a80d9;if(!this['enemy']()){if(this[_0x4c2b71(0x7fe)]>0x0)this[_0x4c2b71(0x7fe)]-=0x10;}else{if(this[_0x4c2b71(0x378)]()[_0x4c2b71(0x50b)]()){if(this[_0x4c2b71(0x7fe)]>0x0)this[_0x4c2b71(0x7fe)]-=0x10;}else{if(SceneManager[_0x4c2b71(0xb97)]['_enemyWindow']&&SceneManager['_scene'][_0x4c2b71(0x9bc)][_0x4c2b71(0x7c0)]&&SceneManager[_0x4c2b71(0xb97)]['_enemyWindow'][_0x4c2b71(0x441)][_0x4c2b71(0xcf9)](this[_0x4c2b71(0x378)]())){if(_0x4c2b71(0xb0c)!=='DAhEC')this[_0x4c2b71(0x93f)]=_0x4c2b71(0x7e5);else{if(this['contentsOpacity']<0xff)this[_0x4c2b71(0x7fe)]+=0x10;}}else this[_0x4c2b71(0x7fe)]>0x0&&(this[_0x4c2b71(0x7fe)]-=0x10);}}},Window_EnemyName['prototype']['updatePosition']=function(){const _0x5be590=_0x4a80d9;if(!this[_0x5be590(0x378)]())return;SceneManager[_0x5be590(0x6c1)]()?'YmNLx'!==_0x5be590(0x747)?this[_0x5be590(0x1f3)](_0x5be590(0x7b6)):this['x']=Graphics[_0x5be590(0x84d)]-this[_0x5be590(0x378)]()[_0x5be590(0x997)]()['_baseX']:this['x']=this[_0x5be590(0x378)]()[_0x5be590(0x997)]()[_0x5be590(0x9ec)];this['x']-=Math['round'](this['width']/0x2),this['y']=this[_0x5be590(0x378)]()['battler']()[_0x5be590(0x1d5)]-Math[_0x5be590(0x961)](this['lineHeight']()*1.5);const _0x3a27ab=VisuMZ[_0x5be590(0xbe1)][_0x5be590(0x668)]['Enemy'];this['x']+=_0x3a27ab['NameOffsetX']||0x0,this['y']+=_0x3a27ab[_0x5be590(0x932)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x5c84a5=_0x4a80d9;Window_Base[_0x5c84a5(0xba6)]['resetFontSettings'][_0x5c84a5(0x432)](this),this[_0x5c84a5(0x28f)][_0x5c84a5(0x885)]=VisuMZ[_0x5c84a5(0xbe1)][_0x5c84a5(0x668)][_0x5c84a5(0x916)][_0x5c84a5(0x63d)];},Window_EnemyName['prototype'][_0x4a80d9(0x1d6)]=function(){const _0x628869=_0x4a80d9;Window_StatusBase[_0x628869(0xba6)][_0x628869(0x1d6)][_0x628869(0x432)](this),this[_0x628869(0x28f)][_0x628869(0x2b9)]();if(!this[_0x628869(0x378)]())return;this[_0x628869(0xac5)]();},Window_EnemyName[_0x4a80d9(0xba6)][_0x4a80d9(0xac5)]=function(){const _0x4c8e48=_0x4a80d9;this[_0x4c8e48(0x22e)]=this[_0x4c8e48(0x378)]()[_0x4c8e48(0x380)]();const _0x139fbb=this[_0x4c8e48(0x475)](this[_0x4c8e48(0x22e)])[_0x4c8e48(0x2ce)],_0x2e5b1e=Math[_0x4c8e48(0x961)]((this[_0x4c8e48(0x8cf)]-_0x139fbb)/0x2);this['drawTextEx'](this[_0x4c8e48(0x22e)],_0x2e5b1e,0x0,_0x139fbb+0x8);},Window_BattleLog['prototype']['maxLines']=function(){const _0x40f114=_0x4a80d9;return VisuMZ[_0x40f114(0xbe1)]['Settings'][_0x40f114(0x47d)][_0x40f114(0x6f1)];},Window_BattleLog['prototype'][_0x4a80d9(0x44a)]=function(){const _0x5499d3=_0x4a80d9;return VisuMZ[_0x5499d3(0xbe1)][_0x5499d3(0x668)]['BattleLog']['MessageWait'];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x383)]=function(){const _0x501d41=_0x4a80d9;return VisuMZ[_0x501d41(0xbe1)][_0x501d41(0x668)]['BattleLog'][_0x501d41(0x400)];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x713)]=function(){return![];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x7a4)]=function(_0x191f20,_0x5d8a0e){const _0x507747=_0x4a80d9;this[_0x507747(0x3ea)](_0x507747(0x8c8)),BattleManager[_0x507747(0x570)](_0x191f20,_0x5d8a0e),this['callNextMethod']();},Window_BattleLog['prototype'][_0x4a80d9(0x8c8)]=function(){const _0x13883c=_0x4a80d9;this[_0x13883c(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x510)]=function(_0x369e5e){const _0x3ab3cf=_0x4a80d9,_0x53cc57=Array[_0x3ab3cf(0xba6)][_0x3ab3cf(0x8d8)][_0x3ab3cf(0x432)](arguments,0x1),_0x4e3d6d={'name':_0x369e5e,'params':_0x53cc57},_0x35948c=this[_0x3ab3cf(0x282)][_0x3ab3cf(0xc3f)](_0x1493c3=>_0x1493c3[_0x3ab3cf(0x380)])['indexOf'](_0x3ab3cf(0x8c8));_0x35948c>=0x0?this['_methods'][_0x3ab3cf(0x576)](_0x35948c,0x0,_0x4e3d6d):'fSmsS'!=='fSmsS'?(this['_borderPortraitSprite']['x']=0x0,this[_0x3ab3cf(0x83b)]=_0x140ca3[_0x3ab3cf(0xbf1)](_0x553313[_0x3ab3cf(0x2ce)]/0x2)):this[_0x3ab3cf(0x282)]['push'](_0x4e3d6d);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x3ea)]=function(_0x1a1a68){const _0x2c6dfc=_0x4a80d9,_0x36bba7=Array[_0x2c6dfc(0xba6)][_0x2c6dfc(0x8d8)]['call'](arguments,0x1);this[_0x2c6dfc(0x282)]['unshift']({'name':_0x1a1a68,'params':_0x36bba7});},Window_BattleLog[_0x4a80d9(0xba6)]['logActionList']=function(){const _0x479802=_0x4a80d9;if(!$gameTemp[_0x479802(0x69e)]())return;console[_0x479802(0x7bd)](this['_methods'][_0x479802(0xc3f)](_0x1ed2dc=>_0x1ed2dc['name'])[_0x479802(0xfd)]('\x0a'));},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleLog_refresh']=Window_BattleLog['prototype']['refresh'],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x1d6)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleLog_update']=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x333)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x828522=_0x4a80d9;VisuMZ[_0x828522(0xbe1)][_0x828522(0xaed)][_0x828522(0x432)](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x717)]=function(){const _0x594e9d=_0x4a80d9;this['_requestRefresh']=![],VisuMZ[_0x594e9d(0xbe1)][_0x594e9d(0x81f)][_0x594e9d(0x432)](this);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x58c)]=function(_0x165dde){const _0x47db71=_0x4a80d9;let _0x5874be=VisuMZ[_0x47db71(0xbe1)][_0x47db71(0x668)][_0x47db71(0x47d)][_0x47db71(0xa8f)]['toLowerCase']()[_0x47db71(0x893)](),_0x5d0b5c=this[_0x47db71(0x4c4)][_0x165dde];if(_0x5d0b5c[_0x47db71(0x605)](/<LEFT>/i))_0x5874be=_0x47db71(0x10b);else{if(_0x5d0b5c[_0x47db71(0x605)](/<CENTER>/i)){if('QEIUx'===_0x47db71(0x1e0))_0x5874be='center';else{if(_0x2b33b4[_0x47db71(0x605)](/(.*):[ ](\d+)/i)){const _0x567249=_0x416ac4(_0x2518ce['$1'])[_0x47db71(0x893)](),_0x1c2858=_0x2e84af(_0x4e34b6['$2']);_0x20cdd9[_0x567249]=_0x1c2858,_0x5a44cd+=_0x1c2858;}else{if(_0x8975e5[_0x47db71(0x605)](/(.*):[ ](\d+\.?\d+)/i)){const _0x384fc0=_0x2faca3(_0x5f076d['$1'])[_0x47db71(0x893)](),_0x59bb96=_0x474187(_0x6dd28c['$2']);_0x1278aa[_0x384fc0]=_0x59bb96,_0x2f4a9d+=_0x59bb96;}else _0x5a1a59!==''&&(_0x24b9e8[_0x487d05]=0x1,_0x20c389++);}}}else{if(_0x5d0b5c[_0x47db71(0x605)](/<RIGHT>/i)){if('xxHba'===_0x47db71(0x96f))_0x5874be=_0x47db71(0x413);else return _0x9f4902[_0x47db71(0xbe1)]['Settings'][_0x47db71(0x5f0)]['AniDuration']??0x14;}}}_0x5d0b5c=_0x5d0b5c[_0x47db71(0x220)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x5d0b5c=_0x5d0b5c[_0x47db71(0x220)](/\\I\[0\]/gi,'');const _0x8f5f27=this[_0x47db71(0x509)](_0x165dde);this[_0x47db71(0x28f)]['clearRect'](_0x8f5f27['x'],_0x8f5f27['y'],_0x8f5f27[_0x47db71(0x2ce)],_0x8f5f27[_0x47db71(0x8dc)]);const _0x25d7e8=this[_0x47db71(0x475)](_0x5d0b5c)['width'];let _0xce225a=_0x8f5f27['x'];if(_0x5874be===_0x47db71(0x4c5))_0xce225a+=(_0x8f5f27['width']-_0x25d7e8)/0x2;else _0x5874be===_0x47db71(0x413)&&(_0xce225a+=_0x8f5f27[_0x47db71(0x2ce)]-_0x25d7e8);this[_0x47db71(0x1cf)](_0x5d0b5c,_0xce225a,_0x8f5f27['y'],_0x25d7e8+0x8);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x496)]=function(_0x187d02){const _0x33e504=_0x4a80d9;this[_0x33e504(0x4c4)][_0x33e504(0x510)](_0x187d02),this[_0x33e504(0x1d6)](),this['callNextMethod']();},Window_BattleLog[_0x4a80d9(0xba6)]['updateWaitMode']=function(){const _0x1c6505=_0x4a80d9;let _0x5956f4=![];switch(this[_0x1c6505(0x3f0)]){case _0x1c6505(0xfe):_0x5956f4=this[_0x1c6505(0x967)][_0x1c6505(0x14e)]();break;case _0x1c6505(0x427):_0x5956f4=this[_0x1c6505(0x967)][_0x1c6505(0x298)]();break;case _0x1c6505(0x162):_0x5956f4=this[_0x1c6505(0x967)][_0x1c6505(0x1f4)]();break;case'float':_0x5956f4=this[_0x1c6505(0x967)][_0x1c6505(0x39c)]();break;case'jump':_0x5956f4=this['_spriteset']['isAnyoneJumping']();break;case'opacity':_0x5956f4=this[_0x1c6505(0x967)][_0x1c6505(0xb43)]();break;}if(!_0x5956f4){if(_0x1c6505(0xc9b)!==_0x1c6505(0xc9b)){let _0x2573d7=(_0xe9dac5[_0x1c6505(0x772)]*_0x839b0[_0x1c6505(0x2f9)]+_0x45bb16[_0x1c6505(0x289)])*_0x23b183['rec'];_0x2573d7=this['disperseDamage'](_0x2573d7),this[_0x1c6505(0x119)]()&&(_0x2573d7*=this[_0x1c6505(0x1e3)]()[_0x1c6505(0xcc9)]),_0x2573d7=_0x1fe7e1['floor'](_0x2573d7),_0x2573d7!==0x0&&(_0x58e4cc[_0x1c6505(0x65a)](_0x2573d7),this[_0x1c6505(0x882)](_0x154846));}else this[_0x1c6505(0x3f0)]='';}return _0x5956f4;},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x9f8)]=function(){const _0x3216d6=_0x4a80d9;this[_0x3216d6(0xbaa)]('animation');},Window_BattleLog[_0x4a80d9(0xba6)]['waitForFloat']=function(){const _0x2382f2=_0x4a80d9;this['setWaitMode'](_0x2382f2(0x13f));},Window_BattleLog['prototype'][_0x4a80d9(0xc3a)]=function(){const _0x5a2573=_0x4a80d9;this[_0x5a2573(0xbaa)](_0x5a2573(0x4ec));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5aa)]=function(){const _0x48bdbc=_0x4a80d9;this[_0x48bdbc(0xbaa)](_0x48bdbc(0x2ff));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x86e)]=function(){const _0x25ec81=_0x4a80d9,_0x1c9f0e=VisuMZ[_0x25ec81(0xbe1)][_0x25ec81(0x668)]['BattleLog'];if(!_0x1c9f0e[_0x25ec81(0x84f)])return;this[_0x25ec81(0x510)](_0x25ec81(0x496),_0x1c9f0e[_0x25ec81(0x18e)][_0x25ec81(0x7d6)]($gameTroop[_0x25ec81(0x7ac)]())),this[_0x25ec81(0x510)]('waitCount',_0x1c9f0e['StartTurnWait']),this['push'](_0x25ec81(0x2b9));},Window_BattleLog['prototype'][_0x4a80d9(0x693)]=function(_0x2939bc,_0x4af363,_0x2090cc){const _0x419f77=_0x4a80d9;this[_0x419f77(0xa17)](_0x4af363)?BattleManager[_0x419f77(0x9f0)]():this['usePremadeActionSequence'](_0x2939bc,_0x4af363,_0x2090cc);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xa17)]=function(_0x34d623){const _0x2f8a27=_0x4a80d9;if(!SceneManager[_0x2f8a27(0x1f8)]())return![];if(!_0x34d623)return![];if(!_0x34d623[_0x2f8a27(0x6af)]())return![];if(_0x34d623['item']()['note'][_0x2f8a27(0x605)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x2f8a27(0x1c5)===_0x2f8a27(0xb68))this[_0x2f8a27(0x669)]=_0x23ee85,this['_animationCount']=-_0x256e0e,this[_0x2f8a27(0x55a)]=_0x1bbb8a,this[_0x2f8a27(0x9c9)](),this[_0x2f8a27(0xa5f)]();else return!![];}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x34d623[_0x2f8a27(0x6af)]()))return!![];return![];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xc7f)]=function(_0x4e05a1,_0x125404,_0x44b5e0){const _0x57cfdf=_0x4a80d9,_0x485c0f=_0x125404['item']();this['setupActionSet'](_0x4e05a1,_0x125404,_0x44b5e0),this[_0x57cfdf(0x55b)](_0x4e05a1,_0x125404,_0x44b5e0),this['finishActionSet'](_0x4e05a1,_0x125404,_0x44b5e0);},Window_BattleLog['prototype'][_0x4a80d9(0x276)]=function(_0x23ea6a,_0x1de2b8){const _0x548a18=_0x4a80d9,_0x521cab=VisuMZ[_0x548a18(0xbe1)][_0x548a18(0x668)][_0x548a18(0x47d)];if(_0x521cab[_0x548a18(0x5df)]){if(_0x548a18(0x8cb)===_0x548a18(0x8cb))this['push'](_0x548a18(0x496),'<CENTER>%1'[_0x548a18(0x7d6)](DataManager[_0x548a18(0xc4b)](_0x1de2b8)));else{if(_0x160c8f[_0x548a18(0x288)]())return;const _0x3bdf24=_0x48a143[_0x548a18(0xbe1)][_0x548a18(0x668)]['Damage'],_0x130512=new _0x53c17a();_0x130512[_0x548a18(0xaac)]=_0x3bdf24[_0x548a18(0xf2)],this[_0x548a18(0x4db)](_0x130512),_0x130512['setup'](this['_battler']),_0x130512[_0x548a18(0x906)](this[_0x548a18(0x437)]),this['addDamageSprite'](_0x130512);}}if(DataManager[_0x548a18(0x54b)](_0x1de2b8)){if(_0x548a18(0x385)!=='uNNBt'){if(_0x521cab[_0x548a18(0x861)])this[_0x548a18(0x5e0)](_0x1de2b8[_0x548a18(0x9a4)],_0x23ea6a,_0x1de2b8);if(_0x521cab[_0x548a18(0x908)])this[_0x548a18(0x5e0)](_0x1de2b8[_0x548a18(0xc09)],_0x23ea6a,_0x1de2b8);}else{if(this[_0x548a18(0x959)]===_0x42be93)this['initBattleCore']();if(!_0x24c285)return;if(this['_defeatedEnemies']['includes'](_0x3bb557))return;this[_0x548a18(0x959)][_0x548a18(0x510)](_0x3cf56b),this[_0x548a18(0x959)][_0x548a18(0x915)]((_0x3124dd,_0x2d5fc8)=>_0x3124dd-_0x2d5fc8);}}else{if(_0x521cab[_0x548a18(0x4ab)])this['displayItemMessage'](TextManager[_0x548a18(0x2f6)],_0x23ea6a,_0x1de2b8);}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x708)]=function(_0x5b34c6,_0x3e8517,_0x4acde8){const _0x116b74=_0x4a80d9,_0x23485c=_0x3e8517[_0x116b74(0x6af)]();this[_0x116b74(0x276)](_0x5b34c6,_0x23485c),this[_0x116b74(0x510)]('applyImmortal',_0x5b34c6,_0x4acde8,!![]),this[_0x116b74(0x510)](_0x116b74(0x5ad),_0x5b34c6,_0x3e8517),this[_0x116b74(0x510)](_0x116b74(0x1d7)),this['push'](_0x116b74(0xa87),_0x5b34c6,_0x3e8517),this[_0x116b74(0x510)](_0x116b74(0x9f8));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x55b)]=function(_0x15b17c,_0x41dfd0,_0x4567f1){const _0x21e840=_0x4a80d9;if(this[_0x21e840(0x5ec)](_0x41dfd0))this[_0x21e840(0x5cf)](_0x15b17c,_0x41dfd0,_0x4567f1);else{if(this['isMeleeMultiTargetAction'](_0x41dfd0)){if(_0x21e840(0xbf3)===_0x21e840(0xbf3))this[_0x21e840(0xa2e)](_0x15b17c,_0x41dfd0,_0x4567f1);else{if(!this[_0x21e840(0x437)])return;this[_0x21e840(0xc4c)]=this[_0x21e840(0x437)][_0x21e840(0x8fe)](),this[_0x21e840(0x88b)]=this[_0x21e840(0x437)][_0x21e840(0xa53)]();}}else _0x41dfd0['isForRandom']()?this['targetActionSet'](_0x15b17c,_0x41dfd0,_0x4567f1):_0x21e840(0xa5a)===_0x21e840(0x4a5)?_0xdbb814=_0x4632b6['FrontViewSelect']:this[_0x21e840(0x4f6)](_0x15b17c,_0x41dfd0,_0x4567f1);}},Window_BattleLog['prototype']['addMeleeReturnActionSet']=function(_0x3beaae,_0x55d871,_0x3df513,_0x6d8fe4){const _0x27d836=_0x4a80d9;if(_0x55d871){if(_0x27d836(0xc87)!==_0x27d836(0xc87))_0x4f5465+=_0x532502/0x2;else{const _0x4d0773=_0x3beaae[_0x27d836(0x997)]();this['push']('performJump',[_0x3beaae],_0x3df513,_0x6d8fe4),this[_0x27d836(0x510)]('performMoveToPoint',_0x3beaae,_0x4d0773['_homeX'],_0x4d0773[_0x27d836(0x1b4)],_0x6d8fe4,![],_0x27d836(0xa70)),this[_0x27d836(0x510)]('requestMotion',[_0x3beaae],_0x27d836(0x367)),this[_0x27d836(0x510)](_0x27d836(0x1d7)),this['push'](_0x27d836(0x1f3),[_0x3beaae],_0x27d836(0x95b));}}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5ec)]=function(_0x242c92){const _0x445a32=_0x4a80d9;if(!_0x242c92['isPhysical']())return![];if(!_0x242c92[_0x445a32(0x61a)]())return![];if(!_0x242c92[_0x445a32(0x559)]())return![];return VisuMZ[_0x445a32(0xbe1)][_0x445a32(0x668)][_0x445a32(0x8e0)][_0x445a32(0xc24)];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5cf)]=function(_0xce2d3a,_0x5e2f5a,_0x3ca70a){const _0x2350a2=_0x4a80d9,_0x47ec69=_0xce2d3a[_0x2350a2(0xcb1)]()[_0x2350a2(0xce4)]<0x2,_0xecefba=0x14,_0x1d74e8=0x30;let _0x1f0fe3=!![];_0x3ca70a[_0x2350a2(0x6fc)]>0x0&&_0xce2d3a[_0x2350a2(0x172)]()===_0x3ca70a[0x0]['isActor']()&&(_0x1f0fe3=![]);_0x47ec69&&_0x1f0fe3&&(this[_0x2350a2(0x510)](_0x2350a2(0x3f6),[_0xce2d3a],_0x1d74e8,_0xecefba),this['push'](_0x2350a2(0xa96),_0xce2d3a,_0x3ca70a,'front\x20base',_0xecefba,!![],'Linear',!![]),this[_0x2350a2(0x510)]('requestMotion',[_0xce2d3a],_0x2350a2(0x95b)),this[_0x2350a2(0x510)](_0x2350a2(0x1d7)));let _0x4063b1=_0x5e2f5a[_0x2350a2(0x720)]()?this[_0x2350a2(0x175)](_0xce2d3a):0x1;for(let _0x3dcc75=0x0;_0x3dcc75<_0x4063b1;_0x3dcc75++){_0x5e2f5a[_0x2350a2(0x720)]()&&_0xce2d3a[_0x2350a2(0x172)]()&&('pGpAf'===_0x2350a2(0xba2)?this[_0x2350a2(0x510)](_0x2350a2(0x46f),_0xce2d3a,_0x3dcc75):(_0x4d3d98[_0x2350a2(0xc33)](_0x564564[0x2],_0x55ccf9[0x3]),_0x71b562[_0x2350a2(0xc33)](_0x42c311))),_0x5e2f5a[_0x2350a2(0x6af)]()[_0x2350a2(0xaff)]<0x0?this[_0x2350a2(0xc37)](_0xce2d3a,_0x5e2f5a,_0x3ca70a):this[_0x2350a2(0x4f6)](_0xce2d3a,_0x5e2f5a,_0x3ca70a);}_0x5e2f5a['isAttack']()&&_0xce2d3a[_0x2350a2(0x172)]()&&this[_0x2350a2(0x510)](_0x2350a2(0x3b8),_0xce2d3a),this[_0x2350a2(0x510)](_0x2350a2(0x612),_0xce2d3a,_0x3ca70a,![]),this[_0x2350a2(0x45d)](_0xce2d3a,_0x47ec69,_0x1d74e8,_0xecefba);},Window_BattleLog[_0x4a80d9(0xba6)]['isMeleeMultiTargetAction']=function(_0x517ae0){const _0x52d7cc=_0x4a80d9;if(!_0x517ae0[_0x52d7cc(0x673)]())return![];if(!_0x517ae0[_0x52d7cc(0x9d6)]())return![];if(!_0x517ae0[_0x52d7cc(0x559)]())return![];return VisuMZ[_0x52d7cc(0xbe1)][_0x52d7cc(0x668)][_0x52d7cc(0x8e0)]['AutoMeleeAoE'];},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xa2e)]=function(_0x51685a,_0x344450,_0x559775){const _0x47adef=_0x4a80d9,_0x206400=_0x51685a['getAttackMotion']()['type']<0x2,_0xe9f747=0x14,_0x313c27=0x30;if(_0x206400){if(_0x47adef(0x35e)===_0x47adef(0x35e)){this['push'](_0x47adef(0x3f6),[_0x51685a],_0x313c27,_0xe9f747);const _0x27ae6d=_0x559775['length']>0x1?_0x47adef(0xbd0):'front\x20base';this['push'](_0x47adef(0xa96),_0x51685a,_0x559775,_0x27ae6d,_0xe9f747,!![],_0x47adef(0xa70),!![]),this[_0x47adef(0x510)](_0x47adef(0x1f3),[_0x51685a],'walk'),this[_0x47adef(0x510)](_0x47adef(0x1d7));}else return _0x147bfa['BattleCore']['Settings']['BattleLog'][_0x47adef(0x6f1)];}let _0x38a14c=_0x344450[_0x47adef(0x720)]()?this[_0x47adef(0x175)](_0x51685a):0x1;for(let _0x5bf505=0x0;_0x5bf505<_0x38a14c;_0x5bf505++){_0x344450[_0x47adef(0x720)]()&&_0x51685a[_0x47adef(0x172)]()&&this[_0x47adef(0x510)]('setActiveWeaponSet',_0x51685a,_0x5bf505),this[_0x47adef(0x4f6)](_0x51685a,_0x344450,_0x559775);}_0x344450[_0x47adef(0x720)]()&&_0x51685a[_0x47adef(0x172)]()&&this[_0x47adef(0x510)](_0x47adef(0x3b8),_0x51685a),this[_0x47adef(0x510)](_0x47adef(0x612),_0x51685a,_0x559775,![]),this[_0x47adef(0x45d)](_0x51685a,_0x206400,_0x313c27,_0xe9f747);},Window_BattleLog['prototype'][_0x4a80d9(0xc37)]=function(_0x3ee23c,_0x69cf3b,_0x1bb1c5){const _0x42d35d=_0x4a80d9,_0x1b15ff=_0x69cf3b[_0x42d35d(0x6af)]();for(const _0x380bf5 of _0x1bb1c5){if(!_0x380bf5)continue;this[_0x42d35d(0x510)](_0x42d35d(0x1e8),_0x3ee23c,_0x69cf3b),this['push'](_0x42d35d(0x8ec),Sprite_Battler[_0x42d35d(0x369)]),this['push'](_0x42d35d(0x980),_0x3ee23c,[_0x380bf5],_0x1b15ff['animationId']),this[_0x42d35d(0x510)](_0x42d35d(0x8ec),0x18),this[_0x42d35d(0x510)](_0x42d35d(0x7a4),_0x3ee23c,_0x380bf5);}},Window_BattleLog['prototype'][_0x4a80d9(0x4f6)]=function(_0x5bc7b0,_0x5b88ae,_0x4f83da){const _0x401795=_0x4a80d9,_0x4c8e04=_0x5b88ae['item']();let _0xa76779=_0x5b88ae['isAttack']()?0x1+_0x5bc7b0[_0x401795(0xabf)]():0x1;while(_0xa76779--){this['push'](_0x401795(0x1e8),_0x5bc7b0,_0x5b88ae),this[_0x401795(0x510)](_0x401795(0x8ec),Sprite_Battler[_0x401795(0x369)]),this[_0x401795(0x510)](_0x401795(0x980),_0x5bc7b0,_0x4f83da[_0x401795(0x7ee)](),_0x4c8e04[_0x401795(0xaff)]),this[_0x401795(0x510)](_0x401795(0x9f8));}for(const _0x528d0a of _0x4f83da){if(!_0x528d0a)continue;this['push'](_0x401795(0x7a4),_0x5bc7b0,_0x528d0a);}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xc74)]=function(_0xccbbb5,_0x27d901,_0x1a2fd5){const _0x40cab8=_0x4a80d9,_0x560dc4=_0x27d901[_0x40cab8(0x6af)]();this[_0x40cab8(0x510)](_0x40cab8(0x612),_0xccbbb5,_0x1a2fd5,![]),this[_0x40cab8(0x510)]('waitForNewLine'),this[_0x40cab8(0x510)](_0x40cab8(0x575)),this['push'](_0x40cab8(0x2b9)),this[_0x40cab8(0x510)](_0x40cab8(0x8d3),_0xccbbb5),this[_0x40cab8(0x510)](_0x40cab8(0x1d7));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xb7f)]=function(_0x112511){},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5bb)]=Window_BattleLog[_0x4a80d9(0xba6)]['displayCurrentState'],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x6f0)]=function(_0x15b1c7){const _0x518dea=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x518dea(0x668)]['BattleLog'][_0x518dea(0x9be)])return;VisuMZ[_0x518dea(0xbe1)]['Window_BattleLog_displayCurrentState']['call'](this,_0x15b1c7);},Window_BattleLog['prototype'][_0x4a80d9(0x966)]=function(_0x2f5c25){const _0x1bcac9=_0x4a80d9;this[_0x1bcac9(0x510)](_0x1bcac9(0x48d),_0x2f5c25);VisuMZ[_0x1bcac9(0xbe1)][_0x1bcac9(0x668)][_0x1bcac9(0x8e0)][_0x1bcac9(0x56f)]&&(_0x1bcac9(0xb47)===_0x1bcac9(0xb47)?this[_0x1bcac9(0x510)]('showAnimation',_0x2f5c25,[BattleManager[_0x1bcac9(0x139)]],-0x1):this[_0x1bcac9(0xc59)]=this['applyEasing'](this['_floatHeight'],this['_targetFloatHeight'],_0x489dcd,_0x40fdf4,_0x324ff2));if(!VisuMZ[_0x1bcac9(0xbe1)][_0x1bcac9(0x668)][_0x1bcac9(0x47d)]['ShowCounter'])return;this[_0x1bcac9(0x510)](_0x1bcac9(0x496),TextManager[_0x1bcac9(0x1a1)][_0x1bcac9(0x7d6)](_0x2f5c25['name']()));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x381)]=function(_0x196b7a){const _0x554364=_0x4a80d9;this[_0x554364(0x510)](_0x554364(0x30e),_0x196b7a);if(!VisuMZ[_0x554364(0xbe1)][_0x554364(0x668)][_0x554364(0x47d)][_0x554364(0x39d)])return;this[_0x554364(0x510)](_0x554364(0x496),TextManager[_0x554364(0x7a7)]['format'](_0x196b7a[_0x554364(0x380)]()));},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xa9f)]=function(_0x2d471f,_0x381e75){const _0x3fd87d=_0x4a80d9;if(VisuMZ['BattleCore']['Settings']['ActionSequence']['ReflectPlayback']){const _0x4b9cb0=_0x381e75['item']();this[_0x3fd87d(0x510)](_0x3fd87d(0x980),_0x2d471f,[_0x2d471f],_0x4b9cb0['animationId']);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x5812a4,_0x4a7f72){const _0x1ea75c=_0x4a80d9;this[_0x1ea75c(0x510)](_0x1ea75c(0x18a),_0x5812a4,_0x4a7f72);if(!VisuMZ['BattleCore'][_0x1ea75c(0x668)][_0x1ea75c(0x47d)]['ShowSubstitute'])return;const _0x350663=_0x5812a4['name'](),_0x35a712=TextManager[_0x1ea75c(0x646)][_0x1ea75c(0x7d6)](_0x350663,_0x4a7f72[_0x1ea75c(0x380)]());this['push'](_0x1ea75c(0x496),_0x35a712);},VisuMZ['BattleCore'][_0x4a80d9(0x40e)]=Window_BattleLog['prototype']['displayActionResults'],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x274)]=function(_0x2c5f0c,_0xa9d15d){const _0x2e91fa=_0x4a80d9;VisuMZ[_0x2e91fa(0xbe1)][_0x2e91fa(0x40e)][_0x2e91fa(0x432)](this,_0x2c5f0c,_0xa9d15d);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xab8)]=Window_BattleLog['prototype'][_0x4a80d9(0x193)],Window_BattleLog['prototype']['displayFailure']=function(_0x43eacc){const _0x56f991=_0x4a80d9;if(!VisuMZ[_0x56f991(0xbe1)][_0x56f991(0x668)][_0x56f991(0x47d)][_0x56f991(0x5fe)])return;VisuMZ[_0x56f991(0xbe1)][_0x56f991(0xab8)]['call'](this,_0x43eacc);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x651)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x15e)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x15e)]=function(_0x4a066e){const _0x1bb9cd=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x1bb9cd(0x668)][_0x1bb9cd(0x47d)][_0x1bb9cd(0x5b2)])return;VisuMZ[_0x1bb9cd(0xbe1)][_0x1bb9cd(0x651)][_0x1bb9cd(0x432)](this,_0x4a066e);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x221)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xcfe)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xcfe)]=function(_0x3fcf0f){const _0x156ee5=_0x4a80d9;if(!VisuMZ[_0x156ee5(0xbe1)][_0x156ee5(0x668)]['BattleLog']['ShowMissEvasion']){if(_0x156ee5(0xa55)===_0x156ee5(0xa55))this[_0x156ee5(0x510)](_0x156ee5(0x697),_0x3fcf0f);else{const _0xb74250=_0x8040c5['parse']('['+_0x1e72c4['$1']['match'](/\d+/g)+']');for(const _0x4a5c64 of _0xb74250){if(!_0x3ef5c1[_0x156ee5(0x638)](_0x4a5c64))return![];}return!![];}}else{if(_0x156ee5(0x3cf)==='dXlLz')VisuMZ[_0x156ee5(0xbe1)][_0x156ee5(0x221)][_0x156ee5(0x432)](this,_0x3fcf0f);else{_0x95c263[_0x156ee5(0xbe1)]['Window_BattleLog_update'][_0x156ee5(0x432)](this);if(this['_requestRefresh'])this[_0x156ee5(0x717)]();}}},VisuMZ['BattleCore'][_0x4a80d9(0xa7c)]=Window_BattleLog[_0x4a80d9(0xba6)]['displayEvasion'],Window_BattleLog['prototype'][_0x4a80d9(0x483)]=function(_0x45aead){const _0x245367=_0x4a80d9;if(!VisuMZ[_0x245367(0xbe1)][_0x245367(0x668)][_0x245367(0x47d)][_0x245367(0xc5c)]){if(_0x45aead['result']()['physical'])this['push'](_0x245367(0x153),_0x45aead);else{if(_0x245367(0xba8)!==_0x245367(0xba8)){if(!_0x24c395['isSceneBattle']())return;if(!_0x2926b6[_0x245367(0x619)])return;_0x383c13[_0x245367(0xb1e)](_0x4bfec7,_0x2cbda2);const _0xa38794=_0x3549b0[_0x245367(0xc05)](),_0x1b6823=_0x203abf['WaitForCamera'];_0x1a5263['setBattleCameraOffset'](_0x4e621d['OffsetX'],_0x1fb5ec[_0x245367(0x21f)],_0x5c33b6[_0x245367(0x9b6)],_0x508497[_0x245367(0x5bd)]);if(_0x1b6823)_0xa38794[_0x245367(0xbaa)](_0x245367(0x161));}else this[_0x245367(0x510)](_0x245367(0x5ff),_0x45aead);}}else VisuMZ['BattleCore'][_0x245367(0xa7c)][_0x245367(0x432)](this,_0x45aead);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x2cf)]=function(_0x2a3076){const _0x4fac1e=_0x4a80d9;if(_0x2a3076[_0x4fac1e(0x4ac)]()[_0x4fac1e(0x6bb)]){if('vIYcI'!==_0x4fac1e(0x779))return _0x34235a[_0x4fac1e(0xbe1)][_0x4fac1e(0x668)][_0x4fac1e(0x916)]['NameAlwaysSelectOnly']?this[_0x4fac1e(0x437)][_0x4fac1e(0x904)]():_0x56fbae['_scene'][_0x4fac1e(0x9bc)]&&_0x1a6d69['_scene'][_0x4fac1e(0x9bc)][_0x4fac1e(0x7c0)]&&_0x8ce20d[_0x4fac1e(0xb97)][_0x4fac1e(0x9bc)][_0x4fac1e(0x441)][_0x4fac1e(0xcf9)](this[_0x4fac1e(0x437)]);else _0x2a3076['_lastHpDamage']=0x0,_0x2a3076[_0x4fac1e(0x4ac)]()['hpDamage']>0x0&&!_0x2a3076[_0x4fac1e(0x4ac)]()[_0x4fac1e(0x5e7)]&&(_0x2a3076[_0x4fac1e(0x384)]=_0x2a3076['result']()[_0x4fac1e(0x9c0)],this[_0x4fac1e(0x510)]('performDamage',_0x2a3076)),_0x2a3076[_0x4fac1e(0x4ac)]()['hpDamage']<0x0&&this[_0x4fac1e(0x510)](_0x4fac1e(0x4fd),_0x2a3076),VisuMZ[_0x4fac1e(0xbe1)]['Settings'][_0x4fac1e(0x47d)]['ShowHpDmg']&&(_0x4fac1e(0xc8b)!==_0x4fac1e(0xc8b)?(this[_0x4fac1e(0x2d7)](_0x4fac1e(0x3dd),_0x4375cd,0x0,!![]),_0x3e3c65[_0x4fac1e(0xbe1)]['Game_Action_apply'][_0x4fac1e(0x432)](this,_0x1f53e0),this[_0x4fac1e(0x2d7)](_0x4fac1e(0x573),_0x5ba725,this[_0x4fac1e(0xbbe)]||0x0,!![]),this[_0x4fac1e(0x535)](_0xd41de7)):this[_0x4fac1e(0x510)](_0x4fac1e(0x496),this[_0x4fac1e(0x6eb)](_0x2a3076)));}},VisuMZ[_0x4a80d9(0xbe1)]['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype'][_0x4a80d9(0x87c)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x87c)]=function(_0x146a94){const _0x14f826=_0x4a80d9;if(!VisuMZ['BattleCore'][_0x14f826(0x668)][_0x14f826(0x47d)][_0x14f826(0x8d4)])return;VisuMZ[_0x14f826(0xbe1)][_0x14f826(0x24d)][_0x14f826(0x432)](this,_0x146a94);},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2a3)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x2c6)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x2c6)]=function(_0x20e71e){const _0x1312a2=_0x4a80d9;if(!VisuMZ['BattleCore']['Settings']['BattleLog']['ShowTpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage'][_0x1312a2(0x432)](this,_0x20e71e);},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x793)]=function(_0x27a6ce){const _0x149950=_0x4a80d9;_0x27a6ce[_0x149950(0x4ac)]()['isStatusAffected']()&&(this['push'](_0x149950(0x917)),this[_0x149950(0x949)](_0x27a6ce),this[_0x149950(0x741)](_0x27a6ce),this[_0x149950(0x510)](_0x149950(0x4c1)));},Window_BattleLog[_0x4a80d9(0xba6)]['displayAddedStates']=function(_0x1c18d9){const _0x3eac38=_0x4a80d9,_0x480f6b=_0x1c18d9[_0x3eac38(0x4ac)](),_0x56b557=_0x480f6b[_0x3eac38(0x234)]();for(const _0xffdb04 of _0x56b557){const _0x558910=_0x1c18d9['isActor']()?_0xffdb04['message1']:_0xffdb04[_0x3eac38(0xc09)];_0x558910&&VisuMZ[_0x3eac38(0xbe1)]['Settings'][_0x3eac38(0x47d)][_0x3eac38(0x5be)]&&(this[_0x3eac38(0x510)](_0x3eac38(0x5b9)),this[_0x3eac38(0x510)]('popBaseLine'),this[_0x3eac38(0x510)](_0x3eac38(0x917)),this[_0x3eac38(0x510)](_0x3eac38(0x496),_0x558910[_0x3eac38(0x7d6)](_0x1c18d9[_0x3eac38(0x380)]())),this[_0x3eac38(0x510)](_0x3eac38(0xca3))),_0xffdb04['id']===_0x1c18d9['deathStateId']()&&this[_0x3eac38(0x510)](_0x3eac38(0x748),_0x1c18d9);}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5b9)]=function(){},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x7e7)]=function(_0x1b26f6){const _0x350109=_0x4a80d9;if(!VisuMZ[_0x350109(0xbe1)][_0x350109(0x668)][_0x350109(0x47d)][_0x350109(0xc6f)])return;const _0x39fc77=_0x1b26f6[_0x350109(0x4ac)](),_0x442573=_0x39fc77[_0x350109(0x2ef)]();for(const _0x3d2836 of _0x442573){_0x3d2836[_0x350109(0x2e4)]&&(this['push'](_0x350109(0x7a1)),this[_0x350109(0x510)]('popBaseLine'),this[_0x350109(0x510)](_0x350109(0x917)),this['push'](_0x350109(0x496),_0x3d2836[_0x350109(0x2e4)]['format'](_0x1b26f6['name']())),this[_0x350109(0x510)](_0x350109(0xca3)));}},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x7a1)]=function(){},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x741)]=function(_0x4c359a){const _0xed360a=_0x4a80d9,_0x39b185=VisuMZ['BattleCore'][_0xed360a(0x668)][_0xed360a(0x47d)],_0x3fed2d=_0x4c359a[_0xed360a(0x4ac)]();if(_0x39b185[_0xed360a(0x350)])this['displayBuffs'](_0x4c359a,_0x3fed2d['addedBuffs'],TextManager[_0xed360a(0x2bd)]);if(_0x39b185[_0xed360a(0x263)])this['displayBuffs'](_0x4c359a,_0x3fed2d[_0xed360a(0x351)],TextManager[_0xed360a(0x264)]);if(_0x39b185['ShowRemovedBuff'])this[_0xed360a(0x1fc)](_0x4c359a,_0x3fed2d['removedBuffs'],TextManager[_0xed360a(0xc36)]);},Window_BattleLog[_0x4a80d9(0xba6)]['displayBuffs']=function(_0x4e0106,_0x1bc4b8,_0x405489){const _0x2c7e27=_0x4a80d9;for(const _0x5df846 of _0x1bc4b8){const _0x384cec=_0x405489['format'](_0x4e0106[_0x2c7e27(0x380)](),TextManager[_0x2c7e27(0x340)](_0x5df846));this['push'](_0x2c7e27(0xcdc)),this[_0x2c7e27(0x510)]('pushBaseLine'),this['push'](_0x2c7e27(0x496),_0x384cec),this[_0x2c7e27(0x510)](_0x2c7e27(0xca3));}},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xae2)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x2b9)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x2b9)]=function(){const _0x241274=_0x4a80d9;VisuMZ[_0x241274(0xbe1)][_0x241274(0xae2)][_0x241274(0x432)](this),this['callNextMethod']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x4b7)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x917)],Window_BattleLog[_0x4a80d9(0xba6)]['pushBaseLine']=function(){const _0x38ee87=_0x4a80d9;VisuMZ['BattleCore'][_0x38ee87(0x4b7)][_0x38ee87(0x432)](this),this['callNextMethod']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xc3e)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xcdc)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xcdc)]=function(){const _0x15905e=_0x4a80d9;VisuMZ[_0x15905e(0xbe1)]['Window_BattleLog_popBaseLine']['call'](this),this[_0x15905e(0x717)](),this[_0x15905e(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x2c8)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x300)],Window_BattleLog['prototype']['popupDamage']=function(_0x594a19){const _0x2059e3=_0x4a80d9;VisuMZ[_0x2059e3(0xbe1)][_0x2059e3(0x2c8)][_0x2059e3(0x432)](this,_0x594a19),this[_0x2059e3(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x4c1)]=function(){const _0x3588d5=_0x4a80d9;let _0x204191=0x0;this[_0x3588d5(0xc48)][_0x3588d5(0x6fc)]>0x0&&(_0x3588d5(0x21a)===_0x3588d5(0x625)?this[_0x3588d5(0x206)]['x']=0x8:_0x204191=this[_0x3588d5(0xc48)][this[_0x3588d5(0xc48)][_0x3588d5(0x6fc)]-0x1]);if(this[_0x3588d5(0x4c4)]['length']>_0x204191){if(_0x3588d5(0xca7)!=='Qpfny')this[_0x3588d5(0xca3)]();else return 0x0;}else this[_0x3588d5(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x718)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5ad)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x5ad)]=function(_0x521ab1,_0x10b650){const _0x4927e6=_0x4a80d9;VisuMZ['BattleCore'][_0x4927e6(0x718)][_0x4927e6(0x432)](this,_0x521ab1,_0x10b650),this[_0x4927e6(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x394)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x1e8)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x1e8)]=function(_0x5ed956,_0x4398b3){const _0x2c3d46=_0x4a80d9;VisuMZ[_0x2c3d46(0xbe1)]['Window_BattleLog_performAction'][_0x2c3d46(0x432)](this,_0x5ed956,_0x4398b3),this[_0x2c3d46(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcc1)]=Window_BattleLog['prototype'][_0x4a80d9(0x8d3)],Window_BattleLog[_0x4a80d9(0xba6)]['performActionEnd']=function(_0x1a8c25){const _0x105a8a=_0x4a80d9;VisuMZ[_0x105a8a(0xbe1)][_0x105a8a(0xcc1)][_0x105a8a(0x432)](this,_0x1a8c25);for(const _0x2169f0 of BattleManager['allBattleMembers']()){if(_0x105a8a(0x37b)===_0x105a8a(0x37b)){if(!_0x2169f0)continue;if(_0x2169f0[_0x105a8a(0x50b)]())continue;_0x2169f0[_0x105a8a(0x7f0)]();}else{if(!_0x13d4b5[_0x105a8a(0x1f8)]())return;if(!_0x2764a1[_0x105a8a(0x619)])return;const _0x14787e=_0x55fa3f[_0x105a8a(0xc05)]();if(!_0x14787e)return;_0x14787e[_0x105a8a(0xbaa)](_0x105a8a(0x464));}}this[_0x105a8a(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xbe2)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x4dd)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x4dd)]=function(_0xf8c9a6){const _0x1ee9a5=_0x4a80d9;VisuMZ['BattleCore'][_0x1ee9a5(0xbe2)][_0x1ee9a5(0x432)](this,_0xf8c9a6),this['callNextMethod']();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcba)]=Window_BattleLog[_0x4a80d9(0xba6)]['performMiss'],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x697)]=function(_0x3b6501){const _0x37e6af=_0x4a80d9;VisuMZ[_0x37e6af(0xbe1)][_0x37e6af(0xcba)][_0x37e6af(0x432)](this,_0x3b6501),this[_0x37e6af(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x5b6)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x4fd)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x4fd)]=function(_0x2697a1){const _0x2b80c6=_0x4a80d9;VisuMZ[_0x2b80c6(0xbe1)]['Window_BattleLog_performRecovery'][_0x2b80c6(0x432)](this,_0x2697a1),this[_0x2b80c6(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0xcf0)]=Window_BattleLog[_0x4a80d9(0xba6)]['performEvasion'],Window_BattleLog['prototype'][_0x4a80d9(0x153)]=function(_0x4a6fbf){const _0x5abbed=_0x4a80d9;VisuMZ[_0x5abbed(0xbe1)][_0x5abbed(0xcf0)][_0x5abbed(0x432)](this,_0x4a6fbf),this[_0x5abbed(0xcf7)]();},VisuMZ['BattleCore'][_0x4a80d9(0x399)]=Window_BattleLog['prototype'][_0x4a80d9(0x5ff)],Window_BattleLog[_0x4a80d9(0xba6)]['performMagicEvasion']=function(_0x4572e5){const _0xc5af15=_0x4a80d9;VisuMZ['BattleCore'][_0xc5af15(0x399)][_0xc5af15(0x432)](this,_0x4572e5),this[_0xc5af15(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x49c)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x48d)],Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x48d)]=function(_0x558c9e){const _0x47b496=_0x4a80d9;VisuMZ['BattleCore'][_0x47b496(0x49c)]['call'](this,_0x558c9e),this[_0x47b496(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x6a7)]=Window_BattleLog[_0x4a80d9(0xba6)]['performReflection'],Window_BattleLog[_0x4a80d9(0xba6)]['performReflection']=function(_0x34fb2f){const _0x7697dc=_0x4a80d9;VisuMZ[_0x7697dc(0xbe1)][_0x7697dc(0x6a7)][_0x7697dc(0x432)](this,_0x34fb2f),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4a80d9(0x439)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x18a)],Window_BattleLog[_0x4a80d9(0xba6)]['performSubstitute']=function(_0x1e9f62,_0x3a0a3a){const _0x1220eb=_0x4a80d9;VisuMZ[_0x1220eb(0xbe1)]['Window_BattleLog_performSubstitute'][_0x1220eb(0x432)](this,_0x1e9f62,_0x3a0a3a),this[_0x1220eb(0xcf7)]();},VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x382)]=Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x748)],Window_BattleLog[_0x4a80d9(0xba6)]['performCollapse']=function(_0x590648){const _0x4cd2c1=_0x4a80d9;VisuMZ['BattleCore'][_0x4cd2c1(0x382)][_0x4cd2c1(0x432)](this,_0x590648),this[_0x4cd2c1(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xa87)]=function(_0x2e320b,_0x4ff653){const _0x5bffc0=_0x4a80d9;_0x2e320b[_0x5bffc0(0xa87)](_0x4ff653),this[_0x5bffc0(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)]['showEnemyAttackAnimation']=function(_0x944f62,_0x29a9eb){const _0xe97b55=_0x4a80d9,_0x3c41b4=_0x944f62[_0xe97b55(0x74f)]();if(_0x3c41b4<=0x0){if(_0xe97b55(0x4bf)!=='Yltuh'){const _0x462580=_0x4aac9c[_0xe97b55(0x6c8)];if(_0x462580[_0xe97b55(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x1c3ded(_0x2321c6['$1'])*0.01;else{if(_0x462580[_0xe97b55(0x605)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x334e4e(_0x4a1d9d['$1'])||0x0;}}else SoundManager[_0xe97b55(0xbc1)]();}else _0xe97b55(0x16a)!=='TadiK'?_0x1a45f8[_0xe97b55(0x8f7)]([_0x182ac0]):this[_0xe97b55(0x7ab)](_0x29a9eb,_0x3c41b4);},Window_BattleLog[_0x4a80d9(0xba6)]['applyImmortal']=function(_0x15347b,_0x44bf7f,_0x27ad9f){const _0xfc5a63=_0x4a80d9,_0x109969=[_0x15347b]['concat'](_0x44bf7f);for(const _0x4e9dcf of _0x109969){if(!_0x4e9dcf)continue;_0x4e9dcf[_0xfc5a63(0x349)](_0x27ad9f);}this['callNextMethod']();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x8ec)]=function(_0x21a433){const _0x5d82a2=_0x4a80d9;this[_0x5d82a2(0xa18)]=_0x21a433;},Window_BattleLog[_0x4a80d9(0xba6)]['requestMotion']=function(_0x4c9427,_0x3a4b99){const _0xf1f1b=_0x4a80d9;for(const _0x6fd36 of _0x4c9427){if(!_0x6fd36)continue;_0x6fd36[_0xf1f1b(0x1f3)](_0x3a4b99);}this[_0xf1f1b(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x19e)]=function(_0x4a8403,_0x1a9ee5,_0x323da5,_0x52b6b6,_0xe2064f,_0x2c8ea6){const _0x5e3572=_0x4a80d9;_0x4a8403[_0x5e3572(0xa2c)](_0x1a9ee5,_0x323da5,_0x52b6b6,_0xe2064f,_0x2c8ea6,-0x1),this[_0x5e3572(0xcf7)]();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0xa96)]=function(_0xca1580,_0x5977e5,_0xac3762,_0x4b4b7b,_0x1e9571,_0x41c4f7,_0x21a073){const _0x28867d=_0x4a80d9,_0x1e5b10=Math['min'](..._0x5977e5[_0x28867d(0xc3f)](_0x12a960=>_0x12a960['battler']()['_baseX']-_0x12a960[_0x28867d(0x997)]()[_0x28867d(0x29a)]()/0x2)),_0x51728a=Math[_0x28867d(0x78c)](..._0x5977e5[_0x28867d(0xc3f)](_0x5cc754=>_0x5cc754['battler']()[_0x28867d(0x9ec)]+_0x5cc754['battler']()['mainSpriteWidth']()/0x2)),_0x2782aa=Math['min'](..._0x5977e5[_0x28867d(0xc3f)](_0x32cd6f=>_0x32cd6f[_0x28867d(0x997)]()[_0x28867d(0x1d5)]-_0x32cd6f[_0x28867d(0x997)]()[_0x28867d(0x33e)]())),_0x1d3d2b=Math['max'](..._0x5977e5[_0x28867d(0xc3f)](_0x33f504=>_0x33f504[_0x28867d(0x997)]()[_0x28867d(0x1d5)])),_0x205ea5=_0x5977e5[_0x28867d(0x435)](_0x411856=>_0x411856['isActor']())[_0x28867d(0x6fc)],_0x586db6=_0x5977e5['filter'](_0x1cf0bc=>_0x1cf0bc['isEnemy']())[_0x28867d(0x6fc)];let _0x13d988=0x0,_0x30b9fb=0x0;if(_0xac3762[_0x28867d(0x605)](/front/i)){if(_0x28867d(0x70e)!==_0x28867d(0x70e))return _0x467731['BattleCore'][_0x28867d(0x8d1)][_0x28867d(0x432)](this,_0x6ce215);else _0x13d988=_0x205ea5>=_0x586db6?_0x1e5b10:_0x51728a;}else{if(_0xac3762['match'](/middle/i))_0x13d988=(_0x1e5b10+_0x51728a)/0x2,_0x21a073=-0x1;else{if(_0xac3762[_0x28867d(0x605)](/back/i)){if(_0x28867d(0x88c)===_0x28867d(0x88c))_0x13d988=_0x205ea5>=_0x586db6?_0x51728a:_0x1e5b10;else{_0x3b980e[_0x28867d(0xba6)][_0x28867d(0x8b9)]['call'](this,_0x46ac10),_0x2046bd['select'](this[_0x28867d(0x378)]()),_0x59f001[_0x28867d(0x8b9)](this[_0x28867d(0x378)]());if(!this[_0x28867d(0x378)]())return;if(this[_0x28867d(0x1ae)]()){const _0x524dc7=_0x4ce373[_0x28867d(0xb97)][_0x28867d(0xcc2)];this[_0x28867d(0x378)]()[_0x28867d(0x172)]()?_0x524dc7[_0x28867d(0x8b9)](this[_0x28867d(0x378)]()[_0x28867d(0x4a4)]()):_0x524dc7[_0x28867d(0x1c4)]();}}}}}if(_0xac3762[_0x28867d(0x605)](/head/i))_0x30b9fb=_0x2782aa;else{if(_0xac3762[_0x28867d(0x605)](/center/i)){_0x30b9fb=(_0x2782aa+_0x1d3d2b)/0x2;if(_0xca1580[_0x28867d(0x997)]())_0x30b9fb+=_0xca1580[_0x28867d(0x997)]()[_0x28867d(0x8dc)]/0x2;}else _0xac3762[_0x28867d(0x605)](/base/i)&&(_0x30b9fb=_0x1d3d2b);}_0xca1580[_0x28867d(0xa2c)](_0x13d988,_0x30b9fb,_0x4b4b7b,_0x1e9571,_0x41c4f7,_0x21a073),this['callNextMethod']();},Window_BattleLog[_0x4a80d9(0xba6)][_0x4a80d9(0x3f6)]=function(_0x13b0c9,_0x2942ce,_0x537925){const _0x44c587=_0x4a80d9;for(const _0x1e0818 of _0x13b0c9){if(!_0x1e0818)continue;_0x1e0818[_0x44c587(0x946)](_0x2942ce,_0x537925);}this[_0x44c587(0xcf7)]();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget['prototype']=Object[_0x4a80d9(0x5e8)](Window_Command[_0x4a80d9(0xba6)]),Window_BattleMultiTarget[_0x4a80d9(0xba6)]['constructor']=Window_BattleMultiTarget,VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)]['MultiTarget']=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)][_0x4a80d9(0x1f5)]||{},Window_BattleMultiTarget[_0x4a80d9(0x2eb)]=VisuMZ['BattleCore']['Settings']['MultiTarget'][_0x4a80d9(0x485)]??0x118,Window_BattleMultiTarget[_0x4a80d9(0x4ee)]=VisuMZ['BattleCore'][_0x4a80d9(0x668)][_0x4a80d9(0x1f5)]['BgType']??0x2,Window_BattleMultiTarget[_0x4a80d9(0x982)]=VisuMZ[_0x4a80d9(0xbe1)]['Settings'][_0x4a80d9(0x1f5)][_0x4a80d9(0x8b8)]??!![],Window_BattleMultiTarget[_0x4a80d9(0x855)]=VisuMZ[_0x4a80d9(0xbe1)]['Settings'][_0x4a80d9(0x1f5)][_0x4a80d9(0x95c)]??_0x4a80d9(0x28e),Window_BattleMultiTarget[_0x4a80d9(0x5b8)]=VisuMZ['BattleCore']['Settings']['MultiTarget'][_0x4a80d9(0xc79)]??_0x4a80d9(0xa9c),Window_BattleMultiTarget[_0x4a80d9(0x11e)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)]['MultiTarget'][_0x4a80d9(0x409)]??0x0,Window_BattleMultiTarget[_0x4a80d9(0x941)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)][_0x4a80d9(0x1f5)][_0x4a80d9(0x6be)]??0x0,Window_BattleMultiTarget[_0x4a80d9(0x84e)]=VisuMZ[_0x4a80d9(0xbe1)][_0x4a80d9(0x668)]['MultiTarget'][_0x4a80d9(0x59f)]??0x0,Window_BattleMultiTarget[_0x4a80d9(0xafd)]=VisuMZ['BattleCore'][_0x4a80d9(0x668)][_0x4a80d9(0x1f5)][_0x4a80d9(0x4e5)]??0x0,Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0x54a)]=function(_0x34f6ea,_0x407c0b){const _0x4c00d5=_0x4a80d9;this[_0x4c00d5(0x4f4)]=_0x407c0b,Window_Command[_0x4c00d5(0xba6)][_0x4c00d5(0x54a)][_0x4c00d5(0x432)](this,_0x34f6ea),this[_0x4c00d5(0xb45)](Window_BattleMultiTarget[_0x4c00d5(0x4ee)]),this[_0x4c00d5(0x545)](),this[_0x4c00d5(0x670)](),this[_0x4c00d5(0x1c4)]();},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0xafa)]=function(){const _0x27ffb0=_0x4a80d9;return this[_0x27ffb0(0x4f4)];},Window_BattleMultiTarget[_0x4a80d9(0xba6)]['makeCommandList']=function(){const _0x28299a=_0x4a80d9;let _0x1af8cd=this[_0x28299a(0xafa)]()?Window_BattleMultiTarget['ALL_ACTORS']:Window_BattleMultiTarget[_0x28299a(0x5b8)];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x28299a(0x982)]){if(_0x28299a(0x7eb)!==_0x28299a(0x60e)){this[_0x28299a(0x609)]=this[_0x28299a(0xafa)]()?_0x28299a(0x23c):'pageup',this[_0x28299a(0x730)]=TextManager[_0x28299a(0x696)](this[_0x28299a(0x609)]);const _0x54cb1e=VisuMZ[_0x28299a(0x208)][_0x28299a(0x668)][_0x28299a(0x942)][_0x28299a(0x9bf)];_0x1af8cd=_0x54cb1e[_0x28299a(0x7d6)](this['_buttonText'],_0x1af8cd);}else{const _0x3bae31=_0x74d486['$1']['split'](',')[_0x28299a(0xc3f)](_0x521db4=>_0x3927be(_0x521db4));this[_0x28299a(0x7b5)](),this[_0x28299a(0x479)](_0x3bae31);}}this[_0x28299a(0x91d)](_0x1af8cd,'selectAll');},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0x87f)]=function(_0x1c735b){const _0x5dcc21=_0x4a80d9,_0x395032=this['itemLineRect'](_0x1c735b);this[_0x5dcc21(0x81e)](),this[_0x5dcc21(0x15a)](this['isCommandEnabled'](_0x1c735b));const _0x35e8dd=this[_0x5dcc21(0x641)](_0x1c735b),_0x22d773=this[_0x5dcc21(0x475)](_0x35e8dd)[_0x5dcc21(0x2ce)],_0x3bb10c=_0x395032['x']+Math[_0x5dcc21(0x506)]((_0x395032[_0x5dcc21(0x2ce)]-_0x22d773)/0x2);this['drawTextEx'](_0x35e8dd,_0x3bb10c,_0x395032['y'],_0x395032[_0x5dcc21(0x2ce)]);},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0x333)]=function(){const _0x54f9fe=_0x4a80d9;Window_Command[_0x54f9fe(0xba6)][_0x54f9fe(0x333)][_0x54f9fe(0x432)](this),this[_0x54f9fe(0x156)](),this[_0x54f9fe(0xc8c)]();},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0x156)]=function(){const _0x3c217c=_0x4a80d9;this[_0x3c217c(0x83f)]=this['visibilityState']();},Window_BattleMultiTarget[_0x4a80d9(0xba6)]['visibilityState']=function(){const _0x3e01f9=_0x4a80d9,_0x38b764=BattleManager['inputtingAction'](),_0x2dfa00=_0x38b764&&_0x38b764[_0x3e01f9(0x323)]();if(!_0x2dfa00)return![];const _0x48f62f=SceneManager[_0x3e01f9(0xb97)];if(this[_0x3e01f9(0xafa)]()){if(_0x48f62f['_actorWindow']['active']&&_0x48f62f['_actorWindow']['_handlers'][_0x3e01f9(0x23c)])return!![];if(_0x48f62f[_0x3e01f9(0x9bc)][_0x3e01f9(0x7c0)]&&_0x48f62f['_enemyWindow'][_0x3e01f9(0x44d)]['pagedown'])return!![];}else{if(_0x48f62f[_0x3e01f9(0x9bc)][_0x3e01f9(0x7c0)]&&_0x48f62f['_enemyWindow'][_0x3e01f9(0x44d)][_0x3e01f9(0xbdf)])return!![];}return![];},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0xc8c)]=function(){const _0x32f85c=_0x4a80d9;if(!Imported['VisuMZ_0_CoreEngine'])return;this[_0x32f85c(0x730)]!==TextManager[_0x32f85c(0x696)](this[_0x32f85c(0x609)])&&this[_0x32f85c(0x1d6)]();},Window_BattleMultiTarget[_0x4a80d9(0xba6)][_0x4a80d9(0x53d)]=function(){const _0x117ad6=_0x4a80d9;if(this[_0x117ad6(0x83f)]&&TouchInput[_0x117ad6(0xb61)]()){if(_0x117ad6(0x2b3)==='efXTT'){const _0x5ac76e=this[_0x117ad6(0x87e)]();if(_0x5ac76e>=0x0){if(_0x117ad6(0x29c)===_0x117ad6(0x29c)){const _0x5268ee=this[_0x117ad6(0xafa)]()?_0x117ad6(0x23c):_0x117ad6(0xbdf);Input['virtualClick'](_0x5268ee);}else{_0xc853d5['prototype'][_0x117ad6(0x333)][_0x117ad6(0x432)](this),this['updateRefresh'](),this['updateEffectContainers']();if(this[_0x117ad6(0x4bb)]()==='border')this['updateBorderStyle']();}}}else _0x4d7d09[_0x117ad6(0xbe1)][_0x117ad6(0x9f5)]['call'](this),this['y']=_0x2a0d48[_0x117ad6(0x8dc)]*0xa,this[_0x117ad6(0x1ae)]()&&this[_0x117ad6(0xa4d)]();}};